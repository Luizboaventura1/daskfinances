{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref } from 'vue';\nimport { useStore } from 'vuex';\nimport { useRouter } from 'vue-router';\nimport { db } from '@/firebase';\nimport { collection, onSnapshot } from \"firebase/firestore\";\nimport { onMounted } from 'vue';\nimport AlertPopupPanel from '@/components/Popups/PanelPopups/AlertPopupPanel.vue';\nexport default {\n  __name: 'LoginView',\n  setup(__props, {\n    expose\n  }) {\n    expose();\n    let AllUsers = ref([]);\n    onMounted(async () => {\n      onSnapshot(collection(db, \"usuarios\"), snapshot => {\n        snapshot.forEach(docUser => {\n          const user = {\n            id: docUser.id,\n            nome: docUser.data().nome,\n            gmail: docUser.data().gmail,\n            senha: docUser.data().senha\n          };\n          AllUsers.value.push(user);\n        });\n      });\n    });\n    let gmail = ref('');\n    let senha = ref('');\n    let store = useStore();\n    let router = useRouter();\n    const logarUsuario = () => {\n      let gmailValue = gmail.value.trim();\n      let senhaValue = senha.value.trim();\n      if (confirmRules) {\n        let verificarSeAContaExiste = AllUsers.value.find(user => {\n          if (user.gmail === gmailValue && user.senha === senhaValue) return true;\n          return false;\n        });\n        let gmailUser = AllUsers.value.find(item => item.gmail === gmailValue);\n        let senhaUser = AllUsers.value.find(item => item.senha === senhaValue);\n        let nomeUser = AllUsers.value.find(item => {\n          if (item.gmail === gmailValue) return item.nome;\n        });\n        if (verificarSeAContaExiste) {\n          loader.value = true;\n          setTimeout(() => {\n            loader.value = false;\n            router.push('/painel');\n          }, 900);\n          const token = {\n            id: gmailUser.id,\n            nome: nomeUser.nome,\n            gmail: gmailUser.gmail,\n            senha: senhaUser.senha,\n            tokenOn: true\n          };\n          store.commit('addToken', token);\n        } else {\n          alertPopupPanel('Conta não encontrada!');\n        }\n      }\n    };\n\n    // Loader\n\n    let loader = ref(false);\n\n    // Popups\n\n    let statePopupPanel = ref(false);\n    let textPopupPanel = ref('');\n    const alertPopupPanel = msg => {\n      statePopupPanel.value = true;\n      textPopupPanel.value = msg;\n      setTimeout(() => {\n        statePopupPanel.value = false;\n      }, 2000);\n    };\n\n    // Rules login\n\n    let validationGmail = ref(false);\n    let validationPassword = ref(false);\n    const emailRules = [value => {\n      if (value) return validationGmail.value = true;else validationGmail.value = false;\n      return 'Email obrigatório!';\n    }, value => {\n      if (is) return validationGmail.value = true;else validationGmail.value = false;\n      return 'Email inválido!';\n    }, value => {\n      if (value.length <= 50) return validationGmail.value = true;else validationGmail.value = false;\n      return 'Máximo 50 caracteres!';\n    }];\n    const passwordRules = [value => {\n      if (value) return validationPassword.value = true;else validationPassword.value = false;\n      return 'Senha obrigatória!';\n    }, value => {\n      if (value.length >= 8) return validationPassword.value = true;else validationPassword.value = false;\n      return 'Minimo 8 caracteres';\n    }, value => {\n      if (value.length <= 50) return validationPassword.value = true;else validationPassword.value = false;\n      return 'Máximo 50 caracteres';\n    }];\n    const confirmRules = () => {\n      if (validationGmail.value && validationPassword.value) return true;\n      return false;\n    };\n    let visiblePassword = ref();\n    const isValidGmail = gmail => {\n      const parts = gmail.split('@');\n      const hasAtSymbol = parts.length === 2;\n      const localPart = parts[0].trim();\n      const domainPart = parts[1].trim();\n      return hasAtSymbol && !gmail.includes(' ') && localPart !== '' && domainPart !== '';\n    };\n    const __returned__ = {\n      get AllUsers() {\n        return AllUsers;\n      },\n      set AllUsers(v) {\n        AllUsers = v;\n      },\n      get gmail() {\n        return gmail;\n      },\n      set gmail(v) {\n        gmail = v;\n      },\n      get senha() {\n        return senha;\n      },\n      set senha(v) {\n        senha = v;\n      },\n      get store() {\n        return store;\n      },\n      set store(v) {\n        store = v;\n      },\n      get router() {\n        return router;\n      },\n      set router(v) {\n        router = v;\n      },\n      logarUsuario,\n      get loader() {\n        return loader;\n      },\n      set loader(v) {\n        loader = v;\n      },\n      get statePopupPanel() {\n        return statePopupPanel;\n      },\n      set statePopupPanel(v) {\n        statePopupPanel = v;\n      },\n      get textPopupPanel() {\n        return textPopupPanel;\n      },\n      set textPopupPanel(v) {\n        textPopupPanel = v;\n      },\n      alertPopupPanel,\n      get validationGmail() {\n        return validationGmail;\n      },\n      set validationGmail(v) {\n        validationGmail = v;\n      },\n      get validationPassword() {\n        return validationPassword;\n      },\n      set validationPassword(v) {\n        validationPassword = v;\n      },\n      emailRules,\n      passwordRules,\n      confirmRules,\n      get visiblePassword() {\n        return visiblePassword;\n      },\n      set visiblePassword(v) {\n        visiblePassword = v;\n      },\n      isValidGmail,\n      ref,\n      get useStore() {\n        return useStore;\n      },\n      get useRouter() {\n        return useRouter;\n      },\n      get db() {\n        return db;\n      },\n      get collection() {\n        return collection;\n      },\n      get onSnapshot() {\n        return onSnapshot;\n      },\n      onMounted,\n      AlertPopupPanel\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","useStore","useRouter","db","collection","onSnapshot","onMounted","AlertPopupPanel","AllUsers","snapshot","forEach","docUser","user","id","nome","data","gmail","senha","value","push","store","router","logarUsuario","gmailValue","trim","senhaValue","confirmRules","verificarSeAContaExiste","find","gmailUser","item","senhaUser","nomeUser","loader","setTimeout","token","tokenOn","commit","alertPopupPanel","statePopupPanel","textPopupPanel","msg","validationGmail","validationPassword","emailRules","is","length","passwordRules","visiblePassword","isValidGmail","parts","split","hasAtSymbol","localPart","domainPart","includes"],"sources":["C:/Users/PC/Documents/GitHub/daskfinances/src/views/auth/LoginView.vue"],"sourcesContent":["<template>\r\n  <v-app theem=\"dark\">\r\n    <header class=\"d-flex justify-center align-center\">\r\n      <v-container class=\"d-flex justify-center align-center\">\r\n        <form class=\"elevation-10 rounded-lg py-3 px-4\">\r\n          <h1 class=\"text-white text-center mb-5\">Login</h1>\r\n          <div class=\"mb-2\">\r\n            <v-text-field\r\n              label=\"Email\"\r\n              v-model=\"gmail\"\r\n              class=\"text-white w-100 border-0 pa-2 rounded\"\r\n              type=\"email\"\r\n              placeholder=\"Seu email\"\r\n              prepend-inner-icon=\"mdi-email-outline\"\r\n              :rules=\"emailRules\"\r\n              variant=\"outlined\"\r\n            ></v-text-field>\r\n          </div>\r\n          <div class=\"mb-2\">\r\n            <v-text-field\r\n              label=\"Senha\"\r\n              v-model=\"senha\"\r\n              class=\"text-white w-100 border-0 pa-2 rounded\"\r\n              placeholder=\"Sua senha\"\r\n              :rules=\"passwordRules\"\r\n              prepend-inner-icon=\"mdi-lock-outline\"\r\n              @click:append-inner=\"visiblePassword = !visiblePassword\"\r\n              :append-inner-icon=\"visiblePassword ? 'mdi-eye-off' : 'mdi-eye'\"\r\n              :type=\"visiblePassword ? 'text' : 'password'\"\r\n              variant=\"outlined\"\r\n            ></v-text-field>\r\n          </div>\r\n          <v-btn\r\n          :disabled=\"loader\"\r\n          :loading=\"loader\"\r\n          @click=\"logarUsuario()\"\r\n          class=\"w-100 my-3 button-entrar\"\r\n          >Entrar</v-btn>\r\n          <div class=\"w-100 text-center\">\r\n            <router-link\r\n            class=\"link-registrar text-decoration-none font-weight-light\"\r\n            to=\"/auth/registrar\">Não tem uma conta?</router-link>\r\n          </div>\r\n        </form>\r\n      </v-container>\r\n    </header>\r\n    <v-dialog\r\n        v-model=\"loader\"\r\n        :scrim=\"false\"\r\n        persistent\r\n        width=\"auto\"\r\n      >\r\n        <v-card\r\n          color=\"blue-darken-1\"\r\n        >\r\n          <v-card-text>\r\n            Entrando\r\n            <v-progress-linear\r\n              indeterminate\r\n              color=\"white\"\r\n              class=\"mb-0\"\r\n            ></v-progress-linear>\r\n          </v-card-text>\r\n        </v-card>\r\n      </v-dialog>\r\n    <AlertPopupPanel\r\n      :statePopupPanel=\"statePopupPanel\"\r\n    >\r\n      {{ textPopupPanel }}\r\n    </AlertPopupPanel>\r\n  </v-app>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from 'vue';\r\nimport { useStore } from 'vuex';\r\nimport { useRouter } from 'vue-router';\r\nimport { db } from '@/firebase'\r\nimport { collection, onSnapshot} from \"firebase/firestore\";\r\nimport { onMounted } from 'vue';\r\nimport AlertPopupPanel from '@/components/Popups/PanelPopups/AlertPopupPanel.vue';\r\n\r\nlet AllUsers = ref([])\r\n\r\nonMounted(async () => {\r\n  onSnapshot(collection(db, \"usuarios\"), (snapshot) => {\r\n    snapshot.forEach((docUser) => {\r\n      const user = {\r\n        id: docUser.id,\r\n        nome: docUser.data().nome,\r\n        gmail: docUser.data().gmail,\r\n        senha: docUser.data().senha\r\n      }\r\n\r\n      AllUsers.value.push(user)\r\n    })\r\n  });\r\n})\r\n\r\nlet gmail = ref('')\r\nlet senha = ref('')\r\n\r\nlet store = useStore()\r\nlet router = useRouter()\r\n\r\nconst logarUsuario = () => {\r\n  let gmailValue = gmail.value.trim()\r\n  let senhaValue = senha.value.trim()\r\n\r\n  if(confirmRules) {\r\n\r\n    let verificarSeAContaExiste = AllUsers.value.find(user => {\r\n      if(user.gmail === gmailValue && user.senha === senhaValue) \r\n        return true\r\n\r\n      return false\r\n    })\r\n\r\n    let gmailUser = AllUsers.value.find((item) => item.gmail === gmailValue)\r\n    let senhaUser = AllUsers.value.find((item) => item.senha === senhaValue)\r\n    let nomeUser = AllUsers.value.find((item) => {\r\n      if(item.gmail === gmailValue)\r\n        return item.nome\r\n    })\r\n\r\n    if(verificarSeAContaExiste) {\r\n      loader.value = true\r\n      setTimeout(() => {\r\n        loader.value = false\r\n        router.push('/painel')\r\n      },900)\r\n\r\n      const token = {\r\n        id: gmailUser.id,\r\n        nome: nomeUser.nome,\r\n        gmail: gmailUser.gmail,\r\n        senha: senhaUser.senha,\r\n        tokenOn: true\r\n      }\r\n\r\n      store.commit('addToken',token)\r\n    }else {\r\n      alertPopupPanel('Conta não encontrada!')\r\n    }\r\n  }\r\n}\r\n\r\n// Loader\r\n\r\nlet loader = ref(false)\r\n\r\n// Popups\r\n\r\nlet statePopupPanel = ref(false)\r\nlet textPopupPanel = ref('')\r\n\r\nconst alertPopupPanel = (msg) => {\r\n  statePopupPanel.value = true\r\n  textPopupPanel.value = msg\r\n\r\n  setTimeout(() => {\r\n    statePopupPanel.value = false\r\n  },2000)\r\n}\r\n\r\n// Rules login\r\n\r\nlet validationGmail = ref(false)\r\nlet validationPassword = ref(false)\r\n\r\nconst emailRules = [\r\n  value => {\r\n    if(value)\r\n      return validationGmail.value = true\r\n    else\r\n      validationGmail.value = false\r\n      return 'Email obrigatório!'\r\n  },\r\n  value => {\r\n    if(is)\r\n      return validationGmail.value = true\r\n    else\r\n      validationGmail.value = false\r\n      return 'Email inválido!'\r\n  },\r\n  value => {\r\n    if(value.length <= 50)\r\n      return validationGmail.value = true\r\n    else\r\n      validationGmail.value = false\r\n      return 'Máximo 50 caracteres!'\r\n  }\r\n]\r\n\r\nconst passwordRules = [\r\n  value => {\r\n    if(value)\r\n      return validationPassword.value = true\r\n    else\r\n      validationPassword.value = false\r\n      return 'Senha obrigatória!'\r\n  },\r\n  value => {\r\n    if(value.length >= 8)\r\n      return validationPassword.value = true\r\n    else\r\n    validationPassword.value = false\r\n      return 'Minimo 8 caracteres'\r\n  },\r\n  value => {\r\n    if(value.length <= 50)\r\n      return validationPassword.value = true\r\n    else\r\n    validationPassword.value = false\r\n      return 'Máximo 50 caracteres'\r\n  }\r\n]\r\n\r\nconst confirmRules = () => {\r\n  if(validationGmail.value && validationPassword.value)\r\n    return true\r\n  return false\r\n}\r\n\r\nlet visiblePassword = ref()\r\n\r\nconst isValidGmail = (gmail) => {\r\n  const parts = gmail.split('@');\r\n  const hasAtSymbol = parts.length === 2;\r\n  const localPart = parts[0].trim();\r\n  const domainPart = parts[1].trim();\r\n  \r\n  return (\r\n      hasAtSymbol &&\r\n      !gmail.includes(' ') &&\r\n      localPart !== '' &&\r\n      domainPart !== ''\r\n  );\r\n}\r\n\r\n\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n  header {\r\n    height: 100vh;\r\n    background-color: #17191c;\r\n\r\n    form {\r\n      width: 100%;\r\n      max-width: 400px;\r\n      min-height: 300px;\r\n      background-color: #25272c;\r\n\r\n      input {\r\n        outline: none;\r\n        background-color: #17191c;\r\n      }\r\n\r\n      .link-registrar {\r\n        color: #959595;\r\n        font-size: 15px;\r\n\r\n        &:hover {\r\n          color: #949494;\r\n          text-decoration: underline !important;\r\n        }\r\n      }\r\n\r\n      .button-entrar {\r\n        background-color: #00b2ff;\r\n        color: white;\r\n        box-shadow: none;\r\n\r\n        &:hover {\r\n          box-shadow: 0 0 10px #0084ff65;\r\n        }\r\n      }\r\n    }\r\n  }\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}