{"ast":null,"code":"import \"core-js/modules/esnext.typed-array.to-reversed.js\";\nimport \"core-js/modules/esnext.typed-array.to-sorted.js\";\nimport \"core-js/modules/esnext.typed-array.with.js\";\nimport firebase from '@firebase/app-compat';\nimport { FirestoreError, Bytes, _isBase64Available, enableIndexedDbPersistence, enableMultiTabIndexedDbPersistence, clearIndexedDbPersistence, _DatabaseId, _logWarn, connectFirestoreEmulator, enableNetwork, disableNetwork, _validateIsNotUsedTogether, waitForPendingWrites, onSnapshotsInSync, collection, doc, collectionGroup, runTransaction, ensureFirestoreConfigured, WriteBatch as WriteBatch$1, executeWrite, loadBundle, namedQuery, DocumentSnapshot as DocumentSnapshot$1, DocumentReference as DocumentReference$1, _DocumentKey, refEqual, setDoc, updateDoc, deleteDoc, onSnapshot, getDocFromCache, getDocFromServer, getDoc, snapshotEqual, query, where, orderBy, limit, limitToLast, startAt, startAfter, endBefore, endAt, queryEqual, getDocsFromCache, getDocsFromServer, getDocs, QuerySnapshot as QuerySnapshot$1, addDoc, _cast, AbstractUserDataWriter, setLogLevel as setLogLevel$1, QueryDocumentSnapshot as QueryDocumentSnapshot$1, _debugAssert, FieldPath as FieldPath$1, _FieldPath, serverTimestamp, deleteField, arrayUnion, arrayRemove, increment, GeoPoint, Timestamp, CACHE_SIZE_UNLIMITED } from '@firebase/firestore';\nimport { getModularInstance } from '@firebase/util';\nimport { Component } from '@firebase/component';\nconst name = \"@firebase/firestore-compat\";\nconst version = \"0.3.17\";\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction validateSetOptions(methodName, options) {\n  if (options === undefined) {\n    return {\n      merge: false\n    };\n  }\n  if (options.mergeFields !== undefined && options.merge !== undefined) {\n    throw new FirestoreError('invalid-argument', `Invalid options passed to function ${methodName}(): You cannot ` + 'specify both \"merge\" and \"mergeFields\".');\n  }\n  return options;\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/** Helper function to assert Uint8Array is available at runtime. */\nfunction assertUint8ArrayAvailable() {\n  if (typeof Uint8Array === 'undefined') {\n    throw new FirestoreError('unimplemented', 'Uint8Arrays are not available in this environment.');\n  }\n}\n/** Helper function to assert Base64 functions are available at runtime. */\nfunction assertBase64Available() {\n  if (!_isBase64Available()) {\n    throw new FirestoreError('unimplemented', 'Blobs are unavailable in Firestore in this environment.');\n  }\n}\n/** Immutable class holding a blob (binary data) */\nclass Blob {\n  constructor(_delegate) {\n    this._delegate = _delegate;\n  }\n  static fromBase64String(base64) {\n    assertBase64Available();\n    return new Blob(Bytes.fromBase64String(base64));\n  }\n  static fromUint8Array(array) {\n    assertUint8ArrayAvailable();\n    return new Blob(Bytes.fromUint8Array(array));\n  }\n  toBase64() {\n    assertBase64Available();\n    return this._delegate.toBase64();\n  }\n  toUint8Array() {\n    assertUint8ArrayAvailable();\n    return this._delegate.toUint8Array();\n  }\n  isEqual(other) {\n    return this._delegate.isEqual(other._delegate);\n  }\n  toString() {\n    return 'Blob(base64: ' + this.toBase64() + ')';\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction isPartialObserver(obj) {\n  return implementsAnyMethods(obj, ['next', 'error', 'complete']);\n}\n/**\r\n * Returns true if obj is an object and contains at least one of the specified\r\n * methods.\r\n */\nfunction implementsAnyMethods(obj, methods) {\n  if (typeof obj !== 'object' || obj === null) {\n    return false;\n  }\n  const object = obj;\n  for (const method of methods) {\n    if (method in object && typeof object[method] === 'function') {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * The persistence provider included with the full Firestore SDK.\r\n */\nclass IndexedDbPersistenceProvider {\n  enableIndexedDbPersistence(firestore, forceOwnership) {\n    return enableIndexedDbPersistence(firestore._delegate, {\n      forceOwnership\n    });\n  }\n  enableMultiTabIndexedDbPersistence(firestore) {\n    return enableMultiTabIndexedDbPersistence(firestore._delegate);\n  }\n  clearIndexedDbPersistence(firestore) {\n    return clearIndexedDbPersistence(firestore._delegate);\n  }\n}\n/**\r\n * Compat class for Firestore. Exposes Firestore Legacy API, but delegates\r\n * to the functional API of firestore-exp.\r\n */\nclass Firestore {\n  constructor(databaseIdOrApp, _delegate, _persistenceProvider) {\n    this._delegate = _delegate;\n    this._persistenceProvider = _persistenceProvider;\n    this.INTERNAL = {\n      delete: () => this.terminate()\n    };\n    if (!(databaseIdOrApp instanceof _DatabaseId)) {\n      this._appCompat = databaseIdOrApp;\n    }\n  }\n  get _databaseId() {\n    return this._delegate._databaseId;\n  }\n  settings(settingsLiteral) {\n    const currentSettings = this._delegate._getSettings();\n    if (!settingsLiteral.merge && currentSettings.host !== settingsLiteral.host) {\n      _logWarn('You are overriding the original host. If you did not intend ' + 'to override your settings, use {merge: true}.');\n    }\n    if (settingsLiteral.merge) {\n      settingsLiteral = Object.assign(Object.assign({}, currentSettings), settingsLiteral);\n      // Remove the property from the settings once the merge is completed\n      delete settingsLiteral.merge;\n    }\n    this._delegate._setSettings(settingsLiteral);\n  }\n  useEmulator(host, port, options = {}) {\n    connectFirestoreEmulator(this._delegate, host, port, options);\n  }\n  enableNetwork() {\n    return enableNetwork(this._delegate);\n  }\n  disableNetwork() {\n    return disableNetwork(this._delegate);\n  }\n  enablePersistence(settings) {\n    let synchronizeTabs = false;\n    let experimentalForceOwningTab = false;\n    if (settings) {\n      synchronizeTabs = !!settings.synchronizeTabs;\n      experimentalForceOwningTab = !!settings.experimentalForceOwningTab;\n      _validateIsNotUsedTogether('synchronizeTabs', synchronizeTabs, 'experimentalForceOwningTab', experimentalForceOwningTab);\n    }\n    return synchronizeTabs ? this._persistenceProvider.enableMultiTabIndexedDbPersistence(this) : this._persistenceProvider.enableIndexedDbPersistence(this, experimentalForceOwningTab);\n  }\n  clearPersistence() {\n    return this._persistenceProvider.clearIndexedDbPersistence(this);\n  }\n  terminate() {\n    if (this._appCompat) {\n      this._appCompat._removeServiceInstance('firestore-compat');\n      this._appCompat._removeServiceInstance('firestore');\n    }\n    return this._delegate._delete();\n  }\n  waitForPendingWrites() {\n    return waitForPendingWrites(this._delegate);\n  }\n  onSnapshotsInSync(arg) {\n    return onSnapshotsInSync(this._delegate, arg);\n  }\n  get app() {\n    if (!this._appCompat) {\n      throw new FirestoreError('failed-precondition', \"Firestore was not initialized using the Firebase SDK. 'app' is \" + 'not available');\n    }\n    return this._appCompat;\n  }\n  collection(pathString) {\n    try {\n      return new CollectionReference(this, collection(this._delegate, pathString));\n    } catch (e) {\n      throw replaceFunctionName(e, 'collection()', 'Firestore.collection()');\n    }\n  }\n  doc(pathString) {\n    try {\n      return new DocumentReference(this, doc(this._delegate, pathString));\n    } catch (e) {\n      throw replaceFunctionName(e, 'doc()', 'Firestore.doc()');\n    }\n  }\n  collectionGroup(collectionId) {\n    try {\n      return new Query(this, collectionGroup(this._delegate, collectionId));\n    } catch (e) {\n      throw replaceFunctionName(e, 'collectionGroup()', 'Firestore.collectionGroup()');\n    }\n  }\n  runTransaction(updateFunction) {\n    return runTransaction(this._delegate, transaction => updateFunction(new Transaction(this, transaction)));\n  }\n  batch() {\n    ensureFirestoreConfigured(this._delegate);\n    return new WriteBatch(new WriteBatch$1(this._delegate, mutations => executeWrite(this._delegate, mutations)));\n  }\n  loadBundle(bundleData) {\n    return loadBundle(this._delegate, bundleData);\n  }\n  namedQuery(name) {\n    return namedQuery(this._delegate, name).then(expQuery => {\n      if (!expQuery) {\n        return null;\n      }\n      return new Query(this,\n      // We can pass `expQuery` here directly since named queries don't have a UserDataConverter.\n      // Otherwise, we would have to create a new ExpQuery and pass the old UserDataConverter.\n      expQuery);\n    });\n  }\n}\nclass UserDataWriter extends AbstractUserDataWriter {\n  constructor(firestore) {\n    super();\n    this.firestore = firestore;\n  }\n  convertBytes(bytes) {\n    return new Blob(new Bytes(bytes));\n  }\n  convertReference(name) {\n    const key = this.convertDocumentKey(name, this.firestore._databaseId);\n    return DocumentReference.forKey(key, this.firestore, /* converter= */null);\n  }\n}\nfunction setLogLevel(level) {\n  setLogLevel$1(level);\n}\n/**\r\n * A reference to a transaction.\r\n */\nclass Transaction {\n  constructor(_firestore, _delegate) {\n    this._firestore = _firestore;\n    this._delegate = _delegate;\n    this._userDataWriter = new UserDataWriter(_firestore);\n  }\n  get(documentRef) {\n    const ref = castReference(documentRef);\n    return this._delegate.get(ref).then(result => new DocumentSnapshot(this._firestore, new DocumentSnapshot$1(this._firestore._delegate, this._userDataWriter, result._key, result._document, result.metadata, ref.converter)));\n  }\n  set(documentRef, data, options) {\n    const ref = castReference(documentRef);\n    if (options) {\n      validateSetOptions('Transaction.set', options);\n      this._delegate.set(ref, data, options);\n    } else {\n      this._delegate.set(ref, data);\n    }\n    return this;\n  }\n  update(documentRef, dataOrField, value, ...moreFieldsAndValues) {\n    const ref = castReference(documentRef);\n    if (arguments.length === 2) {\n      this._delegate.update(ref, dataOrField);\n    } else {\n      this._delegate.update(ref, dataOrField, value, ...moreFieldsAndValues);\n    }\n    return this;\n  }\n  delete(documentRef) {\n    const ref = castReference(documentRef);\n    this._delegate.delete(ref);\n    return this;\n  }\n}\nclass WriteBatch {\n  constructor(_delegate) {\n    this._delegate = _delegate;\n  }\n  set(documentRef, data, options) {\n    const ref = castReference(documentRef);\n    if (options) {\n      validateSetOptions('WriteBatch.set', options);\n      this._delegate.set(ref, data, options);\n    } else {\n      this._delegate.set(ref, data);\n    }\n    return this;\n  }\n  update(documentRef, dataOrField, value, ...moreFieldsAndValues) {\n    const ref = castReference(documentRef);\n    if (arguments.length === 2) {\n      this._delegate.update(ref, dataOrField);\n    } else {\n      this._delegate.update(ref, dataOrField, value, ...moreFieldsAndValues);\n    }\n    return this;\n  }\n  delete(documentRef) {\n    const ref = castReference(documentRef);\n    this._delegate.delete(ref);\n    return this;\n  }\n  commit() {\n    return this._delegate.commit();\n  }\n}\n/**\r\n * Wraps a `PublicFirestoreDataConverter` translating the types from the\r\n * experimental SDK into corresponding types from the Classic SDK before passing\r\n * them to the wrapped converter.\r\n */\nclass FirestoreDataConverter {\n  constructor(_firestore, _userDataWriter, _delegate) {\n    this._firestore = _firestore;\n    this._userDataWriter = _userDataWriter;\n    this._delegate = _delegate;\n  }\n  fromFirestore(snapshot, options) {\n    const expSnapshot = new QueryDocumentSnapshot$1(this._firestore._delegate, this._userDataWriter, snapshot._key, snapshot._document, snapshot.metadata, /* converter= */null);\n    return this._delegate.fromFirestore(new QueryDocumentSnapshot(this._firestore, expSnapshot), options !== null && options !== void 0 ? options : {});\n  }\n  toFirestore(modelObject, options) {\n    if (!options) {\n      return this._delegate.toFirestore(modelObject);\n    } else {\n      return this._delegate.toFirestore(modelObject, options);\n    }\n  }\n  // Use the same instance of `FirestoreDataConverter` for the given instances\n  // of `Firestore` and `PublicFirestoreDataConverter` so that isEqual() will\n  // compare equal for two objects created with the same converter instance.\n  static getInstance(firestore, converter) {\n    const converterMapByFirestore = FirestoreDataConverter.INSTANCES;\n    let untypedConverterByConverter = converterMapByFirestore.get(firestore);\n    if (!untypedConverterByConverter) {\n      untypedConverterByConverter = new WeakMap();\n      converterMapByFirestore.set(firestore, untypedConverterByConverter);\n    }\n    let instance = untypedConverterByConverter.get(converter);\n    if (!instance) {\n      instance = new FirestoreDataConverter(firestore, new UserDataWriter(firestore), converter);\n      untypedConverterByConverter.set(converter, instance);\n    }\n    return instance;\n  }\n}\nFirestoreDataConverter.INSTANCES = new WeakMap();\n/**\r\n * A reference to a particular document in a collection in the database.\r\n */\nclass DocumentReference {\n  constructor(firestore, _delegate) {\n    this.firestore = firestore;\n    this._delegate = _delegate;\n    this._userDataWriter = new UserDataWriter(firestore);\n  }\n  static forPath(path, firestore, converter) {\n    if (path.length % 2 !== 0) {\n      throw new FirestoreError('invalid-argument', 'Invalid document reference. Document ' + 'references must have an even number of segments, but ' + `${path.canonicalString()} has ${path.length}`);\n    }\n    return new DocumentReference(firestore, new DocumentReference$1(firestore._delegate, converter, new _DocumentKey(path)));\n  }\n  static forKey(key, firestore, converter) {\n    return new DocumentReference(firestore, new DocumentReference$1(firestore._delegate, converter, key));\n  }\n  get id() {\n    return this._delegate.id;\n  }\n  get parent() {\n    return new CollectionReference(this.firestore, this._delegate.parent);\n  }\n  get path() {\n    return this._delegate.path;\n  }\n  collection(pathString) {\n    try {\n      return new CollectionReference(this.firestore, collection(this._delegate, pathString));\n    } catch (e) {\n      throw replaceFunctionName(e, 'collection()', 'DocumentReference.collection()');\n    }\n  }\n  isEqual(other) {\n    other = getModularInstance(other);\n    if (!(other instanceof DocumentReference$1)) {\n      return false;\n    }\n    return refEqual(this._delegate, other);\n  }\n  set(value, options) {\n    options = validateSetOptions('DocumentReference.set', options);\n    try {\n      if (options) {\n        return setDoc(this._delegate, value, options);\n      } else {\n        return setDoc(this._delegate, value);\n      }\n    } catch (e) {\n      throw replaceFunctionName(e, 'setDoc()', 'DocumentReference.set()');\n    }\n  }\n  update(fieldOrUpdateData, value, ...moreFieldsAndValues) {\n    try {\n      if (arguments.length === 1) {\n        return updateDoc(this._delegate, fieldOrUpdateData);\n      } else {\n        return updateDoc(this._delegate, fieldOrUpdateData, value, ...moreFieldsAndValues);\n      }\n    } catch (e) {\n      throw replaceFunctionName(e, 'updateDoc()', 'DocumentReference.update()');\n    }\n  }\n  delete() {\n    return deleteDoc(this._delegate);\n  }\n  onSnapshot(...args) {\n    const options = extractSnapshotOptions(args);\n    const observer = wrapObserver(args, result => new DocumentSnapshot(this.firestore, new DocumentSnapshot$1(this.firestore._delegate, this._userDataWriter, result._key, result._document, result.metadata, this._delegate.converter)));\n    return onSnapshot(this._delegate, options, observer);\n  }\n  get(options) {\n    let snap;\n    if ((options === null || options === void 0 ? void 0 : options.source) === 'cache') {\n      snap = getDocFromCache(this._delegate);\n    } else if ((options === null || options === void 0 ? void 0 : options.source) === 'server') {\n      snap = getDocFromServer(this._delegate);\n    } else {\n      snap = getDoc(this._delegate);\n    }\n    return snap.then(result => new DocumentSnapshot(this.firestore, new DocumentSnapshot$1(this.firestore._delegate, this._userDataWriter, result._key, result._document, result.metadata, this._delegate.converter)));\n  }\n  withConverter(converter) {\n    return new DocumentReference(this.firestore, converter ? this._delegate.withConverter(FirestoreDataConverter.getInstance(this.firestore, converter)) : this._delegate.withConverter(null));\n  }\n}\n/**\r\n * Replaces the function name in an error thrown by the firestore-exp API\r\n * with the function names used in the classic API.\r\n */\nfunction replaceFunctionName(e, original, updated) {\n  e.message = e.message.replace(original, updated);\n  return e;\n}\n/**\r\n * Iterates the list of arguments from an `onSnapshot` call and returns the\r\n * first argument that may be an `SnapshotListenOptions` object. Returns an\r\n * empty object if none is found.\r\n */\nfunction extractSnapshotOptions(args) {\n  for (const arg of args) {\n    if (typeof arg === 'object' && !isPartialObserver(arg)) {\n      return arg;\n    }\n  }\n  return {};\n}\n/**\r\n * Creates an observer that can be passed to the firestore-exp SDK. The\r\n * observer converts all observed values into the format expected by the classic\r\n * SDK.\r\n *\r\n * @param args - The list of arguments from an `onSnapshot` call.\r\n * @param wrapper - The function that converts the firestore-exp type into the\r\n * type used by this shim.\r\n */\nfunction wrapObserver(args, wrapper) {\n  var _a, _b;\n  let userObserver;\n  if (isPartialObserver(args[0])) {\n    userObserver = args[0];\n  } else if (isPartialObserver(args[1])) {\n    userObserver = args[1];\n  } else if (typeof args[0] === 'function') {\n    userObserver = {\n      next: args[0],\n      error: args[1],\n      complete: args[2]\n    };\n  } else {\n    userObserver = {\n      next: args[1],\n      error: args[2],\n      complete: args[3]\n    };\n  }\n  return {\n    next: val => {\n      if (userObserver.next) {\n        userObserver.next(wrapper(val));\n      }\n    },\n    error: (_a = userObserver.error) === null || _a === void 0 ? void 0 : _a.bind(userObserver),\n    complete: (_b = userObserver.complete) === null || _b === void 0 ? void 0 : _b.bind(userObserver)\n  };\n}\nclass DocumentSnapshot {\n  constructor(_firestore, _delegate) {\n    this._firestore = _firestore;\n    this._delegate = _delegate;\n  }\n  get ref() {\n    return new DocumentReference(this._firestore, this._delegate.ref);\n  }\n  get id() {\n    return this._delegate.id;\n  }\n  get metadata() {\n    return this._delegate.metadata;\n  }\n  get exists() {\n    return this._delegate.exists();\n  }\n  data(options) {\n    return this._delegate.data(options);\n  }\n  get(fieldPath, options\n  // We are using `any` here to avoid an explicit cast by our users.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ) {\n    return this._delegate.get(fieldPath, options);\n  }\n  isEqual(other) {\n    return snapshotEqual(this._delegate, other._delegate);\n  }\n}\nclass QueryDocumentSnapshot extends DocumentSnapshot {\n  data(options) {\n    const data = this._delegate.data(options);\n    _debugAssert(data !== undefined, 'Document in a QueryDocumentSnapshot should exist');\n    return data;\n  }\n}\nclass Query {\n  constructor(firestore, _delegate) {\n    this.firestore = firestore;\n    this._delegate = _delegate;\n    this._userDataWriter = new UserDataWriter(firestore);\n  }\n  where(fieldPath, opStr, value) {\n    try {\n      // The \"as string\" cast is a little bit of a hack. `where` accepts the\n      // FieldPath Compat type as input, but is not typed as such in order to\n      // not expose this via our public typings file.\n      return new Query(this.firestore, query(this._delegate, where(fieldPath, opStr, value)));\n    } catch (e) {\n      throw replaceFunctionName(e, /(orderBy|where)\\(\\)/, 'Query.$1()');\n    }\n  }\n  orderBy(fieldPath, directionStr) {\n    try {\n      // The \"as string\" cast is a little bit of a hack. `orderBy` accepts the\n      // FieldPath Compat type as input, but is not typed as such in order to\n      // not expose this via our public typings file.\n      return new Query(this.firestore, query(this._delegate, orderBy(fieldPath, directionStr)));\n    } catch (e) {\n      throw replaceFunctionName(e, /(orderBy|where)\\(\\)/, 'Query.$1()');\n    }\n  }\n  limit(n) {\n    try {\n      return new Query(this.firestore, query(this._delegate, limit(n)));\n    } catch (e) {\n      throw replaceFunctionName(e, 'limit()', 'Query.limit()');\n    }\n  }\n  limitToLast(n) {\n    try {\n      return new Query(this.firestore, query(this._delegate, limitToLast(n)));\n    } catch (e) {\n      throw replaceFunctionName(e, 'limitToLast()', 'Query.limitToLast()');\n    }\n  }\n  startAt(...args) {\n    try {\n      return new Query(this.firestore, query(this._delegate, startAt(...args)));\n    } catch (e) {\n      throw replaceFunctionName(e, 'startAt()', 'Query.startAt()');\n    }\n  }\n  startAfter(...args) {\n    try {\n      return new Query(this.firestore, query(this._delegate, startAfter(...args)));\n    } catch (e) {\n      throw replaceFunctionName(e, 'startAfter()', 'Query.startAfter()');\n    }\n  }\n  endBefore(...args) {\n    try {\n      return new Query(this.firestore, query(this._delegate, endBefore(...args)));\n    } catch (e) {\n      throw replaceFunctionName(e, 'endBefore()', 'Query.endBefore()');\n    }\n  }\n  endAt(...args) {\n    try {\n      return new Query(this.firestore, query(this._delegate, endAt(...args)));\n    } catch (e) {\n      throw replaceFunctionName(e, 'endAt()', 'Query.endAt()');\n    }\n  }\n  isEqual(other) {\n    return queryEqual(this._delegate, other._delegate);\n  }\n  get(options) {\n    let query;\n    if ((options === null || options === void 0 ? void 0 : options.source) === 'cache') {\n      query = getDocsFromCache(this._delegate);\n    } else if ((options === null || options === void 0 ? void 0 : options.source) === 'server') {\n      query = getDocsFromServer(this._delegate);\n    } else {\n      query = getDocs(this._delegate);\n    }\n    return query.then(result => new QuerySnapshot(this.firestore, new QuerySnapshot$1(this.firestore._delegate, this._userDataWriter, this._delegate, result._snapshot)));\n  }\n  onSnapshot(...args) {\n    const options = extractSnapshotOptions(args);\n    const observer = wrapObserver(args, snap => new QuerySnapshot(this.firestore, new QuerySnapshot$1(this.firestore._delegate, this._userDataWriter, this._delegate, snap._snapshot)));\n    return onSnapshot(this._delegate, options, observer);\n  }\n  withConverter(converter) {\n    return new Query(this.firestore, converter ? this._delegate.withConverter(FirestoreDataConverter.getInstance(this.firestore, converter)) : this._delegate.withConverter(null));\n  }\n}\nclass DocumentChange {\n  constructor(_firestore, _delegate) {\n    this._firestore = _firestore;\n    this._delegate = _delegate;\n  }\n  get type() {\n    return this._delegate.type;\n  }\n  get doc() {\n    return new QueryDocumentSnapshot(this._firestore, this._delegate.doc);\n  }\n  get oldIndex() {\n    return this._delegate.oldIndex;\n  }\n  get newIndex() {\n    return this._delegate.newIndex;\n  }\n}\nclass QuerySnapshot {\n  constructor(_firestore, _delegate) {\n    this._firestore = _firestore;\n    this._delegate = _delegate;\n  }\n  get query() {\n    return new Query(this._firestore, this._delegate.query);\n  }\n  get metadata() {\n    return this._delegate.metadata;\n  }\n  get size() {\n    return this._delegate.size;\n  }\n  get empty() {\n    return this._delegate.empty;\n  }\n  get docs() {\n    return this._delegate.docs.map(doc => new QueryDocumentSnapshot(this._firestore, doc));\n  }\n  docChanges(options) {\n    return this._delegate.docChanges(options).map(docChange => new DocumentChange(this._firestore, docChange));\n  }\n  forEach(callback, thisArg) {\n    this._delegate.forEach(snapshot => {\n      callback.call(thisArg, new QueryDocumentSnapshot(this._firestore, snapshot));\n    });\n  }\n  isEqual(other) {\n    return snapshotEqual(this._delegate, other._delegate);\n  }\n}\nclass CollectionReference extends Query {\n  constructor(firestore, _delegate) {\n    super(firestore, _delegate);\n    this.firestore = firestore;\n    this._delegate = _delegate;\n  }\n  get id() {\n    return this._delegate.id;\n  }\n  get path() {\n    return this._delegate.path;\n  }\n  get parent() {\n    const docRef = this._delegate.parent;\n    return docRef ? new DocumentReference(this.firestore, docRef) : null;\n  }\n  doc(documentPath) {\n    try {\n      if (documentPath === undefined) {\n        // Call `doc` without `documentPath` if `documentPath` is `undefined`\n        // as `doc` validates the number of arguments to prevent users from\n        // accidentally passing `undefined`.\n        return new DocumentReference(this.firestore, doc(this._delegate));\n      } else {\n        return new DocumentReference(this.firestore, doc(this._delegate, documentPath));\n      }\n    } catch (e) {\n      throw replaceFunctionName(e, 'doc()', 'CollectionReference.doc()');\n    }\n  }\n  add(data) {\n    return addDoc(this._delegate, data).then(docRef => new DocumentReference(this.firestore, docRef));\n  }\n  isEqual(other) {\n    return refEqual(this._delegate, other._delegate);\n  }\n  withConverter(converter) {\n    return new CollectionReference(this.firestore, converter ? this._delegate.withConverter(FirestoreDataConverter.getInstance(this.firestore, converter)) : this._delegate.withConverter(null));\n  }\n}\nfunction castReference(documentRef) {\n  return _cast(documentRef, DocumentReference$1);\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// The objects that are a part of this API are exposed to third-parties as\n// compiled javascript so we want to flag our private members with a leading\n// underscore to discourage their use.\n/**\r\n * A `FieldPath` refers to a field in a document. The path may consist of a\r\n * single field name (referring to a top-level field in the document), or a list\r\n * of field names (referring to a nested field in the document).\r\n */\nclass FieldPath {\n  /**\r\n   * Creates a FieldPath from the provided field names. If more than one field\r\n   * name is provided, the path will point to a nested field in a document.\r\n   *\r\n   * @param fieldNames - A list of field names.\r\n   */\n  constructor(...fieldNames) {\n    this._delegate = new FieldPath$1(...fieldNames);\n  }\n  static documentId() {\n    /**\r\n     * Internal Note: The backend doesn't technically support querying by\r\n     * document ID. Instead it queries by the entire document name (full path\r\n     * included), but in the cases we currently support documentId(), the net\r\n     * effect is the same.\r\n     */\n    return new FieldPath(_FieldPath.keyField().canonicalString());\n  }\n  isEqual(other) {\n    other = getModularInstance(other);\n    if (!(other instanceof FieldPath$1)) {\n      return false;\n    }\n    return this._delegate._internalPath.isEqual(other._internalPath);\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass FieldValue {\n  constructor(_delegate) {\n    this._delegate = _delegate;\n  }\n  static serverTimestamp() {\n    const delegate = serverTimestamp();\n    delegate._methodName = 'FieldValue.serverTimestamp';\n    return new FieldValue(delegate);\n  }\n  static delete() {\n    const delegate = deleteField();\n    delegate._methodName = 'FieldValue.delete';\n    return new FieldValue(delegate);\n  }\n  static arrayUnion(...elements) {\n    const delegate = arrayUnion(...elements);\n    delegate._methodName = 'FieldValue.arrayUnion';\n    return new FieldValue(delegate);\n  }\n  static arrayRemove(...elements) {\n    const delegate = arrayRemove(...elements);\n    delegate._methodName = 'FieldValue.arrayRemove';\n    return new FieldValue(delegate);\n  }\n  static increment(n) {\n    const delegate = increment(n);\n    delegate._methodName = 'FieldValue.increment';\n    return new FieldValue(delegate);\n  }\n  isEqual(other) {\n    return this._delegate.isEqual(other._delegate);\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst firestoreNamespace = {\n  Firestore,\n  GeoPoint,\n  Timestamp,\n  Blob,\n  Transaction,\n  WriteBatch,\n  DocumentReference,\n  DocumentSnapshot,\n  Query,\n  QueryDocumentSnapshot,\n  QuerySnapshot,\n  CollectionReference,\n  FieldPath,\n  FieldValue,\n  setLogLevel,\n  CACHE_SIZE_UNLIMITED\n};\n/**\r\n * Configures Firestore as part of the Firebase SDK by calling registerComponent.\r\n *\r\n * @param firebase - The FirebaseNamespace to register Firestore with\r\n * @param firestoreFactory - A factory function that returns a new Firestore\r\n *    instance.\r\n */\nfunction configureForFirebase(firebase, firestoreFactory) {\n  firebase.INTERNAL.registerComponent(new Component('firestore-compat', container => {\n    const app = container.getProvider('app-compat').getImmediate();\n    const firestoreExp = container.getProvider('firestore').getImmediate();\n    return firestoreFactory(app, firestoreExp);\n  }, 'PUBLIC').setServiceProps(Object.assign({}, firestoreNamespace)));\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Registers the main Firestore build with the components framework.\r\n * Persistence can be enabled via `firebase.firestore().enablePersistence()`.\r\n */\nfunction registerFirestore(instance) {\n  configureForFirebase(instance, (app, firestoreExp) => new Firestore(app, firestoreExp, new IndexedDbPersistenceProvider()));\n  instance.registerVersion(name, version);\n}\nregisterFirestore(firebase);\nexport { registerFirestore };","map":{"version":3,"names":["validateSetOptions","methodName","options","undefined","merge","mergeFields","FirestoreError","assertUint8ArrayAvailable","Uint8Array","assertBase64Available","_isBase64Available","Blob","constructor","_delegate","fromBase64String","base64","Bytes","fromUint8Array","array","toBase64","toUint8Array","isEqual","other","toString","isPartialObserver","obj","implementsAnyMethods","methods","object","method","IndexedDbPersistenceProvider","enableIndexedDbPersistence","firestore","forceOwnership","enableMultiTabIndexedDbPersistence","clearIndexedDbPersistence","Firestore","databaseIdOrApp","_persistenceProvider","INTERNAL","delete","terminate","_DatabaseId","_appCompat","_databaseId","settings","settingsLiteral","currentSettings","_getSettings","host","_logWarn","Object","assign","_setSettings","useEmulator","port","connectFirestoreEmulator","enableNetwork","disableNetwork","enablePersistence","synchronizeTabs","experimentalForceOwningTab","_validateIsNotUsedTogether","clearPersistence","_removeServiceInstance","_delete","waitForPendingWrites","onSnapshotsInSync","arg","app","collection","pathString","CollectionReference","e","replaceFunctionName","doc","DocumentReference","collectionGroup","collectionId","Query","runTransaction","updateFunction","transaction","Transaction","batch","ensureFirestoreConfigured","WriteBatch","WriteBatch$1","mutations","executeWrite","loadBundle","bundleData","namedQuery","name","then","expQuery","UserDataWriter","AbstractUserDataWriter","convertBytes","bytes","convertReference","key","convertDocumentKey","forKey","setLogLevel","level","setLogLevel$1","_firestore","_userDataWriter","get","documentRef","ref","castReference","result","DocumentSnapshot","DocumentSnapshot$1","_key","_document","metadata","converter","set","data","update","dataOrField","value","moreFieldsAndValues","arguments","length","commit","FirestoreDataConverter","fromFirestore","snapshot","expSnapshot","QueryDocumentSnapshot$1","QueryDocumentSnapshot","toFirestore","modelObject","getInstance","converterMapByFirestore","INSTANCES","untypedConverterByConverter","WeakMap","instance","forPath","path","canonicalString","DocumentReference$1","_DocumentKey","id","parent","getModularInstance","refEqual","setDoc","fieldOrUpdateData","updateDoc","deleteDoc","onSnapshot","args","extractSnapshotOptions","observer","wrapObserver","snap","source","getDocFromCache","getDocFromServer","getDoc","withConverter","original","updated","message","replace","wrapper","userObserver","next","error","complete","val","_a","bind","_b","exists","fieldPath","snapshotEqual","_debugAssert","where","opStr","query","orderBy","directionStr","limit","n","limitToLast","startAt","startAfter","endBefore","endAt","queryEqual","getDocsFromCache","getDocsFromServer","getDocs","QuerySnapshot","QuerySnapshot$1","_snapshot","DocumentChange","type","oldIndex","newIndex","size","empty","docs","map","docChanges","docChange","forEach","callback","thisArg","call","docRef","documentPath","add","addDoc","_cast","FieldPath","fieldNames","FieldPath$1","documentId","_FieldPath","keyField","_internalPath","FieldValue","serverTimestamp","delegate","_methodName","deleteField","arrayUnion","elements","arrayRemove","increment","firestoreNamespace","GeoPoint","Timestamp","CACHE_SIZE_UNLIMITED","configureForFirebase","firebase","firestoreFactory","registerComponent","Component","container","getProvider","getImmediate","firestoreExp","setServiceProps","registerFirestore","registerVersion","version"],"sources":["../src/util/input_validation.ts","../src/api/blob.ts","../src/api/observer.ts","../src/api/database.ts","../src/api/field_path.ts","../src/api/field_value.ts","../src/config.ts","../src/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirestoreError } from '@firebase/firestore';\nimport { SetOptions } from '@firebase/firestore-types';\n\nexport function validateSetOptions(\n  methodName: string,\n  options: SetOptions | undefined\n): SetOptions {\n  if (options === undefined) {\n    return {\n      merge: false\n    };\n  }\n\n  if (options.mergeFields !== undefined && options.merge !== undefined) {\n    throw new FirestoreError(\n      'invalid-argument',\n      `Invalid options passed to function ${methodName}(): You cannot ` +\n        'specify both \"merge\" and \"mergeFields\".'\n    );\n  }\n\n  return options;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Bytes, FirestoreError, _isBase64Available } from '@firebase/firestore';\nimport { Compat } from '@firebase/util';\n\n/** Helper function to assert Uint8Array is available at runtime. */\nfunction assertUint8ArrayAvailable(): void {\n  if (typeof Uint8Array === 'undefined') {\n    throw new FirestoreError(\n      'unimplemented',\n      'Uint8Arrays are not available in this environment.'\n    );\n  }\n}\n\n/** Helper function to assert Base64 functions are available at runtime. */\nfunction assertBase64Available(): void {\n  if (!_isBase64Available()) {\n    throw new FirestoreError(\n      'unimplemented',\n      'Blobs are unavailable in Firestore in this environment.'\n    );\n  }\n}\n\n/** Immutable class holding a blob (binary data) */\nexport class Blob implements Compat<Bytes> {\n  constructor(readonly _delegate: Bytes) {}\n  static fromBase64String(base64: string): Blob {\n    assertBase64Available();\n    return new Blob(Bytes.fromBase64String(base64));\n  }\n\n  static fromUint8Array(array: Uint8Array): Blob {\n    assertUint8ArrayAvailable();\n    return new Blob(Bytes.fromUint8Array(array));\n  }\n\n  toBase64(): string {\n    assertBase64Available();\n    return this._delegate.toBase64();\n  }\n\n  toUint8Array(): Uint8Array {\n    assertUint8ArrayAvailable();\n    return this._delegate.toUint8Array();\n  }\n\n  isEqual(other: Blob): boolean {\n    return this._delegate.isEqual(other._delegate);\n  }\n\n  toString(): string {\n    return 'Blob(base64: ' + this.toBase64() + ')';\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirestoreError } from '@firebase/firestore';\n\n/**\n * Observer/Subscribe interfaces.\n */\nexport type NextFn<T> = (value: T) => void;\nexport type ErrorFn = (error: FirestoreError) => void;\nexport type CompleteFn = () => void;\n\n// Allow for any of the Observer methods to be undefined.\nexport interface PartialObserver<T> {\n  next?: NextFn<T>;\n  error?: ErrorFn;\n  complete?: CompleteFn;\n}\n\nexport function isPartialObserver<T>(obj: unknown): obj is PartialObserver<T> {\n  return implementsAnyMethods(obj, ['next', 'error', 'complete']);\n}\n\n/**\n * Returns true if obj is an object and contains at least one of the specified\n * methods.\n */\nfunction implementsAnyMethods(obj: unknown, methods: string[]): boolean {\n  if (typeof obj !== 'object' || obj === null) {\n    return false;\n  }\n\n  const object = obj as Record<string, unknown>;\n  for (const method of methods) {\n    if (method in object && typeof object[method] === 'function') {\n      return true;\n    }\n  }\n  return false;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { _FirebaseApp, FirebaseService } from '@firebase/app-types/private';\nimport {\n  LoadBundleTask,\n  Bytes,\n  clearIndexedDbPersistence,\n  disableNetwork,\n  enableIndexedDbPersistence,\n  enableMultiTabIndexedDbPersistence,\n  enableNetwork,\n  ensureFirestoreConfigured,\n  Firestore as ExpFirestore,\n  connectFirestoreEmulator,\n  waitForPendingWrites,\n  FieldPath as ExpFieldPath,\n  limit,\n  limitToLast,\n  where,\n  orderBy,\n  startAfter,\n  startAt,\n  query,\n  endBefore,\n  endAt,\n  doc,\n  collection,\n  collectionGroup,\n  queryEqual,\n  Query as ExpQuery,\n  CollectionReference as ExpCollectionReference,\n  DocumentReference as ExpDocumentReference,\n  refEqual,\n  addDoc,\n  deleteDoc,\n  executeWrite,\n  getDoc,\n  getDocFromCache,\n  getDocFromServer,\n  getDocs,\n  getDocsFromCache,\n  getDocsFromServer,\n  onSnapshot,\n  onSnapshotsInSync,\n  setDoc,\n  updateDoc,\n  Unsubscribe,\n  DocumentChange as ExpDocumentChange,\n  DocumentSnapshot as ExpDocumentSnapshot,\n  QueryDocumentSnapshot as ExpQueryDocumentSnapshot,\n  QuerySnapshot as ExpQuerySnapshot,\n  snapshotEqual,\n  SnapshotMetadata,\n  runTransaction,\n  Transaction as ExpTransaction,\n  WriteBatch as ExpWriteBatch,\n  AbstractUserDataWriter,\n  FirestoreError,\n  FirestoreDataConverter as ModularFirestoreDataConverter,\n  setLogLevel as setClientLogLevel,\n  _DatabaseId,\n  _validateIsNotUsedTogether,\n  _cast,\n  _DocumentKey,\n  _debugAssert,\n  _FieldPath,\n  _ResourcePath,\n  _ByteString,\n  _logWarn,\n  namedQuery,\n  loadBundle,\n  PartialWithFieldValue,\n  WithFieldValue\n} from '@firebase/firestore';\nimport {\n  CollectionReference as PublicCollectionReference,\n  DocumentChange as PublicDocumentChange,\n  DocumentChangeType as PublicDocumentChangeType,\n  DocumentData,\n  DocumentData as PublicDocumentData,\n  DocumentReference as PublicDocumentReference,\n  DocumentSnapshot as PublicDocumentSnapshot,\n  FieldPath as PublicFieldPath,\n  FirebaseFirestore as PublicFirestore,\n  FirestoreDataConverter as PublicFirestoreDataConverter,\n  GetOptions as PublicGetOptions,\n  LogLevel as PublicLogLevel,\n  OrderByDirection as PublicOrderByDirection,\n  PersistenceSettings as PublicPersistenceSettings,\n  Query as PublicQuery,\n  QueryDocumentSnapshot as PublicQueryDocumentSnapshot,\n  QuerySnapshot as PublicQuerySnapshot,\n  SetOptions as PublicSetOptions,\n  Settings as PublicSettings,\n  SnapshotListenOptions as PublicSnapshotListenOptions,\n  SnapshotOptions as PublicSnapshotOptions,\n  Transaction as PublicTransaction,\n  UpdateData as PublicUpdateData,\n  WhereFilterOp as PublicWhereFilterOp,\n  WriteBatch as PublicWriteBatch\n} from '@firebase/firestore-types';\nimport {\n  Compat,\n  EmulatorMockTokenOptions,\n  getModularInstance\n} from '@firebase/util';\n\nimport { validateSetOptions } from '../util/input_validation';\n\nimport { Blob } from './blob';\nimport {\n  CompleteFn,\n  ErrorFn,\n  isPartialObserver,\n  NextFn,\n  PartialObserver\n} from './observer';\n\n/**\n * A persistence provider for either memory-only or IndexedDB persistence.\n * Mainly used to allow optional inclusion of IndexedDB code.\n */\nexport interface PersistenceProvider {\n  enableIndexedDbPersistence(\n    firestore: Firestore,\n    forceOwnership: boolean\n  ): Promise<void>;\n  enableMultiTabIndexedDbPersistence(firestore: Firestore): Promise<void>;\n  clearIndexedDbPersistence(firestore: Firestore): Promise<void>;\n}\n\n/**\n * The persistence provider included with the full Firestore SDK.\n */\nexport class IndexedDbPersistenceProvider implements PersistenceProvider {\n  enableIndexedDbPersistence(\n    firestore: Firestore,\n    forceOwnership: boolean\n  ): Promise<void> {\n    return enableIndexedDbPersistence(firestore._delegate, { forceOwnership });\n  }\n  enableMultiTabIndexedDbPersistence(firestore: Firestore): Promise<void> {\n    return enableMultiTabIndexedDbPersistence(firestore._delegate);\n  }\n  clearIndexedDbPersistence(firestore: Firestore): Promise<void> {\n    return clearIndexedDbPersistence(firestore._delegate);\n  }\n}\n\n/**\n * Compat class for Firestore. Exposes Firestore Legacy API, but delegates\n * to the functional API of firestore-exp.\n */\nexport class Firestore\n  implements PublicFirestore, FirebaseService, Compat<ExpFirestore>\n{\n  _appCompat?: FirebaseApp;\n  constructor(\n    databaseIdOrApp: _DatabaseId | FirebaseApp,\n    readonly _delegate: ExpFirestore,\n    private _persistenceProvider: PersistenceProvider\n  ) {\n    if (!(databaseIdOrApp instanceof _DatabaseId)) {\n      this._appCompat = databaseIdOrApp as FirebaseApp;\n    }\n  }\n\n  get _databaseId(): _DatabaseId {\n    return this._delegate._databaseId;\n  }\n\n  settings(settingsLiteral: PublicSettings): void {\n    const currentSettings = this._delegate._getSettings();\n    if (\n      !settingsLiteral.merge &&\n      currentSettings.host !== settingsLiteral.host\n    ) {\n      _logWarn(\n        'You are overriding the original host. If you did not intend ' +\n          'to override your settings, use {merge: true}.'\n      );\n    }\n\n    if (settingsLiteral.merge) {\n      settingsLiteral = {\n        ...currentSettings,\n        ...settingsLiteral\n      };\n      // Remove the property from the settings once the merge is completed\n      delete settingsLiteral.merge;\n    }\n\n    this._delegate._setSettings(settingsLiteral);\n  }\n\n  useEmulator(\n    host: string,\n    port: number,\n    options: {\n      mockUserToken?: EmulatorMockTokenOptions | string;\n    } = {}\n  ): void {\n    connectFirestoreEmulator(this._delegate, host, port, options);\n  }\n\n  enableNetwork(): Promise<void> {\n    return enableNetwork(this._delegate);\n  }\n\n  disableNetwork(): Promise<void> {\n    return disableNetwork(this._delegate);\n  }\n\n  enablePersistence(settings?: PublicPersistenceSettings): Promise<void> {\n    let synchronizeTabs = false;\n    let experimentalForceOwningTab = false;\n\n    if (settings) {\n      synchronizeTabs = !!settings.synchronizeTabs;\n      experimentalForceOwningTab = !!settings.experimentalForceOwningTab;\n\n      _validateIsNotUsedTogether(\n        'synchronizeTabs',\n        synchronizeTabs,\n        'experimentalForceOwningTab',\n        experimentalForceOwningTab\n      );\n    }\n\n    return synchronizeTabs\n      ? this._persistenceProvider.enableMultiTabIndexedDbPersistence(this)\n      : this._persistenceProvider.enableIndexedDbPersistence(\n          this,\n          experimentalForceOwningTab\n        );\n  }\n\n  clearPersistence(): Promise<void> {\n    return this._persistenceProvider.clearIndexedDbPersistence(this);\n  }\n\n  terminate(): Promise<void> {\n    if (this._appCompat) {\n      (this._appCompat as _FirebaseApp)._removeServiceInstance(\n        'firestore-compat'\n      );\n      (this._appCompat as _FirebaseApp)._removeServiceInstance('firestore');\n    }\n    return this._delegate._delete();\n  }\n\n  waitForPendingWrites(): Promise<void> {\n    return waitForPendingWrites(this._delegate);\n  }\n\n  onSnapshotsInSync(observer: PartialObserver<void>): Unsubscribe;\n  onSnapshotsInSync(onSync: () => void): Unsubscribe;\n  onSnapshotsInSync(arg: unknown): Unsubscribe {\n    return onSnapshotsInSync(this._delegate, arg as PartialObserver<void>);\n  }\n\n  get app(): FirebaseApp {\n    if (!this._appCompat) {\n      throw new FirestoreError(\n        'failed-precondition',\n        \"Firestore was not initialized using the Firebase SDK. 'app' is \" +\n          'not available'\n      );\n    }\n    return this._appCompat as FirebaseApp;\n  }\n\n  INTERNAL = {\n    delete: () => this.terminate()\n  };\n\n  collection(pathString: string): PublicCollectionReference {\n    try {\n      return new CollectionReference(\n        this,\n        collection(this._delegate, pathString)\n      );\n    } catch (e) {\n      throw replaceFunctionName(\n        e as Error,\n        'collection()',\n        'Firestore.collection()'\n      );\n    }\n  }\n\n  doc(pathString: string): PublicDocumentReference {\n    try {\n      return new DocumentReference(this, doc(this._delegate, pathString));\n    } catch (e) {\n      throw replaceFunctionName(e as Error, 'doc()', 'Firestore.doc()');\n    }\n  }\n\n  collectionGroup(collectionId: string): PublicQuery {\n    try {\n      return new Query(this, collectionGroup(this._delegate, collectionId));\n    } catch (e) {\n      throw replaceFunctionName(\n        e as Error,\n        'collectionGroup()',\n        'Firestore.collectionGroup()'\n      );\n    }\n  }\n\n  runTransaction<T>(\n    updateFunction: (transaction: PublicTransaction) => Promise<T>\n  ): Promise<T> {\n    return runTransaction(this._delegate, transaction =>\n      updateFunction(new Transaction(this, transaction))\n    );\n  }\n\n  batch(): PublicWriteBatch {\n    ensureFirestoreConfigured(this._delegate);\n    return new WriteBatch(\n      new ExpWriteBatch(this._delegate, mutations =>\n        executeWrite(this._delegate, mutations)\n      )\n    );\n  }\n\n  loadBundle(\n    bundleData: ArrayBuffer | ReadableStream<Uint8Array> | string\n  ): LoadBundleTask {\n    return loadBundle(this._delegate, bundleData);\n  }\n\n  namedQuery(name: string): Promise<PublicQuery<DocumentData> | null> {\n    return namedQuery(this._delegate, name).then(expQuery => {\n      if (!expQuery) {\n        return null;\n      }\n      return new Query(\n        this,\n        // We can pass `expQuery` here directly since named queries don't have a UserDataConverter.\n        // Otherwise, we would have to create a new ExpQuery and pass the old UserDataConverter.\n        expQuery\n      );\n    });\n  }\n}\n\nexport class UserDataWriter extends AbstractUserDataWriter {\n  constructor(protected firestore: Firestore) {\n    super();\n  }\n\n  protected convertBytes(bytes: _ByteString): Blob {\n    return new Blob(new Bytes(bytes));\n  }\n\n  protected convertReference(name: string): DocumentReference {\n    const key = this.convertDocumentKey(name, this.firestore._databaseId);\n    return DocumentReference.forKey(key, this.firestore, /* converter= */ null);\n  }\n}\n\nexport function setLogLevel(level: PublicLogLevel): void {\n  setClientLogLevel(level);\n}\n\n/**\n * A reference to a transaction.\n */\nexport class Transaction implements PublicTransaction, Compat<ExpTransaction> {\n  private _userDataWriter: UserDataWriter;\n\n  constructor(\n    private readonly _firestore: Firestore,\n    readonly _delegate: ExpTransaction\n  ) {\n    this._userDataWriter = new UserDataWriter(_firestore);\n  }\n\n  get<T>(\n    documentRef: PublicDocumentReference<T>\n  ): Promise<PublicDocumentSnapshot<T>> {\n    const ref = castReference(documentRef);\n    return this._delegate\n      .get(ref)\n      .then(\n        result =>\n          new DocumentSnapshot(\n            this._firestore,\n            new ExpDocumentSnapshot<T>(\n              this._firestore._delegate,\n              this._userDataWriter,\n              result._key,\n              result._document,\n              result.metadata,\n              ref.converter\n            )\n          )\n      );\n  }\n\n  set<T>(\n    documentRef: DocumentReference<T>,\n    data: Partial<T>,\n    options: PublicSetOptions\n  ): Transaction;\n  set<T>(documentRef: DocumentReference<T>, data: T): Transaction;\n  set<T>(\n    documentRef: PublicDocumentReference<T>,\n    data: T | Partial<T>,\n    options?: PublicSetOptions\n  ): Transaction {\n    const ref = castReference(documentRef);\n    if (options) {\n      validateSetOptions('Transaction.set', options);\n      this._delegate.set(ref, data as PartialWithFieldValue<T>, options);\n    } else {\n      this._delegate.set(ref, data as WithFieldValue<T>);\n    }\n    return this;\n  }\n\n  update(\n    documentRef: PublicDocumentReference<unknown>,\n    data: PublicUpdateData\n  ): Transaction;\n  update(\n    documentRef: PublicDocumentReference<unknown>,\n    field: string | PublicFieldPath,\n    value: unknown,\n    ...moreFieldsAndValues: unknown[]\n  ): Transaction;\n  update(\n    documentRef: PublicDocumentReference<unknown>,\n    dataOrField: unknown,\n    value?: unknown,\n    ...moreFieldsAndValues: unknown[]\n  ): Transaction {\n    const ref = castReference(documentRef);\n    if (arguments.length === 2) {\n      this._delegate.update(ref, dataOrField as PublicUpdateData);\n    } else {\n      this._delegate.update(\n        ref,\n        dataOrField as string | ExpFieldPath,\n        value,\n        ...moreFieldsAndValues\n      );\n    }\n\n    return this;\n  }\n\n  delete(documentRef: PublicDocumentReference<unknown>): Transaction {\n    const ref = castReference(documentRef);\n    this._delegate.delete(ref);\n    return this;\n  }\n}\n\nexport class WriteBatch implements PublicWriteBatch, Compat<ExpWriteBatch> {\n  constructor(readonly _delegate: ExpWriteBatch) {}\n  set<T>(\n    documentRef: DocumentReference<T>,\n    data: Partial<T>,\n    options: PublicSetOptions\n  ): WriteBatch;\n  set<T>(documentRef: DocumentReference<T>, data: T): WriteBatch;\n  set<T>(\n    documentRef: PublicDocumentReference<T>,\n    data: T | Partial<T>,\n    options?: PublicSetOptions\n  ): WriteBatch {\n    const ref = castReference(documentRef);\n    if (options) {\n      validateSetOptions('WriteBatch.set', options);\n      this._delegate.set(ref, data as PartialWithFieldValue<T>, options);\n    } else {\n      this._delegate.set(ref, data as WithFieldValue<T>);\n    }\n    return this;\n  }\n\n  update(\n    documentRef: PublicDocumentReference<unknown>,\n    data: PublicUpdateData\n  ): WriteBatch;\n  update(\n    documentRef: PublicDocumentReference<unknown>,\n    field: string | PublicFieldPath,\n    value: unknown,\n    ...moreFieldsAndValues: unknown[]\n  ): WriteBatch;\n  update(\n    documentRef: PublicDocumentReference<unknown>,\n    dataOrField: string | PublicFieldPath | PublicUpdateData,\n    value?: unknown,\n    ...moreFieldsAndValues: unknown[]\n  ): WriteBatch {\n    const ref = castReference(documentRef);\n    if (arguments.length === 2) {\n      this._delegate.update(ref, dataOrField as PublicUpdateData);\n    } else {\n      this._delegate.update(\n        ref,\n        dataOrField as string | ExpFieldPath,\n        value,\n        ...moreFieldsAndValues\n      );\n    }\n    return this;\n  }\n\n  delete(documentRef: PublicDocumentReference<unknown>): WriteBatch {\n    const ref = castReference(documentRef);\n    this._delegate.delete(ref);\n    return this;\n  }\n\n  commit(): Promise<void> {\n    return this._delegate.commit();\n  }\n}\n\n/**\n * Wraps a `PublicFirestoreDataConverter` translating the types from the\n * experimental SDK into corresponding types from the Classic SDK before passing\n * them to the wrapped converter.\n */\nclass FirestoreDataConverter<U>\n  implements\n    ModularFirestoreDataConverter<U>,\n    Compat<PublicFirestoreDataConverter<U>>\n{\n  private static readonly INSTANCES = new WeakMap();\n\n  private constructor(\n    private readonly _firestore: Firestore,\n    private readonly _userDataWriter: UserDataWriter,\n    readonly _delegate: PublicFirestoreDataConverter<U>\n  ) {}\n\n  fromFirestore(\n    snapshot: ExpQueryDocumentSnapshot,\n    options?: PublicSnapshotOptions\n  ): U {\n    const expSnapshot = new ExpQueryDocumentSnapshot(\n      this._firestore._delegate,\n      this._userDataWriter,\n      snapshot._key,\n      snapshot._document,\n      snapshot.metadata,\n      /* converter= */ null\n    );\n    return this._delegate.fromFirestore(\n      new QueryDocumentSnapshot(this._firestore, expSnapshot),\n      options ?? {}\n    );\n  }\n\n  toFirestore(modelObject: WithFieldValue<U>): PublicDocumentData;\n  toFirestore(\n    modelObject: PartialWithFieldValue<U>,\n    options: PublicSetOptions\n  ): PublicDocumentData;\n  toFirestore(\n    modelObject: WithFieldValue<U> | PartialWithFieldValue<U>,\n    options?: PublicSetOptions\n  ): PublicDocumentData {\n    if (!options) {\n      return this._delegate.toFirestore(modelObject as U);\n    } else {\n      return this._delegate.toFirestore(modelObject as Partial<U>, options);\n    }\n  }\n\n  // Use the same instance of `FirestoreDataConverter` for the given instances\n  // of `Firestore` and `PublicFirestoreDataConverter` so that isEqual() will\n  // compare equal for two objects created with the same converter instance.\n  static getInstance<U>(\n    firestore: Firestore,\n    converter: PublicFirestoreDataConverter<U>\n  ): FirestoreDataConverter<U> {\n    const converterMapByFirestore = FirestoreDataConverter.INSTANCES;\n    let untypedConverterByConverter = converterMapByFirestore.get(firestore);\n    if (!untypedConverterByConverter) {\n      untypedConverterByConverter = new WeakMap();\n      converterMapByFirestore.set(firestore, untypedConverterByConverter);\n    }\n\n    let instance = untypedConverterByConverter.get(converter);\n    if (!instance) {\n      instance = new FirestoreDataConverter(\n        firestore,\n        new UserDataWriter(firestore),\n        converter\n      );\n      untypedConverterByConverter.set(converter, instance);\n    }\n\n    return instance;\n  }\n}\n\n/**\n * A reference to a particular document in a collection in the database.\n */\nexport class DocumentReference<T = PublicDocumentData>\n  implements PublicDocumentReference<T>, Compat<ExpDocumentReference<T>>\n{\n  private _userDataWriter: UserDataWriter;\n\n  constructor(\n    readonly firestore: Firestore,\n    readonly _delegate: ExpDocumentReference<T>\n  ) {\n    this._userDataWriter = new UserDataWriter(firestore);\n  }\n\n  static forPath<U>(\n    path: _ResourcePath,\n    firestore: Firestore,\n    converter: ModularFirestoreDataConverter<U> | null\n  ): DocumentReference<U> {\n    if (path.length % 2 !== 0) {\n      throw new FirestoreError(\n        'invalid-argument',\n        'Invalid document reference. Document ' +\n          'references must have an even number of segments, but ' +\n          `${path.canonicalString()} has ${path.length}`\n      );\n    }\n    return new DocumentReference(\n      firestore,\n      new ExpDocumentReference(\n        firestore._delegate,\n        converter,\n        new _DocumentKey(path)\n      )\n    );\n  }\n\n  static forKey<U>(\n    key: _DocumentKey,\n    firestore: Firestore,\n    converter: ModularFirestoreDataConverter<U> | null\n  ): DocumentReference<U> {\n    return new DocumentReference(\n      firestore,\n      new ExpDocumentReference(firestore._delegate, converter, key)\n    );\n  }\n\n  get id(): string {\n    return this._delegate.id;\n  }\n\n  get parent(): PublicCollectionReference<T> {\n    return new CollectionReference(this.firestore, this._delegate.parent);\n  }\n\n  get path(): string {\n    return this._delegate.path;\n  }\n\n  collection(\n    pathString: string\n  ): PublicCollectionReference<PublicDocumentData> {\n    try {\n      return new CollectionReference(\n        this.firestore,\n        collection(this._delegate, pathString)\n      );\n    } catch (e) {\n      throw replaceFunctionName(\n        e as Error,\n        'collection()',\n        'DocumentReference.collection()'\n      );\n    }\n  }\n\n  isEqual(other: PublicDocumentReference<T>): boolean {\n    other = getModularInstance<PublicDocumentReference<T>>(other);\n\n    if (!(other instanceof ExpDocumentReference)) {\n      return false;\n    }\n    return refEqual(this._delegate, other);\n  }\n\n  set(value: Partial<T>, options: PublicSetOptions): Promise<void>;\n  set(value: T): Promise<void>;\n  set(value: T | Partial<T>, options?: PublicSetOptions): Promise<void> {\n    options = validateSetOptions('DocumentReference.set', options);\n    try {\n      if (options) {\n        return setDoc(\n          this._delegate,\n          value as PartialWithFieldValue<T>,\n          options\n        );\n      } else {\n        return setDoc(this._delegate, value as WithFieldValue<T>);\n      }\n    } catch (e) {\n      throw replaceFunctionName(\n        e as Error,\n        'setDoc()',\n        'DocumentReference.set()'\n      );\n    }\n  }\n\n  update(value: PublicUpdateData): Promise<void>;\n  update(\n    field: string | PublicFieldPath,\n    value: unknown,\n    ...moreFieldsAndValues: unknown[]\n  ): Promise<void>;\n  update(\n    fieldOrUpdateData: string | PublicFieldPath | PublicUpdateData,\n    value?: unknown,\n    ...moreFieldsAndValues: unknown[]\n  ): Promise<void> {\n    try {\n      if (arguments.length === 1) {\n        return updateDoc(this._delegate, fieldOrUpdateData as PublicUpdateData);\n      } else {\n        return updateDoc(\n          this._delegate,\n          fieldOrUpdateData as string | ExpFieldPath,\n          value,\n          ...moreFieldsAndValues\n        );\n      }\n    } catch (e) {\n      throw replaceFunctionName(\n        e as Error,\n        'updateDoc()',\n        'DocumentReference.update()'\n      );\n    }\n  }\n\n  delete(): Promise<void> {\n    return deleteDoc(this._delegate);\n  }\n\n  onSnapshot(observer: PartialObserver<PublicDocumentSnapshot<T>>): Unsubscribe;\n  onSnapshot(\n    options: PublicSnapshotListenOptions,\n    observer: PartialObserver<PublicDocumentSnapshot<T>>\n  ): Unsubscribe;\n  onSnapshot(\n    onNext: NextFn<PublicDocumentSnapshot<T>>,\n    onError?: ErrorFn,\n    onCompletion?: CompleteFn\n  ): Unsubscribe;\n  onSnapshot(\n    options: PublicSnapshotListenOptions,\n    onNext: NextFn<PublicDocumentSnapshot<T>>,\n    onError?: ErrorFn,\n    onCompletion?: CompleteFn\n  ): Unsubscribe;\n\n  onSnapshot(...args: unknown[]): Unsubscribe {\n    const options = extractSnapshotOptions(args);\n    const observer = wrapObserver<DocumentSnapshot<T>, ExpDocumentSnapshot<T>>(\n      args,\n      result =>\n        new DocumentSnapshot(\n          this.firestore,\n          new ExpDocumentSnapshot(\n            this.firestore._delegate,\n            this._userDataWriter,\n            result._key,\n            result._document,\n            result.metadata,\n            this._delegate.converter\n          )\n        )\n    );\n    return onSnapshot(this._delegate, options, observer);\n  }\n\n  get(options?: PublicGetOptions): Promise<PublicDocumentSnapshot<T>> {\n    let snap: Promise<ExpDocumentSnapshot<T>>;\n    if (options?.source === 'cache') {\n      snap = getDocFromCache(this._delegate);\n    } else if (options?.source === 'server') {\n      snap = getDocFromServer(this._delegate);\n    } else {\n      snap = getDoc(this._delegate);\n    }\n\n    return snap.then(\n      result =>\n        new DocumentSnapshot(\n          this.firestore,\n          new ExpDocumentSnapshot(\n            this.firestore._delegate,\n            this._userDataWriter,\n            result._key,\n            result._document,\n            result.metadata,\n            this._delegate.converter\n          )\n        )\n    );\n  }\n\n  withConverter(converter: null): PublicDocumentReference<PublicDocumentData>;\n  withConverter<U>(\n    converter: PublicFirestoreDataConverter<U>\n  ): PublicDocumentReference<U>;\n  withConverter<U>(\n    converter: PublicFirestoreDataConverter<U> | null\n  ): PublicDocumentReference<U> {\n    return new DocumentReference<U>(\n      this.firestore,\n      converter\n        ? this._delegate.withConverter(\n            FirestoreDataConverter.getInstance(this.firestore, converter)\n          )\n        : (this._delegate.withConverter(null) as ExpDocumentReference<U>)\n    );\n  }\n}\n\n/**\n * Replaces the function name in an error thrown by the firestore-exp API\n * with the function names used in the classic API.\n */\nfunction replaceFunctionName(\n  e: Error,\n  original: string | RegExp,\n  updated: string\n): Error {\n  e.message = e.message.replace(original, updated);\n  return e;\n}\n\n/**\n * Iterates the list of arguments from an `onSnapshot` call and returns the\n * first argument that may be an `SnapshotListenOptions` object. Returns an\n * empty object if none is found.\n */\nexport function extractSnapshotOptions(\n  args: unknown[]\n): PublicSnapshotListenOptions {\n  for (const arg of args) {\n    if (typeof arg === 'object' && !isPartialObserver(arg)) {\n      return arg as PublicSnapshotListenOptions;\n    }\n  }\n  return {};\n}\n\n/**\n * Creates an observer that can be passed to the firestore-exp SDK. The\n * observer converts all observed values into the format expected by the classic\n * SDK.\n *\n * @param args - The list of arguments from an `onSnapshot` call.\n * @param wrapper - The function that converts the firestore-exp type into the\n * type used by this shim.\n */\nexport function wrapObserver<CompatType, ExpType>(\n  args: unknown[],\n  wrapper: (val: ExpType) => CompatType\n): PartialObserver<ExpType> {\n  let userObserver: PartialObserver<CompatType>;\n  if (isPartialObserver(args[0])) {\n    userObserver = args[0] as PartialObserver<CompatType>;\n  } else if (isPartialObserver(args[1])) {\n    userObserver = args[1];\n  } else if (typeof args[0] === 'function') {\n    userObserver = {\n      next: args[0] as NextFn<CompatType> | undefined,\n      error: args[1] as ErrorFn | undefined,\n      complete: args[2] as CompleteFn | undefined\n    };\n  } else {\n    userObserver = {\n      next: args[1] as NextFn<CompatType> | undefined,\n      error: args[2] as ErrorFn | undefined,\n      complete: args[3] as CompleteFn | undefined\n    };\n  }\n\n  return {\n    next: val => {\n      if (userObserver!.next) {\n        userObserver!.next(wrapper(val));\n      }\n    },\n    error: userObserver.error?.bind(userObserver),\n    complete: userObserver.complete?.bind(userObserver)\n  };\n}\n\n/**\n * Options interface that can be provided to configure the deserialization of\n * DocumentSnapshots.\n */\nexport interface SnapshotOptions extends PublicSnapshotOptions {}\n\nexport class DocumentSnapshot<T = PublicDocumentData>\n  implements PublicDocumentSnapshot<T>, Compat<ExpDocumentSnapshot<T>>\n{\n  constructor(\n    private readonly _firestore: Firestore,\n    readonly _delegate: ExpDocumentSnapshot<T>\n  ) {}\n\n  get ref(): DocumentReference<T> {\n    return new DocumentReference<T>(this._firestore, this._delegate.ref);\n  }\n\n  get id(): string {\n    return this._delegate.id;\n  }\n\n  get metadata(): SnapshotMetadata {\n    return this._delegate.metadata;\n  }\n\n  get exists(): boolean {\n    return this._delegate.exists();\n  }\n\n  data(options?: PublicSnapshotOptions): T | undefined {\n    return this._delegate.data(options);\n  }\n\n  get(\n    fieldPath: string | PublicFieldPath,\n    options?: PublicSnapshotOptions\n    // We are using `any` here to avoid an explicit cast by our users.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ): any {\n    return this._delegate.get(fieldPath as string | ExpFieldPath, options);\n  }\n\n  isEqual(other: DocumentSnapshot<T>): boolean {\n    return snapshotEqual(this._delegate, other._delegate);\n  }\n}\n\nexport class QueryDocumentSnapshot<T = PublicDocumentData>\n  extends DocumentSnapshot<T>\n  implements PublicQueryDocumentSnapshot<T>\n{\n  data(options?: PublicSnapshotOptions): T {\n    const data = this._delegate.data(options);\n    _debugAssert(\n      data !== undefined,\n      'Document in a QueryDocumentSnapshot should exist'\n    );\n    return data;\n  }\n}\n\nexport class Query<T = PublicDocumentData>\n  implements PublicQuery<T>, Compat<ExpQuery<T>>\n{\n  private readonly _userDataWriter: UserDataWriter;\n\n  constructor(readonly firestore: Firestore, readonly _delegate: ExpQuery<T>) {\n    this._userDataWriter = new UserDataWriter(firestore);\n  }\n\n  where(\n    fieldPath: string | _FieldPath,\n    opStr: PublicWhereFilterOp,\n    value: unknown\n  ): Query<T> {\n    try {\n      // The \"as string\" cast is a little bit of a hack. `where` accepts the\n      // FieldPath Compat type as input, but is not typed as such in order to\n      // not expose this via our public typings file.\n      return new Query<T>(\n        this.firestore,\n        query(this._delegate, where(fieldPath as string, opStr, value))\n      );\n    } catch (e) {\n      throw replaceFunctionName(\n        e as Error,\n        /(orderBy|where)\\(\\)/,\n        'Query.$1()'\n      );\n    }\n  }\n\n  orderBy(\n    fieldPath: string | _FieldPath,\n    directionStr?: PublicOrderByDirection\n  ): Query<T> {\n    try {\n      // The \"as string\" cast is a little bit of a hack. `orderBy` accepts the\n      // FieldPath Compat type as input, but is not typed as such in order to\n      // not expose this via our public typings file.\n      return new Query<T>(\n        this.firestore,\n        query(this._delegate, orderBy(fieldPath as string, directionStr))\n      );\n    } catch (e) {\n      throw replaceFunctionName(\n        e as Error,\n        /(orderBy|where)\\(\\)/,\n        'Query.$1()'\n      );\n    }\n  }\n\n  limit(n: number): Query<T> {\n    try {\n      return new Query<T>(this.firestore, query(this._delegate, limit(n)));\n    } catch (e) {\n      throw replaceFunctionName(e as Error, 'limit()', 'Query.limit()');\n    }\n  }\n\n  limitToLast(n: number): Query<T> {\n    try {\n      return new Query<T>(\n        this.firestore,\n        query(this._delegate, limitToLast(n))\n      );\n    } catch (e) {\n      throw replaceFunctionName(\n        e as Error,\n        'limitToLast()',\n        'Query.limitToLast()'\n      );\n    }\n  }\n\n  startAt(...args: any[]): Query<T> {\n    try {\n      return new Query(this.firestore, query(this._delegate, startAt(...args)));\n    } catch (e) {\n      throw replaceFunctionName(e as Error, 'startAt()', 'Query.startAt()');\n    }\n  }\n\n  startAfter(...args: any[]): Query<T> {\n    try {\n      return new Query(\n        this.firestore,\n        query(this._delegate, startAfter(...args))\n      );\n    } catch (e) {\n      throw replaceFunctionName(\n        e as Error,\n        'startAfter()',\n        'Query.startAfter()'\n      );\n    }\n  }\n\n  endBefore(...args: any[]): Query<T> {\n    try {\n      return new Query(\n        this.firestore,\n        query(this._delegate, endBefore(...args))\n      );\n    } catch (e) {\n      throw replaceFunctionName(e as Error, 'endBefore()', 'Query.endBefore()');\n    }\n  }\n\n  endAt(...args: any[]): Query<T> {\n    try {\n      return new Query(this.firestore, query(this._delegate, endAt(...args)));\n    } catch (e) {\n      throw replaceFunctionName(e as Error, 'endAt()', 'Query.endAt()');\n    }\n  }\n\n  isEqual(other: PublicQuery<T>): boolean {\n    return queryEqual(this._delegate, (other as Query<T>)._delegate);\n  }\n\n  get(options?: PublicGetOptions): Promise<QuerySnapshot<T>> {\n    let query: Promise<ExpQuerySnapshot<T>>;\n    if (options?.source === 'cache') {\n      query = getDocsFromCache(this._delegate);\n    } else if (options?.source === 'server') {\n      query = getDocsFromServer(this._delegate);\n    } else {\n      query = getDocs(this._delegate);\n    }\n    return query.then(\n      result =>\n        new QuerySnapshot(\n          this.firestore,\n          new ExpQuerySnapshot<T>(\n            this.firestore._delegate,\n            this._userDataWriter,\n            this._delegate,\n            result._snapshot\n          )\n        )\n    );\n  }\n\n  onSnapshot(observer: PartialObserver<PublicQuerySnapshot<T>>): Unsubscribe;\n  onSnapshot(\n    options: PublicSnapshotListenOptions,\n    observer: PartialObserver<PublicQuerySnapshot<T>>\n  ): Unsubscribe;\n  onSnapshot(\n    onNext: NextFn<PublicQuerySnapshot<T>>,\n    onError?: ErrorFn,\n    onCompletion?: CompleteFn\n  ): Unsubscribe;\n  onSnapshot(\n    options: PublicSnapshotListenOptions,\n    onNext: NextFn<PublicQuerySnapshot<T>>,\n    onError?: ErrorFn,\n    onCompletion?: CompleteFn\n  ): Unsubscribe;\n\n  onSnapshot(...args: unknown[]): Unsubscribe {\n    const options = extractSnapshotOptions(args);\n    const observer = wrapObserver<QuerySnapshot<T>, ExpQuerySnapshot<T>>(\n      args,\n      snap =>\n        new QuerySnapshot(\n          this.firestore,\n          new ExpQuerySnapshot<T>(\n            this.firestore._delegate,\n            this._userDataWriter,\n            this._delegate,\n            snap._snapshot\n          )\n        )\n    );\n    return onSnapshot(this._delegate, options, observer);\n  }\n\n  withConverter(converter: null): Query<PublicDocumentData>;\n  withConverter<U>(converter: PublicFirestoreDataConverter<U>): Query<U>;\n  withConverter<U>(\n    converter: PublicFirestoreDataConverter<U> | null\n  ): Query<U> {\n    return new Query<U>(\n      this.firestore,\n      converter\n        ? this._delegate.withConverter(\n            FirestoreDataConverter.getInstance(this.firestore, converter)\n          )\n        : (this._delegate.withConverter(null) as ExpQuery<U>)\n    );\n  }\n}\n\nexport class DocumentChange<T = PublicDocumentData>\n  implements PublicDocumentChange<T>, Compat<ExpDocumentChange<T>>\n{\n  constructor(\n    private readonly _firestore: Firestore,\n    readonly _delegate: ExpDocumentChange<T>\n  ) {}\n\n  get type(): PublicDocumentChangeType {\n    return this._delegate.type;\n  }\n\n  get doc(): QueryDocumentSnapshot<T> {\n    return new QueryDocumentSnapshot<T>(this._firestore, this._delegate.doc);\n  }\n\n  get oldIndex(): number {\n    return this._delegate.oldIndex;\n  }\n\n  get newIndex(): number {\n    return this._delegate.newIndex;\n  }\n}\n\nexport class QuerySnapshot<T = PublicDocumentData>\n  implements PublicQuerySnapshot<T>, Compat<ExpQuerySnapshot<T>>\n{\n  constructor(\n    readonly _firestore: Firestore,\n    readonly _delegate: ExpQuerySnapshot<T>\n  ) {}\n\n  get query(): Query<T> {\n    return new Query(this._firestore, this._delegate.query);\n  }\n\n  get metadata(): SnapshotMetadata {\n    return this._delegate.metadata;\n  }\n\n  get size(): number {\n    return this._delegate.size;\n  }\n\n  get empty(): boolean {\n    return this._delegate.empty;\n  }\n\n  get docs(): Array<QueryDocumentSnapshot<T>> {\n    return this._delegate.docs.map(\n      doc => new QueryDocumentSnapshot<T>(this._firestore, doc)\n    );\n  }\n\n  docChanges(\n    options?: PublicSnapshotListenOptions\n  ): Array<PublicDocumentChange<T>> {\n    return this._delegate\n      .docChanges(options)\n      .map(docChange => new DocumentChange<T>(this._firestore, docChange));\n  }\n\n  forEach(\n    callback: (result: QueryDocumentSnapshot<T>) => void,\n    thisArg?: unknown\n  ): void {\n    this._delegate.forEach(snapshot => {\n      callback.call(\n        thisArg,\n        new QueryDocumentSnapshot(this._firestore, snapshot)\n      );\n    });\n  }\n\n  isEqual(other: QuerySnapshot<T>): boolean {\n    return snapshotEqual(this._delegate, other._delegate);\n  }\n}\n\nexport class CollectionReference<T = PublicDocumentData>\n  extends Query<T>\n  implements PublicCollectionReference<T>\n{\n  constructor(\n    readonly firestore: Firestore,\n    readonly _delegate: ExpCollectionReference<T>\n  ) {\n    super(firestore, _delegate);\n  }\n\n  get id(): string {\n    return this._delegate.id;\n  }\n\n  get path(): string {\n    return this._delegate.path;\n  }\n\n  get parent(): DocumentReference<PublicDocumentData> | null {\n    const docRef = this._delegate.parent;\n    return docRef ? new DocumentReference(this.firestore, docRef) : null;\n  }\n\n  doc(documentPath?: string): DocumentReference<T> {\n    try {\n      if (documentPath === undefined) {\n        // Call `doc` without `documentPath` if `documentPath` is `undefined`\n        // as `doc` validates the number of arguments to prevent users from\n        // accidentally passing `undefined`.\n        return new DocumentReference(this.firestore, doc(this._delegate));\n      } else {\n        return new DocumentReference(\n          this.firestore,\n          doc(this._delegate, documentPath)\n        );\n      }\n    } catch (e) {\n      throw replaceFunctionName(\n        e as Error,\n        'doc()',\n        'CollectionReference.doc()'\n      );\n    }\n  }\n\n  add(data: T): Promise<DocumentReference<T>> {\n    return addDoc(this._delegate, data as WithFieldValue<T>).then(\n      docRef => new DocumentReference(this.firestore, docRef)\n    );\n  }\n\n  isEqual(other: CollectionReference<T>): boolean {\n    return refEqual(this._delegate, other._delegate);\n  }\n\n  withConverter(converter: null): CollectionReference<PublicDocumentData>;\n  withConverter<U>(\n    converter: PublicFirestoreDataConverter<U>\n  ): CollectionReference<U>;\n  withConverter<U>(\n    converter: PublicFirestoreDataConverter<U> | null\n  ): CollectionReference<U> {\n    return new CollectionReference<U>(\n      this.firestore,\n      converter\n        ? this._delegate.withConverter(\n            FirestoreDataConverter.getInstance(this.firestore, converter)\n          )\n        : (this._delegate.withConverter(null) as ExpCollectionReference<U>)\n    );\n  }\n}\n\nfunction castReference<T>(\n  documentRef: PublicDocumentReference<T>\n): ExpDocumentReference<T> {\n  return _cast<ExpDocumentReference<T>>(documentRef, ExpDocumentReference);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FieldPath as ExpFieldPath,\n  _FieldPath as InternalFieldPath\n} from '@firebase/firestore';\nimport { FieldPath as PublicFieldPath } from '@firebase/firestore-types';\nimport { Compat, getModularInstance } from '@firebase/util';\n\n// The objects that are a part of this API are exposed to third-parties as\n// compiled javascript so we want to flag our private members with a leading\n// underscore to discourage their use.\n\n/**\n * A `FieldPath` refers to a field in a document. The path may consist of a\n * single field name (referring to a top-level field in the document), or a list\n * of field names (referring to a nested field in the document).\n */\nexport class FieldPath implements PublicFieldPath, Compat<ExpFieldPath> {\n  readonly _delegate: ExpFieldPath;\n  /**\n   * Creates a FieldPath from the provided field names. If more than one field\n   * name is provided, the path will point to a nested field in a document.\n   *\n   * @param fieldNames - A list of field names.\n   */\n  constructor(...fieldNames: string[]) {\n    this._delegate = new ExpFieldPath(...fieldNames);\n  }\n\n  static documentId(): FieldPath {\n    /**\n     * Internal Note: The backend doesn't technically support querying by\n     * document ID. Instead it queries by the entire document name (full path\n     * included), but in the cases we currently support documentId(), the net\n     * effect is the same.\n     */\n    return new FieldPath(InternalFieldPath.keyField().canonicalString());\n  }\n\n  isEqual(other: PublicFieldPath): boolean {\n    other = getModularInstance(other);\n\n    if (!(other instanceof ExpFieldPath)) {\n      return false;\n    }\n    return this._delegate._internalPath.isEqual(other._internalPath);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  arrayRemove,\n  arrayUnion,\n  deleteField,\n  FieldValue as FieldValue1,\n  increment,\n  serverTimestamp\n} from '@firebase/firestore';\nimport { FieldValue as PublicFieldValue } from '@firebase/firestore-types';\nimport { Compat } from '@firebase/util';\n\nexport class FieldValue implements PublicFieldValue, Compat<FieldValue1> {\n  static serverTimestamp(): FieldValue {\n    const delegate = serverTimestamp();\n    delegate._methodName = 'FieldValue.serverTimestamp';\n    return new FieldValue(delegate);\n  }\n\n  static delete(): FieldValue {\n    const delegate = deleteField();\n    delegate._methodName = 'FieldValue.delete';\n    return new FieldValue(delegate);\n  }\n\n  static arrayUnion(...elements: unknown[]): FieldValue {\n    const delegate = arrayUnion(...elements);\n    delegate._methodName = 'FieldValue.arrayUnion';\n    return new FieldValue(delegate);\n  }\n\n  static arrayRemove(...elements: unknown[]): FieldValue {\n    const delegate = arrayRemove(...elements);\n    delegate._methodName = 'FieldValue.arrayRemove';\n    return new FieldValue(delegate);\n  }\n\n  static increment(n: number): FieldValue {\n    const delegate = increment(n);\n    delegate._methodName = 'FieldValue.increment';\n    return new FieldValue(delegate);\n  }\n\n  constructor(readonly _delegate: FieldValue1) {}\n\n  isEqual(other: FieldValue): boolean {\n    return this._delegate.isEqual(other._delegate);\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { FirebaseApp } from '@firebase/app-compat';\nimport { FirebaseNamespace } from '@firebase/app-types';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\nimport { Component, ComponentType } from '@firebase/component';\nimport {\n  Firestore as ModularFirestore,\n  CACHE_SIZE_UNLIMITED,\n  GeoPoint,\n  Timestamp\n} from '@firebase/firestore';\n\nimport { Blob } from './api/blob';\nimport {\n  Firestore,\n  Transaction,\n  CollectionReference,\n  DocumentReference,\n  DocumentSnapshot,\n  Query,\n  QueryDocumentSnapshot,\n  QuerySnapshot,\n  WriteBatch,\n  setLogLevel\n} from './api/database';\nimport { FieldPath } from './api/field_path';\nimport { FieldValue } from './api/field_value';\n\nconst firestoreNamespace = {\n  Firestore,\n  GeoPoint,\n  Timestamp,\n  Blob,\n  Transaction,\n  WriteBatch,\n  DocumentReference,\n  DocumentSnapshot,\n  Query,\n  QueryDocumentSnapshot,\n  QuerySnapshot,\n  CollectionReference,\n  FieldPath,\n  FieldValue,\n  setLogLevel,\n  CACHE_SIZE_UNLIMITED\n};\n\n/**\n * Configures Firestore as part of the Firebase SDK by calling registerComponent.\n *\n * @param firebase - The FirebaseNamespace to register Firestore with\n * @param firestoreFactory - A factory function that returns a new Firestore\n *    instance.\n */\nexport function configureForFirebase(\n  firebase: FirebaseNamespace,\n  firestoreFactory: (\n    app: FirebaseApp,\n    firestoreExp: ModularFirestore\n  ) => Firestore\n): void {\n  (firebase as _FirebaseNamespace).INTERNAL.registerComponent(\n    new Component(\n      'firestore-compat',\n      container => {\n        const app = container.getProvider('app-compat').getImmediate()!;\n        const firestoreExp = container.getProvider('firestore').getImmediate()!;\n        return firestoreFactory(app, firestoreExp);\n      },\n      'PUBLIC' as ComponentType.PUBLIC\n    ).setServiceProps({ ...firestoreNamespace })\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport firebase from '@firebase/app-compat';\nimport type { FirebaseNamespace } from '@firebase/app-types';\nimport * as types from '@firebase/firestore-types';\n\nimport { name, version } from '../package.json';\n\nimport { Firestore, IndexedDbPersistenceProvider } from './api/database';\nimport { configureForFirebase } from './config';\n\nimport './register-module';\n\n/**\n * Registers the main Firestore build with the components framework.\n * Persistence can be enabled via `firebase.firestore().enablePersistence()`.\n */\nexport function registerFirestore(instance: FirebaseNamespace): void {\n  configureForFirebase(\n    instance,\n    (app, firestoreExp) =>\n      new Firestore(app, firestoreExp, new IndexedDbPersistenceProvider())\n  );\n  instance.registerVersion(name, version);\n}\n\nregisterFirestore(firebase as unknown as FirebaseNamespace);\n\ndeclare module '@firebase/app-compat' {\n  interface FirebaseNamespace {\n    firestore: {\n      (app?: FirebaseApp): types.FirebaseFirestore;\n      Blob: typeof types.Blob;\n      CollectionReference: typeof types.CollectionReference;\n      DocumentReference: typeof types.DocumentReference;\n      DocumentSnapshot: typeof types.DocumentSnapshot;\n      FieldPath: typeof types.FieldPath;\n      FieldValue: typeof types.FieldValue;\n      Firestore: typeof types.FirebaseFirestore;\n      GeoPoint: typeof types.GeoPoint;\n      Query: typeof types.Query;\n      QueryDocumentSnapshot: typeof types.QueryDocumentSnapshot;\n      QuerySnapshot: typeof types.QuerySnapshot;\n      Timestamp: typeof types.Timestamp;\n      Transaction: typeof types.Transaction;\n      WriteBatch: typeof types.WriteBatch;\n      setLogLevel: typeof types.setLogLevel;\n    };\n  }\n  interface FirebaseApp {\n    firestore?(): types.FirebaseFirestore;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}