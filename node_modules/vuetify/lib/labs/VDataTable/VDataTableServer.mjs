import { createVNode as _createVNode, resolveDirective as _resolveDirective, Fragment as _Fragment } from "vue";
// Components
import { VTable } from "../../components/VTable/index.mjs";
import { VDataTableFooter } from "./VDataTableFooter.mjs";
import { VDataTableHeaders } from "./VDataTableHeaders.mjs";
import { VDataTableRows } from "./VDataTableRows.mjs"; // Composables
import { provideDefaults } from "../../composables/defaults.mjs";
import { makeDataTableExpandProps, provideExpanded } from "./composables/expand.mjs";
import { createGroupBy, makeDataTableGroupProps, provideGroupBy, useGroupedItems } from "./composables/group.mjs";
import { createHeaders, makeDataTableHeaderProps } from "./composables/headers.mjs";
import { makeDataTableItemProps, useDataTableItems } from "./composables/items.mjs";
import { useOptions } from "./composables/options.mjs";
import { createPagination, makeDataTablePaginateProps, providePagination } from "./composables/paginate.mjs";
import { makeDataTableSelectProps, provideSelection } from "./composables/select.mjs";
import { createSort, makeDataTableSortProps, provideSort } from "./composables/sort.mjs"; // Utilities
import { computed, provide, toRef } from 'vue';
import { genericComponent, useRender } from "../../util/index.mjs";
import { makeVDataTableProps } from "./VDataTable.mjs"; // Types
export const VDataTableServer = genericComponent()({
  name: 'VDataTableServer',
  props: {
    color: String,
    loading: [Boolean, String],
    loadingText: {
      type: String,
      default: '$vuetify.dataIterator.loadingText'
    },
    itemsLength: {
      type: [Number, String],
      required: true
    },
    ...makeVDataTableProps(),
    ...makeDataTableExpandProps(),
    ...makeDataTableHeaderProps(),
    ...makeDataTableItemProps(),
    ...makeDataTableSelectProps(),
    ...makeDataTableSortProps(),
    ...makeDataTablePaginateProps(),
    ...makeDataTableGroupProps()
  },
  emits: {
    'update:modelValue': value => true,
    'update:page': page => true,
    'update:itemsPerPage': page => true,
    'update:sortBy': sortBy => true,
    'update:options': options => true,
    'update:expanded': options => true,
    'update:groupBy': value => true,
    'click:row': (e, value) => true
  },
  setup(props, _ref) {
    let {
      emit,
      slots
    } = _ref;
    const {
      groupBy
    } = createGroupBy(props);
    const {
      sortBy,
      multiSort,
      mustSort
    } = createSort(props);
    const {
      page,
      itemsPerPage
    } = createPagination(props);
    const itemsLength = computed(() => parseInt(props.itemsLength, 10));
    provideExpanded(props);
    const {
      columns
    } = createHeaders(props, {
      groupBy,
      showSelect: toRef(props, 'showSelect'),
      showExpand: toRef(props, 'showExpand')
    });
    const {
      items
    } = useDataTableItems(props, columns);
    const {
      toggleSort
    } = provideSort({
      sortBy,
      multiSort,
      mustSort,
      page
    });
    const {
      opened
    } = provideGroupBy({
      groupBy,
      sortBy
    });
    providePagination({
      page,
      itemsPerPage,
      itemsLength
    });
    const {
      flatItems
    } = useGroupedItems(items, groupBy, opened);
    provideSelection(props, items);
    useOptions({
      page,
      itemsPerPage,
      sortBy,
      groupBy,
      search: toRef(props, 'search')
    });
    provide('v-data-table', {
      toggleSort,
      sortBy
    });
    provideDefaults({
      VDataTableRows: {
        hideNoData: toRef(props, 'hideNoData'),
        noDataText: toRef(props, 'noDataText'),
        loading: toRef(props, 'loading'),
        loadingText: toRef(props, 'loadingText')
      }
    });
    useRender(() => _createVNode(VTable, {
      "class": ['v-data-table', {
        'v-data-table--loading': props.loading
      }],
      "fixedHeader": props.fixedHeader,
      "fixedFooter": props.fixedFooter,
      "height": props.height,
      "hover": props.hover
    }, {
      top: slots.top,
      default: slots.default ?? (() => _createVNode(_Fragment, null, [slots.colgroup?.({
        columns
      }), _createVNode("thead", {
        "class": "v-data-table__thead",
        "role": "rowgroup"
      }, [_createVNode(VDataTableHeaders, {
        "sticky": props.fixedHeader,
        "loading": props.loading,
        "color": props.color
      }, slots)]), slots.thead?.(), _createVNode("tbody", {
        "class": "v-data-table__tbody",
        "role": "rowgroup"
      }, [slots.body ? slots.body() : _createVNode(VDataTableRows, {
        "items": flatItems.value,
        "onClick:row": props['onClick:row']
      }, slots)]), slots.tbody?.(), slots.tfoot?.()])),
      bottom: slots.bottom ?? (() => _createVNode(VDataTableFooter, null, {
        prepend: slots['footer.prepend']
      }))
    }));
  }
});
//# sourceMappingURL=VDataTableServer.mjs.map