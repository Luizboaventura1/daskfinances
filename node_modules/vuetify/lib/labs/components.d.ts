import * as vue from 'vue';
import { ComponentPropsOptions, ExtractPropTypes, PropType, nextTick } from 'vue';

interface FilterPropsOptions<PropsOptions extends Readonly<ComponentPropsOptions>, Props = ExtractPropTypes<PropsOptions>> {
    filterProps<T extends Partial<Props>, U extends Exclude<keyof Props, Exclude<keyof Props, keyof T>>>(props: T): [yes: Partial<Pick<T, U>>, no: Omit<T, U>];
}

type SelectItemKey = boolean | string | (string | number)[] | ((item: Record<string, any>, fallback?: any) => any);

interface InternalItem<T = any> {
    title: string;
    value: any;
    props: {
        [key: string]: any;
        title: string;
        value: any;
    };
    children?: InternalItem<T>[];
    raw: T;
}

/**
 * - match without highlight
 * - single match (index), length already known
 * - single match (start, end)
 * - multiple matches (start, end), probably shouldn't overlap
 */
type FilterMatch = boolean | number | [number, number] | [number, number][];
type FilterFunction = (value: string, query: string, item?: any) => FilterMatch;
type FilterKeyFunctions = Record<string, FilterFunction>;
type FilterKeys = string | string[];
type FilterMode = 'some' | 'every' | 'union' | 'intersection';

type DataTableCompareFunction<T = any> = (a: T, b: T) => number;
type DataTableHeader = {
    key: string;
    value?: SelectItemKey;
    title: string;
    colspan?: number;
    rowspan?: number;
    fixed?: boolean;
    align?: 'start' | 'end';
    width?: number;
    minWidth?: string;
    maxWidth?: string;
    sortable?: boolean;
    sort?: DataTableCompareFunction;
};
type InternalDataTableHeader = DataTableHeader & {
    sortable: boolean;
    fixedOffset?: number;
    lastFixed?: boolean;
};
type DataTableItem = InternalItem & {
    type: 'item';
    columns: Record<string, unknown>;
};
type GroupHeaderItem = {
    type: 'group-header';
    id: string;
    key: string;
    value: string;
    depth: number;
    items: (GroupHeaderItem | DataTableItem)[];
};
type InternalDataTableItem = DataTableItem | GroupHeaderItem;

type SortItem = {
    key: string;
    order?: boolean | 'asc' | 'desc';
};

type GroupHeaderSlot = {
    index: number;
    item: GroupHeaderItem;
    columns: InternalDataTableHeader[];
    isExpanded: (item: DataTableItem) => boolean;
    toggleExpand: (item: DataTableItem) => void;
    isSelected: (items: DataTableItem[]) => boolean;
    toggleSelect: (item: DataTableItem) => void;
    toggleGroup: (group: GroupHeaderItem) => void;
    isGroupOpen: (group: GroupHeaderItem) => boolean;
};
type ItemSlot = {
    index: number;
    item: DataTableItem;
    columns: InternalDataTableHeader[];
    isExpanded: (item: DataTableItem) => boolean;
    toggleExpand: (item: DataTableItem) => void;
    isSelected: (items: DataTableItem[]) => boolean;
    toggleSelect: (item: DataTableItem) => void;
};
declare const VDataTableRows: {
    new (...args: any[]): {
        $: vue.ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            noDataText: string;
            loadingText: string;
            items: InternalDataTableItem[];
            hideNoData: boolean;
        }> & Omit<{
            noDataText: string;
            loadingText: string;
            items: InternalDataTableItem[];
            hideNoData: boolean;
        } & {
            loading?: string | boolean | undefined;
            rowHeight?: number | undefined;
            'onClick:row'?: ((e: Event, value: {
                item: DataTableItem;
            }) => void) | undefined;
        } & {
            $children?: vue.VNodeChild | (() => vue.VNodeChild) | {
                [x: `item.${string}`]: ((args_0: ItemSlot) => vue.VNodeChild) | undefined;
                default?: (() => vue.VNodeChild) | undefined;
                item?: ((args_0: ItemSlot) => vue.VNodeChild) | undefined;
                loading?: (() => vue.VNodeChild) | undefined;
                'group-header'?: ((args_0: GroupHeaderSlot) => vue.VNodeChild) | undefined;
                'no-data'?: (() => vue.VNodeChild) | undefined;
                'expanded-row'?: ((args_0: ItemSlot) => vue.VNodeChild) | undefined;
                'item.data-table-select'?: ((args_0: ItemSlot) => vue.VNodeChild) | undefined;
                'item.data-table-expand'?: ((args_0: ItemSlot) => vue.VNodeChild) | undefined;
            };
            'v-slots'?: {
                [x: `item.${string}`]: false | ((args_0: ItemSlot) => vue.VNodeChild) | undefined;
                default?: false | (() => vue.VNodeChild) | undefined;
                item?: false | ((args_0: ItemSlot) => vue.VNodeChild) | undefined;
                loading?: false | (() => vue.VNodeChild) | undefined;
                'group-header'?: false | ((args_0: GroupHeaderSlot) => vue.VNodeChild) | undefined;
                'no-data'?: false | (() => vue.VNodeChild) | undefined;
                'expanded-row'?: false | ((args_0: ItemSlot) => vue.VNodeChild) | undefined;
                'item.data-table-select'?: false | ((args_0: ItemSlot) => vue.VNodeChild) | undefined;
                'item.data-table-expand'?: false | ((args_0: ItemSlot) => vue.VNodeChild) | undefined;
            } | undefined;
        } & {
            [x: `v-slot:item.${string}`]: false | ((args_0: ItemSlot) => vue.VNodeChild) | undefined;
            "v-slot:default"?: false | (() => vue.VNodeChild) | undefined;
            "v-slot:item"?: false | ((args_0: ItemSlot) => vue.VNodeChild) | undefined;
            "v-slot:loading"?: false | (() => vue.VNodeChild) | undefined;
            "v-slot:group-header"?: false | ((args_0: GroupHeaderSlot) => vue.VNodeChild) | undefined;
            "v-slot:no-data"?: false | (() => vue.VNodeChild) | undefined;
            "v-slot:expanded-row"?: false | ((args_0: ItemSlot) => vue.VNodeChild) | undefined;
            "v-slot:item.data-table-select"?: false | ((args_0: ItemSlot) => vue.VNodeChild) | undefined;
            "v-slot:item.data-table-expand"?: false | ((args_0: ItemSlot) => vue.VNodeChild) | undefined;
        } & vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, "noDataText" | "loadingText" | "items" | "hideNoData">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: vue.Slot | undefined;
        }>;
        $root: vue.ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, vue.ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null;
        $parent: vue.ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, vue.ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: vue.ComponentOptionsBase<{
            noDataText: string;
            loadingText: string;
            items: InternalDataTableItem[];
            hideNoData: boolean;
        } & {
            loading?: string | boolean | undefined;
            rowHeight?: number | undefined;
            'onClick:row'?: ((e: Event, value: {
                item: DataTableItem;
            }) => void) | undefined;
        } & {
            $children?: vue.VNodeChild | (() => vue.VNodeChild) | {
                [x: `item.${string}`]: ((args_0: ItemSlot) => vue.VNodeChild) | undefined;
                default?: (() => vue.VNodeChild) | undefined;
                item?: ((args_0: ItemSlot) => vue.VNodeChild) | undefined;
                loading?: (() => vue.VNodeChild) | undefined;
                'group-header'?: ((args_0: GroupHeaderSlot) => vue.VNodeChild) | undefined;
                'no-data'?: (() => vue.VNodeChild) | undefined;
                'expanded-row'?: ((args_0: ItemSlot) => vue.VNodeChild) | undefined;
                'item.data-table-select'?: ((args_0: ItemSlot) => vue.VNodeChild) | undefined;
                'item.data-table-expand'?: ((args_0: ItemSlot) => vue.VNodeChild) | undefined;
            };
            'v-slots'?: {
                [x: `item.${string}`]: false | ((args_0: ItemSlot) => vue.VNodeChild) | undefined;
                default?: false | (() => vue.VNodeChild) | undefined;
                item?: false | ((args_0: ItemSlot) => vue.VNodeChild) | undefined;
                loading?: false | (() => vue.VNodeChild) | undefined;
                'group-header'?: false | ((args_0: GroupHeaderSlot) => vue.VNodeChild) | undefined;
                'no-data'?: false | (() => vue.VNodeChild) | undefined;
                'expanded-row'?: false | ((args_0: ItemSlot) => vue.VNodeChild) | undefined;
                'item.data-table-select'?: false | ((args_0: ItemSlot) => vue.VNodeChild) | undefined;
                'item.data-table-expand'?: false | ((args_0: ItemSlot) => vue.VNodeChild) | undefined;
            } | undefined;
        } & {
            [x: `v-slot:item.${string}`]: false | ((args_0: ItemSlot) => vue.VNodeChild) | undefined;
            "v-slot:default"?: false | (() => vue.VNodeChild) | undefined;
            "v-slot:item"?: false | ((args_0: ItemSlot) => vue.VNodeChild) | undefined;
            "v-slot:loading"?: false | (() => vue.VNodeChild) | undefined;
            "v-slot:group-header"?: false | ((args_0: GroupHeaderSlot) => vue.VNodeChild) | undefined;
            "v-slot:no-data"?: false | (() => vue.VNodeChild) | undefined;
            "v-slot:expanded-row"?: false | ((args_0: ItemSlot) => vue.VNodeChild) | undefined;
            "v-slot:item.data-table-select"?: false | ((args_0: ItemSlot) => vue.VNodeChild) | undefined;
            "v-slot:item.data-table-expand"?: false | ((args_0: ItemSlot) => vue.VNodeChild) | undefined;
        }, {}, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, {
            noDataText: string;
            loadingText: string;
            items: InternalDataTableItem[];
            hideNoData: boolean;
        }, {}, string> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: vue.DebuggerEvent) => void) | ((e: vue.DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: vue.DebuggerEvent) => void) | ((e: vue.DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: vue.ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, vue.ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null, info: string) => boolean | void) | ((err: unknown, instance: vue.ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, vue.ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof vue.nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: vue.WatchOptions<boolean> | undefined): vue.WatchStopHandle;
    } & {
        noDataText: string;
        loadingText: string;
        items: InternalDataTableItem[];
        hideNoData: boolean;
    } & {
        loading?: string | boolean | undefined;
        rowHeight?: number | undefined;
        'onClick:row'?: ((e: Event, value: {
            item: DataTableItem;
        }) => void) | undefined;
    } & {
        $children?: vue.VNodeChild | (() => vue.VNodeChild) | {
            [x: `item.${string}`]: ((args_0: ItemSlot) => vue.VNodeChild) | undefined;
            default?: (() => vue.VNodeChild) | undefined;
            item?: ((args_0: ItemSlot) => vue.VNodeChild) | undefined;
            loading?: (() => vue.VNodeChild) | undefined;
            'group-header'?: ((args_0: GroupHeaderSlot) => vue.VNodeChild) | undefined;
            'no-data'?: (() => vue.VNodeChild) | undefined;
            'expanded-row'?: ((args_0: ItemSlot) => vue.VNodeChild) | undefined;
            'item.data-table-select'?: ((args_0: ItemSlot) => vue.VNodeChild) | undefined;
            'item.data-table-expand'?: ((args_0: ItemSlot) => vue.VNodeChild) | undefined;
        };
        'v-slots'?: {
            [x: `item.${string}`]: false | ((args_0: ItemSlot) => vue.VNodeChild) | undefined;
            default?: false | (() => vue.VNodeChild) | undefined;
            item?: false | ((args_0: ItemSlot) => vue.VNodeChild) | undefined;
            loading?: false | (() => vue.VNodeChild) | undefined;
            'group-header'?: false | ((args_0: GroupHeaderSlot) => vue.VNodeChild) | undefined;
            'no-data'?: false | (() => vue.VNodeChild) | undefined;
            'expanded-row'?: false | ((args_0: ItemSlot) => vue.VNodeChild) | undefined;
            'item.data-table-select'?: false | ((args_0: ItemSlot) => vue.VNodeChild) | undefined;
            'item.data-table-expand'?: false | ((args_0: ItemSlot) => vue.VNodeChild) | undefined;
        } | undefined;
    } & {
        [x: `v-slot:item.${string}`]: false | ((args_0: ItemSlot) => vue.VNodeChild) | undefined;
        "v-slot:default"?: false | (() => vue.VNodeChild) | undefined;
        "v-slot:item"?: false | ((args_0: ItemSlot) => vue.VNodeChild) | undefined;
        "v-slot:loading"?: false | (() => vue.VNodeChild) | undefined;
        "v-slot:group-header"?: false | ((args_0: GroupHeaderSlot) => vue.VNodeChild) | undefined;
        "v-slot:no-data"?: false | (() => vue.VNodeChild) | undefined;
        "v-slot:expanded-row"?: false | ((args_0: ItemSlot) => vue.VNodeChild) | undefined;
        "v-slot:item.data-table-select"?: false | ((args_0: ItemSlot) => vue.VNodeChild) | undefined;
        "v-slot:item.data-table-expand"?: false | ((args_0: ItemSlot) => vue.VNodeChild) | undefined;
    } & vue.ShallowUnwrapRef<{}> & {} & vue.ComponentCustomProperties & {};
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & vue.ComponentOptionsBase<{
    noDataText: string;
    loadingText: string;
    items: InternalDataTableItem[];
    hideNoData: boolean;
} & {
    loading?: string | boolean | undefined;
    rowHeight?: number | undefined;
    'onClick:row'?: ((e: Event, value: {
        item: DataTableItem;
    }) => void) | undefined;
} & {
    $children?: vue.VNodeChild | (() => vue.VNodeChild) | {
        [x: `item.${string}`]: ((args_0: ItemSlot) => vue.VNodeChild) | undefined;
        default?: (() => vue.VNodeChild) | undefined;
        item?: ((args_0: ItemSlot) => vue.VNodeChild) | undefined;
        loading?: (() => vue.VNodeChild) | undefined;
        'group-header'?: ((args_0: GroupHeaderSlot) => vue.VNodeChild) | undefined;
        'no-data'?: (() => vue.VNodeChild) | undefined;
        'expanded-row'?: ((args_0: ItemSlot) => vue.VNodeChild) | undefined;
        'item.data-table-select'?: ((args_0: ItemSlot) => vue.VNodeChild) | undefined;
        'item.data-table-expand'?: ((args_0: ItemSlot) => vue.VNodeChild) | undefined;
    };
    'v-slots'?: {
        [x: `item.${string}`]: false | ((args_0: ItemSlot) => vue.VNodeChild) | undefined;
        default?: false | (() => vue.VNodeChild) | undefined;
        item?: false | ((args_0: ItemSlot) => vue.VNodeChild) | undefined;
        loading?: false | (() => vue.VNodeChild) | undefined;
        'group-header'?: false | ((args_0: GroupHeaderSlot) => vue.VNodeChild) | undefined;
        'no-data'?: false | (() => vue.VNodeChild) | undefined;
        'expanded-row'?: false | ((args_0: ItemSlot) => vue.VNodeChild) | undefined;
        'item.data-table-select'?: false | ((args_0: ItemSlot) => vue.VNodeChild) | undefined;
        'item.data-table-expand'?: false | ((args_0: ItemSlot) => vue.VNodeChild) | undefined;
    } | undefined;
} & {
    [x: `v-slot:item.${string}`]: false | ((args_0: ItemSlot) => vue.VNodeChild) | undefined;
    "v-slot:default"?: false | (() => vue.VNodeChild) | undefined;
    "v-slot:item"?: false | ((args_0: ItemSlot) => vue.VNodeChild) | undefined;
    "v-slot:loading"?: false | (() => vue.VNodeChild) | undefined;
    "v-slot:group-header"?: false | ((args_0: GroupHeaderSlot) => vue.VNodeChild) | undefined;
    "v-slot:no-data"?: false | (() => vue.VNodeChild) | undefined;
    "v-slot:expanded-row"?: false | ((args_0: ItemSlot) => vue.VNodeChild) | undefined;
    "v-slot:item.data-table-select"?: false | ((args_0: ItemSlot) => vue.VNodeChild) | undefined;
    "v-slot:item.data-table-expand"?: false | ((args_0: ItemSlot) => vue.VNodeChild) | undefined;
}, {}, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, {
    noDataText: string;
    loadingText: string;
    items: InternalDataTableItem[];
    hideNoData: boolean;
}, {}, string> & vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps & FilterPropsOptions<{
    loading: (StringConstructor | BooleanConstructor)[];
    loadingText: {
        type: StringConstructor;
        default: string;
    };
    hideNoData: BooleanConstructor;
    items: {
        type: PropType<InternalDataTableItem[]>;
        default: () => never[];
    };
    noDataText: {
        type: StringConstructor;
        default: string;
    };
    rowHeight: NumberConstructor;
    'onClick:row': PropType<(e: Event, value: {
        item: DataTableItem;
    }) => void>;
}, vue.ExtractPropTypes<{
    loading: (StringConstructor | BooleanConstructor)[];
    loadingText: {
        type: StringConstructor;
        default: string;
    };
    hideNoData: BooleanConstructor;
    items: {
        type: PropType<InternalDataTableItem[]>;
        default: () => never[];
    };
    noDataText: {
        type: StringConstructor;
        default: string;
    };
    rowHeight: NumberConstructor;
    'onClick:row': PropType<(e: Event, value: {
        item: DataTableItem;
    }) => void>;
}>>;
type VDataTableRows = InstanceType<typeof VDataTableRows>;

declare const VDataTable: {
    new (...args: any[]): {
        $: vue.ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            expanded: string[];
            page: string | number;
            headers: DataTableHeader[] | DataTableHeader[][];
            noDataText: string;
            sortBy: SortItem[];
            items: any[];
            modelValue: any[];
            itemTitle: SelectItemKey;
            itemValue: NonNullable<SelectItemKey>;
            itemChildren: SelectItemKey;
            itemProps: SelectItemKey;
            returnObject: boolean;
            hideNoData: boolean;
            filterMode: FilterMode;
            noFilter: boolean;
            hover: boolean;
            fixedHeader: boolean;
            fixedFooter: boolean;
            multiSort: boolean;
            mustSort: boolean;
            groupBy: SortItem[];
            showSelect: boolean;
            expandOnClick: boolean;
            showExpand: boolean;
            itemsPerPage: string | number;
        }> & Omit<{
            expanded: string[];
            page: string | number;
            headers: DataTableHeader[] | DataTableHeader[][];
            noDataText: string;
            sortBy: SortItem[];
            items: any[];
            modelValue: any[];
            itemTitle: SelectItemKey;
            itemValue: NonNullable<SelectItemKey>;
            itemChildren: SelectItemKey;
            itemProps: SelectItemKey;
            returnObject: boolean;
            hideNoData: boolean;
            filterMode: FilterMode;
            noFilter: boolean;
            hover: boolean;
            fixedHeader: boolean;
            fixedFooter: boolean;
            multiSort: boolean;
            mustSort: boolean;
            groupBy: SortItem[];
            showSelect: boolean;
            expandOnClick: boolean;
            showExpand: boolean;
            itemsPerPage: string | number;
        } & {
            search?: string | undefined;
            height?: string | number | undefined;
            width?: string | number | undefined;
            customFilter?: FilterFunction | undefined;
            customKeyFilter?: FilterKeyFunctions | undefined;
            filterKeys?: FilterKeys | undefined;
            'onClick:row'?: ((e: Event, value: {
                item: DataTableItem;
            }) => void) | undefined;
        } & {
            $children?: vue.VNodeChild | (() => vue.VNodeChild) | {
                [x: `item.${string}`]: ((args_0: {
                    index: number;
                    item: DataTableItem;
                    columns: InternalDataTableHeader[];
                    isExpanded: (item: DataTableItem) => boolean;
                    toggleExpand: (item: DataTableItem) => void;
                    isSelected: (items: DataTableItem[]) => boolean;
                    toggleSelect: (item: DataTableItem) => void;
                }) => vue.VNodeChild) | undefined;
                default?: (() => vue.VNodeChild) | undefined;
                item?: ((args_0: {
                    index: number;
                    item: DataTableItem;
                    columns: InternalDataTableHeader[];
                    isExpanded: (item: DataTableItem) => boolean;
                    toggleExpand: (item: DataTableItem) => void;
                    isSelected: (items: DataTableItem[]) => boolean;
                    toggleSelect: (item: DataTableItem) => void;
                }) => vue.VNodeChild) | undefined;
                loading?: (() => vue.VNodeChild) | undefined;
                'group-header'?: ((args_0: {
                    index: number;
                    item: GroupHeaderItem;
                    columns: InternalDataTableHeader[];
                    isExpanded: (item: DataTableItem) => boolean;
                    toggleExpand: (item: DataTableItem) => void;
                    isSelected: (items: DataTableItem[]) => boolean;
                    toggleSelect: (item: DataTableItem) => void;
                    toggleGroup: (group: GroupHeaderItem) => void;
                    isGroupOpen: (group: GroupHeaderItem) => boolean;
                }) => vue.VNodeChild) | undefined;
                'no-data'?: (() => vue.VNodeChild) | undefined;
                'expanded-row'?: ((args_0: {
                    index: number;
                    item: DataTableItem;
                    columns: InternalDataTableHeader[];
                    isExpanded: (item: DataTableItem) => boolean;
                    toggleExpand: (item: DataTableItem) => void;
                    isSelected: (items: DataTableItem[]) => boolean;
                    toggleSelect: (item: DataTableItem) => void;
                }) => vue.VNodeChild) | undefined;
                'item.data-table-select'?: ((args_0: {
                    index: number;
                    item: DataTableItem;
                    columns: InternalDataTableHeader[];
                    isExpanded: (item: DataTableItem) => boolean;
                    toggleExpand: (item: DataTableItem) => void;
                    isSelected: (items: DataTableItem[]) => boolean;
                    toggleSelect: (item: DataTableItem) => void;
                }) => vue.VNodeChild) | undefined;
                'item.data-table-expand'?: ((args_0: {
                    index: number;
                    item: DataTableItem;
                    columns: InternalDataTableHeader[];
                    isExpanded: (item: DataTableItem) => boolean;
                    toggleExpand: (item: DataTableItem) => void;
                    isSelected: (items: DataTableItem[]) => boolean;
                    toggleSelect: (item: DataTableItem) => void;
                }) => vue.VNodeChild) | undefined;
                colgroup?: ((args_0: InternalDataTableHeader) => vue.VNodeChild) | undefined;
                top?: (() => vue.VNodeChild) | undefined;
                headers?: (() => vue.VNodeChild) | undefined;
                body?: (() => vue.VNodeChild) | undefined;
                tbody?: (() => vue.VNodeChild) | undefined;
                thead?: (() => vue.VNodeChild) | undefined;
                tfoot?: (() => vue.VNodeChild) | undefined;
                bottom?: (() => vue.VNodeChild) | undefined;
                'footer.prepend'?: (() => vue.VNodeChild) | undefined;
            };
            'v-slots'?: {
                [x: `item.${string}`]: false | ((args_0: {
                    index: number;
                    item: DataTableItem;
                    columns: InternalDataTableHeader[];
                    isExpanded: (item: DataTableItem) => boolean;
                    toggleExpand: (item: DataTableItem) => void;
                    isSelected: (items: DataTableItem[]) => boolean;
                    toggleSelect: (item: DataTableItem) => void;
                }) => vue.VNodeChild) | undefined;
                default?: false | (() => vue.VNodeChild) | undefined;
                item?: false | ((args_0: {
                    index: number;
                    item: DataTableItem;
                    columns: InternalDataTableHeader[];
                    isExpanded: (item: DataTableItem) => boolean;
                    toggleExpand: (item: DataTableItem) => void;
                    isSelected: (items: DataTableItem[]) => boolean;
                    toggleSelect: (item: DataTableItem) => void;
                }) => vue.VNodeChild) | undefined;
                loading?: false | (() => vue.VNodeChild) | undefined;
                'group-header'?: false | ((args_0: {
                    index: number;
                    item: GroupHeaderItem;
                    columns: InternalDataTableHeader[];
                    isExpanded: (item: DataTableItem) => boolean;
                    toggleExpand: (item: DataTableItem) => void;
                    isSelected: (items: DataTableItem[]) => boolean;
                    toggleSelect: (item: DataTableItem) => void;
                    toggleGroup: (group: GroupHeaderItem) => void;
                    isGroupOpen: (group: GroupHeaderItem) => boolean;
                }) => vue.VNodeChild) | undefined;
                'no-data'?: false | (() => vue.VNodeChild) | undefined;
                'expanded-row'?: false | ((args_0: {
                    index: number;
                    item: DataTableItem;
                    columns: InternalDataTableHeader[];
                    isExpanded: (item: DataTableItem) => boolean;
                    toggleExpand: (item: DataTableItem) => void;
                    isSelected: (items: DataTableItem[]) => boolean;
                    toggleSelect: (item: DataTableItem) => void;
                }) => vue.VNodeChild) | undefined;
                'item.data-table-select'?: false | ((args_0: {
                    index: number;
                    item: DataTableItem;
                    columns: InternalDataTableHeader[];
                    isExpanded: (item: DataTableItem) => boolean;
                    toggleExpand: (item: DataTableItem) => void;
                    isSelected: (items: DataTableItem[]) => boolean;
                    toggleSelect: (item: DataTableItem) => void;
                }) => vue.VNodeChild) | undefined;
                'item.data-table-expand'?: false | ((args_0: {
                    index: number;
                    item: DataTableItem;
                    columns: InternalDataTableHeader[];
                    isExpanded: (item: DataTableItem) => boolean;
                    toggleExpand: (item: DataTableItem) => void;
                    isSelected: (items: DataTableItem[]) => boolean;
                    toggleSelect: (item: DataTableItem) => void;
                }) => vue.VNodeChild) | undefined;
                colgroup?: false | ((args_0: InternalDataTableHeader) => vue.VNodeChild) | undefined;
                top?: false | (() => vue.VNodeChild) | undefined;
                headers?: false | (() => vue.VNodeChild) | undefined;
                body?: false | (() => vue.VNodeChild) | undefined;
                tbody?: false | (() => vue.VNodeChild) | undefined;
                thead?: false | (() => vue.VNodeChild) | undefined;
                tfoot?: false | (() => vue.VNodeChild) | undefined;
                bottom?: false | (() => vue.VNodeChild) | undefined;
                'footer.prepend'?: false | (() => vue.VNodeChild) | undefined;
            } | undefined;
        } & {
            [x: `v-slot:item.${string}`]: false | ((args_0: {
                index: number;
                item: DataTableItem;
                columns: InternalDataTableHeader[];
                isExpanded: (item: DataTableItem) => boolean;
                toggleExpand: (item: DataTableItem) => void;
                isSelected: (items: DataTableItem[]) => boolean;
                toggleSelect: (item: DataTableItem) => void;
            }) => vue.VNodeChild) | undefined;
            "v-slot:default"?: false | (() => vue.VNodeChild) | undefined;
            "v-slot:item"?: false | ((args_0: {
                index: number;
                item: DataTableItem;
                columns: InternalDataTableHeader[];
                isExpanded: (item: DataTableItem) => boolean;
                toggleExpand: (item: DataTableItem) => void;
                isSelected: (items: DataTableItem[]) => boolean;
                toggleSelect: (item: DataTableItem) => void;
            }) => vue.VNodeChild) | undefined;
            "v-slot:loading"?: false | (() => vue.VNodeChild) | undefined;
            "v-slot:group-header"?: false | ((args_0: {
                index: number;
                item: GroupHeaderItem;
                columns: InternalDataTableHeader[];
                isExpanded: (item: DataTableItem) => boolean;
                toggleExpand: (item: DataTableItem) => void;
                isSelected: (items: DataTableItem[]) => boolean;
                toggleSelect: (item: DataTableItem) => void;
                toggleGroup: (group: GroupHeaderItem) => void;
                isGroupOpen: (group: GroupHeaderItem) => boolean;
            }) => vue.VNodeChild) | undefined;
            "v-slot:no-data"?: false | (() => vue.VNodeChild) | undefined;
            "v-slot:expanded-row"?: false | ((args_0: {
                index: number;
                item: DataTableItem;
                columns: InternalDataTableHeader[];
                isExpanded: (item: DataTableItem) => boolean;
                toggleExpand: (item: DataTableItem) => void;
                isSelected: (items: DataTableItem[]) => boolean;
                toggleSelect: (item: DataTableItem) => void;
            }) => vue.VNodeChild) | undefined;
            "v-slot:item.data-table-select"?: false | ((args_0: {
                index: number;
                item: DataTableItem;
                columns: InternalDataTableHeader[];
                isExpanded: (item: DataTableItem) => boolean;
                toggleExpand: (item: DataTableItem) => void;
                isSelected: (items: DataTableItem[]) => boolean;
                toggleSelect: (item: DataTableItem) => void;
            }) => vue.VNodeChild) | undefined;
            "v-slot:item.data-table-expand"?: false | ((args_0: {
                index: number;
                item: DataTableItem;
                columns: InternalDataTableHeader[];
                isExpanded: (item: DataTableItem) => boolean;
                toggleExpand: (item: DataTableItem) => void;
                isSelected: (items: DataTableItem[]) => boolean;
                toggleSelect: (item: DataTableItem) => void;
            }) => vue.VNodeChild) | undefined;
            "v-slot:colgroup"?: false | ((args_0: InternalDataTableHeader) => vue.VNodeChild) | undefined;
            "v-slot:top"?: false | (() => vue.VNodeChild) | undefined;
            "v-slot:headers"?: false | (() => vue.VNodeChild) | undefined;
            "v-slot:body"?: false | (() => vue.VNodeChild) | undefined;
            "v-slot:tbody"?: false | (() => vue.VNodeChild) | undefined;
            "v-slot:thead"?: false | (() => vue.VNodeChild) | undefined;
            "v-slot:tfoot"?: false | (() => vue.VNodeChild) | undefined;
            "v-slot:bottom"?: false | (() => vue.VNodeChild) | undefined;
            "v-slot:footer.prepend"?: false | (() => vue.VNodeChild) | undefined;
        } & {
            "onUpdate:modelValue"?: ((value: any[]) => any) | undefined;
            "onUpdate:sortBy"?: ((value: any) => any) | undefined;
            "onUpdate:groupBy"?: ((value: any) => any) | undefined;
            "onUpdate:expanded"?: ((value: any) => any) | undefined;
            "onUpdate:page"?: ((value: number) => any) | undefined;
            "onUpdate:itemsPerPage"?: ((value: number) => any) | undefined;
            "onUpdate:options"?: ((value: any) => any) | undefined;
        } & vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, "expanded" | "page" | "headers" | "noDataText" | "sortBy" | "items" | "modelValue" | "itemTitle" | "itemValue" | "itemChildren" | "itemProps" | "returnObject" | "hideNoData" | "filterMode" | "noFilter" | "hover" | "fixedHeader" | "fixedFooter" | "multiSort" | "mustSort" | "groupBy" | "showSelect" | "expandOnClick" | "showExpand" | "itemsPerPage">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: vue.Slot | undefined;
        }>;
        $root: vue.ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, vue.ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null;
        $parent: vue.ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, vue.ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null;
        $emit: ((event: "update:modelValue", value: any[]) => void) & ((event: "update:options", value: any) => void) & ((event: "update:page", value: number) => void) & ((event: "update:itemsPerPage", value: number) => void) & ((event: "update:sortBy", value: any) => void) & ((event: "update:groupBy", value: any) => void) & ((event: "update:expanded", value: any) => void);
        $el: any;
        $options: vue.ComponentOptionsBase<{
            expanded: string[];
            page: string | number;
            headers: DataTableHeader[] | DataTableHeader[][];
            noDataText: string;
            sortBy: SortItem[];
            items: any[];
            modelValue: any[];
            itemTitle: SelectItemKey;
            itemValue: NonNullable<SelectItemKey>;
            itemChildren: SelectItemKey;
            itemProps: SelectItemKey;
            returnObject: boolean;
            hideNoData: boolean;
            filterMode: FilterMode;
            noFilter: boolean;
            hover: boolean;
            fixedHeader: boolean;
            fixedFooter: boolean;
            multiSort: boolean;
            mustSort: boolean;
            groupBy: SortItem[];
            showSelect: boolean;
            expandOnClick: boolean;
            showExpand: boolean;
            itemsPerPage: string | number;
        } & {
            search?: string | undefined;
            height?: string | number | undefined;
            width?: string | number | undefined;
            customFilter?: FilterFunction | undefined;
            customKeyFilter?: FilterKeyFunctions | undefined;
            filterKeys?: FilterKeys | undefined;
            'onClick:row'?: ((e: Event, value: {
                item: DataTableItem;
            }) => void) | undefined;
        } & {
            $children?: vue.VNodeChild | (() => vue.VNodeChild) | {
                [x: `item.${string}`]: ((args_0: {
                    index: number;
                    item: DataTableItem;
                    columns: InternalDataTableHeader[];
                    isExpanded: (item: DataTableItem) => boolean;
                    toggleExpand: (item: DataTableItem) => void;
                    isSelected: (items: DataTableItem[]) => boolean;
                    toggleSelect: (item: DataTableItem) => void;
                }) => vue.VNodeChild) | undefined;
                default?: (() => vue.VNodeChild) | undefined;
                item?: ((args_0: {
                    index: number;
                    item: DataTableItem;
                    columns: InternalDataTableHeader[];
                    isExpanded: (item: DataTableItem) => boolean;
                    toggleExpand: (item: DataTableItem) => void;
                    isSelected: (items: DataTableItem[]) => boolean;
                    toggleSelect: (item: DataTableItem) => void;
                }) => vue.VNodeChild) | undefined;
                loading?: (() => vue.VNodeChild) | undefined;
                'group-header'?: ((args_0: {
                    index: number;
                    item: GroupHeaderItem;
                    columns: InternalDataTableHeader[];
                    isExpanded: (item: DataTableItem) => boolean;
                    toggleExpand: (item: DataTableItem) => void;
                    isSelected: (items: DataTableItem[]) => boolean;
                    toggleSelect: (item: DataTableItem) => void;
                    toggleGroup: (group: GroupHeaderItem) => void;
                    isGroupOpen: (group: GroupHeaderItem) => boolean;
                }) => vue.VNodeChild) | undefined;
                'no-data'?: (() => vue.VNodeChild) | undefined;
                'expanded-row'?: ((args_0: {
                    index: number;
                    item: DataTableItem;
                    columns: InternalDataTableHeader[];
                    isExpanded: (item: DataTableItem) => boolean;
                    toggleExpand: (item: DataTableItem) => void;
                    isSelected: (items: DataTableItem[]) => boolean;
                    toggleSelect: (item: DataTableItem) => void;
                }) => vue.VNodeChild) | undefined;
                'item.data-table-select'?: ((args_0: {
                    index: number;
                    item: DataTableItem;
                    columns: InternalDataTableHeader[];
                    isExpanded: (item: DataTableItem) => boolean;
                    toggleExpand: (item: DataTableItem) => void;
                    isSelected: (items: DataTableItem[]) => boolean;
                    toggleSelect: (item: DataTableItem) => void;
                }) => vue.VNodeChild) | undefined;
                'item.data-table-expand'?: ((args_0: {
                    index: number;
                    item: DataTableItem;
                    columns: InternalDataTableHeader[];
                    isExpanded: (item: DataTableItem) => boolean;
                    toggleExpand: (item: DataTableItem) => void;
                    isSelected: (items: DataTableItem[]) => boolean;
                    toggleSelect: (item: DataTableItem) => void;
                }) => vue.VNodeChild) | undefined;
                colgroup?: ((args_0: InternalDataTableHeader) => vue.VNodeChild) | undefined;
                top?: (() => vue.VNodeChild) | undefined;
                headers?: (() => vue.VNodeChild) | undefined;
                body?: (() => vue.VNodeChild) | undefined;
                tbody?: (() => vue.VNodeChild) | undefined;
                thead?: (() => vue.VNodeChild) | undefined;
                tfoot?: (() => vue.VNodeChild) | undefined;
                bottom?: (() => vue.VNodeChild) | undefined;
                'footer.prepend'?: (() => vue.VNodeChild) | undefined;
            };
            'v-slots'?: {
                [x: `item.${string}`]: false | ((args_0: {
                    index: number;
                    item: DataTableItem;
                    columns: InternalDataTableHeader[];
                    isExpanded: (item: DataTableItem) => boolean;
                    toggleExpand: (item: DataTableItem) => void;
                    isSelected: (items: DataTableItem[]) => boolean;
                    toggleSelect: (item: DataTableItem) => void;
                }) => vue.VNodeChild) | undefined;
                default?: false | (() => vue.VNodeChild) | undefined;
                item?: false | ((args_0: {
                    index: number;
                    item: DataTableItem;
                    columns: InternalDataTableHeader[];
                    isExpanded: (item: DataTableItem) => boolean;
                    toggleExpand: (item: DataTableItem) => void;
                    isSelected: (items: DataTableItem[]) => boolean;
                    toggleSelect: (item: DataTableItem) => void;
                }) => vue.VNodeChild) | undefined;
                loading?: false | (() => vue.VNodeChild) | undefined;
                'group-header'?: false | ((args_0: {
                    index: number;
                    item: GroupHeaderItem;
                    columns: InternalDataTableHeader[];
                    isExpanded: (item: DataTableItem) => boolean;
                    toggleExpand: (item: DataTableItem) => void;
                    isSelected: (items: DataTableItem[]) => boolean;
                    toggleSelect: (item: DataTableItem) => void;
                    toggleGroup: (group: GroupHeaderItem) => void;
                    isGroupOpen: (group: GroupHeaderItem) => boolean;
                }) => vue.VNodeChild) | undefined;
                'no-data'?: false | (() => vue.VNodeChild) | undefined;
                'expanded-row'?: false | ((args_0: {
                    index: number;
                    item: DataTableItem;
                    columns: InternalDataTableHeader[];
                    isExpanded: (item: DataTableItem) => boolean;
                    toggleExpand: (item: DataTableItem) => void;
                    isSelected: (items: DataTableItem[]) => boolean;
                    toggleSelect: (item: DataTableItem) => void;
                }) => vue.VNodeChild) | undefined;
                'item.data-table-select'?: false | ((args_0: {
                    index: number;
                    item: DataTableItem;
                    columns: InternalDataTableHeader[];
                    isExpanded: (item: DataTableItem) => boolean;
                    toggleExpand: (item: DataTableItem) => void;
                    isSelected: (items: DataTableItem[]) => boolean;
                    toggleSelect: (item: DataTableItem) => void;
                }) => vue.VNodeChild) | undefined;
                'item.data-table-expand'?: false | ((args_0: {
                    index: number;
                    item: DataTableItem;
                    columns: InternalDataTableHeader[];
                    isExpanded: (item: DataTableItem) => boolean;
                    toggleExpand: (item: DataTableItem) => void;
                    isSelected: (items: DataTableItem[]) => boolean;
                    toggleSelect: (item: DataTableItem) => void;
                }) => vue.VNodeChild) | undefined;
                colgroup?: false | ((args_0: InternalDataTableHeader) => vue.VNodeChild) | undefined;
                top?: false | (() => vue.VNodeChild) | undefined;
                headers?: false | (() => vue.VNodeChild) | undefined;
                body?: false | (() => vue.VNodeChild) | undefined;
                tbody?: false | (() => vue.VNodeChild) | undefined;
                thead?: false | (() => vue.VNodeChild) | undefined;
                tfoot?: false | (() => vue.VNodeChild) | undefined;
                bottom?: false | (() => vue.VNodeChild) | undefined;
                'footer.prepend'?: false | (() => vue.VNodeChild) | undefined;
            } | undefined;
        } & {
            [x: `v-slot:item.${string}`]: false | ((args_0: {
                index: number;
                item: DataTableItem;
                columns: InternalDataTableHeader[];
                isExpanded: (item: DataTableItem) => boolean;
                toggleExpand: (item: DataTableItem) => void;
                isSelected: (items: DataTableItem[]) => boolean;
                toggleSelect: (item: DataTableItem) => void;
            }) => vue.VNodeChild) | undefined;
            "v-slot:default"?: false | (() => vue.VNodeChild) | undefined;
            "v-slot:item"?: false | ((args_0: {
                index: number;
                item: DataTableItem;
                columns: InternalDataTableHeader[];
                isExpanded: (item: DataTableItem) => boolean;
                toggleExpand: (item: DataTableItem) => void;
                isSelected: (items: DataTableItem[]) => boolean;
                toggleSelect: (item: DataTableItem) => void;
            }) => vue.VNodeChild) | undefined;
            "v-slot:loading"?: false | (() => vue.VNodeChild) | undefined;
            "v-slot:group-header"?: false | ((args_0: {
                index: number;
                item: GroupHeaderItem;
                columns: InternalDataTableHeader[];
                isExpanded: (item: DataTableItem) => boolean;
                toggleExpand: (item: DataTableItem) => void;
                isSelected: (items: DataTableItem[]) => boolean;
                toggleSelect: (item: DataTableItem) => void;
                toggleGroup: (group: GroupHeaderItem) => void;
                isGroupOpen: (group: GroupHeaderItem) => boolean;
            }) => vue.VNodeChild) | undefined;
            "v-slot:no-data"?: false | (() => vue.VNodeChild) | undefined;
            "v-slot:expanded-row"?: false | ((args_0: {
                index: number;
                item: DataTableItem;
                columns: InternalDataTableHeader[];
                isExpanded: (item: DataTableItem) => boolean;
                toggleExpand: (item: DataTableItem) => void;
                isSelected: (items: DataTableItem[]) => boolean;
                toggleSelect: (item: DataTableItem) => void;
            }) => vue.VNodeChild) | undefined;
            "v-slot:item.data-table-select"?: false | ((args_0: {
                index: number;
                item: DataTableItem;
                columns: InternalDataTableHeader[];
                isExpanded: (item: DataTableItem) => boolean;
                toggleExpand: (item: DataTableItem) => void;
                isSelected: (items: DataTableItem[]) => boolean;
                toggleSelect: (item: DataTableItem) => void;
            }) => vue.VNodeChild) | undefined;
            "v-slot:item.data-table-expand"?: false | ((args_0: {
                index: number;
                item: DataTableItem;
                columns: InternalDataTableHeader[];
                isExpanded: (item: DataTableItem) => boolean;
                toggleExpand: (item: DataTableItem) => void;
                isSelected: (items: DataTableItem[]) => boolean;
                toggleSelect: (item: DataTableItem) => void;
            }) => vue.VNodeChild) | undefined;
            "v-slot:colgroup"?: false | ((args_0: InternalDataTableHeader) => vue.VNodeChild) | undefined;
            "v-slot:top"?: false | (() => vue.VNodeChild) | undefined;
            "v-slot:headers"?: false | (() => vue.VNodeChild) | undefined;
            "v-slot:body"?: false | (() => vue.VNodeChild) | undefined;
            "v-slot:tbody"?: false | (() => vue.VNodeChild) | undefined;
            "v-slot:thead"?: false | (() => vue.VNodeChild) | undefined;
            "v-slot:tfoot"?: false | (() => vue.VNodeChild) | undefined;
            "v-slot:bottom"?: false | (() => vue.VNodeChild) | undefined;
            "v-slot:footer.prepend"?: false | (() => vue.VNodeChild) | undefined;
        } & {
            "onUpdate:modelValue"?: ((value: any[]) => any) | undefined;
            "onUpdate:sortBy"?: ((value: any) => any) | undefined;
            "onUpdate:groupBy"?: ((value: any) => any) | undefined;
            "onUpdate:expanded"?: ((value: any) => any) | undefined;
            "onUpdate:page"?: ((value: number) => any) | undefined;
            "onUpdate:itemsPerPage"?: ((value: number) => any) | undefined;
            "onUpdate:options"?: ((value: any) => any) | undefined;
        }, {}, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, {
            'update:modelValue': (value: any[]) => true;
            'update:page': (value: number) => true;
            'update:itemsPerPage': (value: number) => true;
            'update:sortBy': (value: any) => true;
            'update:options': (value: any) => true;
            'update:groupBy': (value: any) => true;
            'update:expanded': (value: any) => true;
        }, string, {
            expanded: string[];
            page: string | number;
            headers: DataTableHeader[] | DataTableHeader[][];
            noDataText: string;
            sortBy: SortItem[];
            items: any[];
            modelValue: any[];
            itemTitle: SelectItemKey;
            itemValue: NonNullable<SelectItemKey>;
            itemChildren: SelectItemKey;
            itemProps: SelectItemKey;
            returnObject: boolean;
            hideNoData: boolean;
            filterMode: FilterMode;
            noFilter: boolean;
            hover: boolean;
            fixedHeader: boolean;
            fixedFooter: boolean;
            multiSort: boolean;
            mustSort: boolean;
            groupBy: SortItem[];
            showSelect: boolean;
            expandOnClick: boolean;
            showExpand: boolean;
            itemsPerPage: string | number;
        }, {}, string> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: vue.DebuggerEvent) => void) | ((e: vue.DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: vue.DebuggerEvent) => void) | ((e: vue.DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: vue.ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, vue.ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null, info: string) => boolean | void) | ((err: unknown, instance: vue.ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, vue.ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof vue.nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: vue.WatchOptions<boolean> | undefined): vue.WatchStopHandle;
    } & {
        expanded: string[];
        page: string | number;
        headers: DataTableHeader[] | DataTableHeader[][];
        noDataText: string;
        sortBy: SortItem[];
        items: any[];
        modelValue: any[];
        itemTitle: SelectItemKey;
        itemValue: NonNullable<SelectItemKey>;
        itemChildren: SelectItemKey;
        itemProps: SelectItemKey;
        returnObject: boolean;
        hideNoData: boolean;
        filterMode: FilterMode;
        noFilter: boolean;
        hover: boolean;
        fixedHeader: boolean;
        fixedFooter: boolean;
        multiSort: boolean;
        mustSort: boolean;
        groupBy: SortItem[];
        showSelect: boolean;
        expandOnClick: boolean;
        showExpand: boolean;
        itemsPerPage: string | number;
    } & {
        search?: string | undefined;
        height?: string | number | undefined;
        width?: string | number | undefined;
        customFilter?: FilterFunction | undefined;
        customKeyFilter?: FilterKeyFunctions | undefined;
        filterKeys?: FilterKeys | undefined;
        'onClick:row'?: ((e: Event, value: {
            item: DataTableItem;
        }) => void) | undefined;
    } & {
        $children?: vue.VNodeChild | (() => vue.VNodeChild) | {
            [x: `item.${string}`]: ((args_0: {
                index: number;
                item: DataTableItem;
                columns: InternalDataTableHeader[];
                isExpanded: (item: DataTableItem) => boolean;
                toggleExpand: (item: DataTableItem) => void;
                isSelected: (items: DataTableItem[]) => boolean;
                toggleSelect: (item: DataTableItem) => void;
            }) => vue.VNodeChild) | undefined;
            default?: (() => vue.VNodeChild) | undefined;
            item?: ((args_0: {
                index: number;
                item: DataTableItem;
                columns: InternalDataTableHeader[];
                isExpanded: (item: DataTableItem) => boolean;
                toggleExpand: (item: DataTableItem) => void;
                isSelected: (items: DataTableItem[]) => boolean;
                toggleSelect: (item: DataTableItem) => void;
            }) => vue.VNodeChild) | undefined;
            loading?: (() => vue.VNodeChild) | undefined;
            'group-header'?: ((args_0: {
                index: number;
                item: GroupHeaderItem;
                columns: InternalDataTableHeader[];
                isExpanded: (item: DataTableItem) => boolean;
                toggleExpand: (item: DataTableItem) => void;
                isSelected: (items: DataTableItem[]) => boolean;
                toggleSelect: (item: DataTableItem) => void;
                toggleGroup: (group: GroupHeaderItem) => void;
                isGroupOpen: (group: GroupHeaderItem) => boolean;
            }) => vue.VNodeChild) | undefined;
            'no-data'?: (() => vue.VNodeChild) | undefined;
            'expanded-row'?: ((args_0: {
                index: number;
                item: DataTableItem;
                columns: InternalDataTableHeader[];
                isExpanded: (item: DataTableItem) => boolean;
                toggleExpand: (item: DataTableItem) => void;
                isSelected: (items: DataTableItem[]) => boolean;
                toggleSelect: (item: DataTableItem) => void;
            }) => vue.VNodeChild) | undefined;
            'item.data-table-select'?: ((args_0: {
                index: number;
                item: DataTableItem;
                columns: InternalDataTableHeader[];
                isExpanded: (item: DataTableItem) => boolean;
                toggleExpand: (item: DataTableItem) => void;
                isSelected: (items: DataTableItem[]) => boolean;
                toggleSelect: (item: DataTableItem) => void;
            }) => vue.VNodeChild) | undefined;
            'item.data-table-expand'?: ((args_0: {
                index: number;
                item: DataTableItem;
                columns: InternalDataTableHeader[];
                isExpanded: (item: DataTableItem) => boolean;
                toggleExpand: (item: DataTableItem) => void;
                isSelected: (items: DataTableItem[]) => boolean;
                toggleSelect: (item: DataTableItem) => void;
            }) => vue.VNodeChild) | undefined;
            colgroup?: ((args_0: InternalDataTableHeader) => vue.VNodeChild) | undefined;
            top?: (() => vue.VNodeChild) | undefined;
            headers?: (() => vue.VNodeChild) | undefined;
            body?: (() => vue.VNodeChild) | undefined;
            tbody?: (() => vue.VNodeChild) | undefined;
            thead?: (() => vue.VNodeChild) | undefined;
            tfoot?: (() => vue.VNodeChild) | undefined;
            bottom?: (() => vue.VNodeChild) | undefined;
            'footer.prepend'?: (() => vue.VNodeChild) | undefined;
        };
        'v-slots'?: {
            [x: `item.${string}`]: false | ((args_0: {
                index: number;
                item: DataTableItem;
                columns: InternalDataTableHeader[];
                isExpanded: (item: DataTableItem) => boolean;
                toggleExpand: (item: DataTableItem) => void;
                isSelected: (items: DataTableItem[]) => boolean;
                toggleSelect: (item: DataTableItem) => void;
            }) => vue.VNodeChild) | undefined;
            default?: false | (() => vue.VNodeChild) | undefined;
            item?: false | ((args_0: {
                index: number;
                item: DataTableItem;
                columns: InternalDataTableHeader[];
                isExpanded: (item: DataTableItem) => boolean;
                toggleExpand: (item: DataTableItem) => void;
                isSelected: (items: DataTableItem[]) => boolean;
                toggleSelect: (item: DataTableItem) => void;
            }) => vue.VNodeChild) | undefined;
            loading?: false | (() => vue.VNodeChild) | undefined;
            'group-header'?: false | ((args_0: {
                index: number;
                item: GroupHeaderItem;
                columns: InternalDataTableHeader[];
                isExpanded: (item: DataTableItem) => boolean;
                toggleExpand: (item: DataTableItem) => void;
                isSelected: (items: DataTableItem[]) => boolean;
                toggleSelect: (item: DataTableItem) => void;
                toggleGroup: (group: GroupHeaderItem) => void;
                isGroupOpen: (group: GroupHeaderItem) => boolean;
            }) => vue.VNodeChild) | undefined;
            'no-data'?: false | (() => vue.VNodeChild) | undefined;
            'expanded-row'?: false | ((args_0: {
                index: number;
                item: DataTableItem;
                columns: InternalDataTableHeader[];
                isExpanded: (item: DataTableItem) => boolean;
                toggleExpand: (item: DataTableItem) => void;
                isSelected: (items: DataTableItem[]) => boolean;
                toggleSelect: (item: DataTableItem) => void;
            }) => vue.VNodeChild) | undefined;
            'item.data-table-select'?: false | ((args_0: {
                index: number;
                item: DataTableItem;
                columns: InternalDataTableHeader[];
                isExpanded: (item: DataTableItem) => boolean;
                toggleExpand: (item: DataTableItem) => void;
                isSelected: (items: DataTableItem[]) => boolean;
                toggleSelect: (item: DataTableItem) => void;
            }) => vue.VNodeChild) | undefined;
            'item.data-table-expand'?: false | ((args_0: {
                index: number;
                item: DataTableItem;
                columns: InternalDataTableHeader[];
                isExpanded: (item: DataTableItem) => boolean;
                toggleExpand: (item: DataTableItem) => void;
                isSelected: (items: DataTableItem[]) => boolean;
                toggleSelect: (item: DataTableItem) => void;
            }) => vue.VNodeChild) | undefined;
            colgroup?: false | ((args_0: InternalDataTableHeader) => vue.VNodeChild) | undefined;
            top?: false | (() => vue.VNodeChild) | undefined;
            headers?: false | (() => vue.VNodeChild) | undefined;
            body?: false | (() => vue.VNodeChild) | undefined;
            tbody?: false | (() => vue.VNodeChild) | undefined;
            thead?: false | (() => vue.VNodeChild) | undefined;
            tfoot?: false | (() => vue.VNodeChild) | undefined;
            bottom?: false | (() => vue.VNodeChild) | undefined;
            'footer.prepend'?: false | (() => vue.VNodeChild) | undefined;
        } | undefined;
    } & {
        [x: `v-slot:item.${string}`]: false | ((args_0: {
            index: number;
            item: DataTableItem;
            columns: InternalDataTableHeader[];
            isExpanded: (item: DataTableItem) => boolean;
            toggleExpand: (item: DataTableItem) => void;
            isSelected: (items: DataTableItem[]) => boolean;
            toggleSelect: (item: DataTableItem) => void;
        }) => vue.VNodeChild) | undefined;
        "v-slot:default"?: false | (() => vue.VNodeChild) | undefined;
        "v-slot:item"?: false | ((args_0: {
            index: number;
            item: DataTableItem;
            columns: InternalDataTableHeader[];
            isExpanded: (item: DataTableItem) => boolean;
            toggleExpand: (item: DataTableItem) => void;
            isSelected: (items: DataTableItem[]) => boolean;
            toggleSelect: (item: DataTableItem) => void;
        }) => vue.VNodeChild) | undefined;
        "v-slot:loading"?: false | (() => vue.VNodeChild) | undefined;
        "v-slot:group-header"?: false | ((args_0: {
            index: number;
            item: GroupHeaderItem;
            columns: InternalDataTableHeader[];
            isExpanded: (item: DataTableItem) => boolean;
            toggleExpand: (item: DataTableItem) => void;
            isSelected: (items: DataTableItem[]) => boolean;
            toggleSelect: (item: DataTableItem) => void;
            toggleGroup: (group: GroupHeaderItem) => void;
            isGroupOpen: (group: GroupHeaderItem) => boolean;
        }) => vue.VNodeChild) | undefined;
        "v-slot:no-data"?: false | (() => vue.VNodeChild) | undefined;
        "v-slot:expanded-row"?: false | ((args_0: {
            index: number;
            item: DataTableItem;
            columns: InternalDataTableHeader[];
            isExpanded: (item: DataTableItem) => boolean;
            toggleExpand: (item: DataTableItem) => void;
            isSelected: (items: DataTableItem[]) => boolean;
            toggleSelect: (item: DataTableItem) => void;
        }) => vue.VNodeChild) | undefined;
        "v-slot:item.data-table-select"?: false | ((args_0: {
            index: number;
            item: DataTableItem;
            columns: InternalDataTableHeader[];
            isExpanded: (item: DataTableItem) => boolean;
            toggleExpand: (item: DataTableItem) => void;
            isSelected: (items: DataTableItem[]) => boolean;
            toggleSelect: (item: DataTableItem) => void;
        }) => vue.VNodeChild) | undefined;
        "v-slot:item.data-table-expand"?: false | ((args_0: {
            index: number;
            item: DataTableItem;
            columns: InternalDataTableHeader[];
            isExpanded: (item: DataTableItem) => boolean;
            toggleExpand: (item: DataTableItem) => void;
            isSelected: (items: DataTableItem[]) => boolean;
            toggleSelect: (item: DataTableItem) => void;
        }) => vue.VNodeChild) | undefined;
        "v-slot:colgroup"?: false | ((args_0: InternalDataTableHeader) => vue.VNodeChild) | undefined;
        "v-slot:top"?: false | (() => vue.VNodeChild) | undefined;
        "v-slot:headers"?: false | (() => vue.VNodeChild) | undefined;
        "v-slot:body"?: false | (() => vue.VNodeChild) | undefined;
        "v-slot:tbody"?: false | (() => vue.VNodeChild) | undefined;
        "v-slot:thead"?: false | (() => vue.VNodeChild) | undefined;
        "v-slot:tfoot"?: false | (() => vue.VNodeChild) | undefined;
        "v-slot:bottom"?: false | (() => vue.VNodeChild) | undefined;
        "v-slot:footer.prepend"?: false | (() => vue.VNodeChild) | undefined;
    } & {
        "onUpdate:modelValue"?: ((value: any[]) => any) | undefined;
        "onUpdate:sortBy"?: ((value: any) => any) | undefined;
        "onUpdate:groupBy"?: ((value: any) => any) | undefined;
        "onUpdate:expanded"?: ((value: any) => any) | undefined;
        "onUpdate:page"?: ((value: number) => any) | undefined;
        "onUpdate:itemsPerPage"?: ((value: number) => any) | undefined;
        "onUpdate:options"?: ((value: any) => any) | undefined;
    } & vue.ShallowUnwrapRef<{}> & {} & vue.ComponentCustomProperties & {};
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & vue.ComponentOptionsBase<{
    expanded: string[];
    page: string | number;
    headers: DataTableHeader[] | DataTableHeader[][];
    noDataText: string;
    sortBy: SortItem[];
    items: any[];
    modelValue: any[];
    itemTitle: SelectItemKey;
    itemValue: NonNullable<SelectItemKey>;
    itemChildren: SelectItemKey;
    itemProps: SelectItemKey;
    returnObject: boolean;
    hideNoData: boolean;
    filterMode: FilterMode;
    noFilter: boolean;
    hover: boolean;
    fixedHeader: boolean;
    fixedFooter: boolean;
    multiSort: boolean;
    mustSort: boolean;
    groupBy: SortItem[];
    showSelect: boolean;
    expandOnClick: boolean;
    showExpand: boolean;
    itemsPerPage: string | number;
} & {
    search?: string | undefined;
    height?: string | number | undefined;
    width?: string | number | undefined;
    customFilter?: FilterFunction | undefined;
    customKeyFilter?: FilterKeyFunctions | undefined;
    filterKeys?: FilterKeys | undefined;
    'onClick:row'?: ((e: Event, value: {
        item: DataTableItem;
    }) => void) | undefined;
} & {
    $children?: vue.VNodeChild | (() => vue.VNodeChild) | {
        [x: `item.${string}`]: ((args_0: {
            index: number;
            item: DataTableItem;
            columns: InternalDataTableHeader[];
            isExpanded: (item: DataTableItem) => boolean;
            toggleExpand: (item: DataTableItem) => void;
            isSelected: (items: DataTableItem[]) => boolean;
            toggleSelect: (item: DataTableItem) => void;
        }) => vue.VNodeChild) | undefined;
        default?: (() => vue.VNodeChild) | undefined;
        item?: ((args_0: {
            index: number;
            item: DataTableItem;
            columns: InternalDataTableHeader[];
            isExpanded: (item: DataTableItem) => boolean;
            toggleExpand: (item: DataTableItem) => void;
            isSelected: (items: DataTableItem[]) => boolean;
            toggleSelect: (item: DataTableItem) => void;
        }) => vue.VNodeChild) | undefined;
        loading?: (() => vue.VNodeChild) | undefined;
        'group-header'?: ((args_0: {
            index: number;
            item: GroupHeaderItem;
            columns: InternalDataTableHeader[];
            isExpanded: (item: DataTableItem) => boolean;
            toggleExpand: (item: DataTableItem) => void;
            isSelected: (items: DataTableItem[]) => boolean;
            toggleSelect: (item: DataTableItem) => void;
            toggleGroup: (group: GroupHeaderItem) => void;
            isGroupOpen: (group: GroupHeaderItem) => boolean;
        }) => vue.VNodeChild) | undefined;
        'no-data'?: (() => vue.VNodeChild) | undefined;
        'expanded-row'?: ((args_0: {
            index: number;
            item: DataTableItem;
            columns: InternalDataTableHeader[];
            isExpanded: (item: DataTableItem) => boolean;
            toggleExpand: (item: DataTableItem) => void;
            isSelected: (items: DataTableItem[]) => boolean;
            toggleSelect: (item: DataTableItem) => void;
        }) => vue.VNodeChild) | undefined;
        'item.data-table-select'?: ((args_0: {
            index: number;
            item: DataTableItem;
            columns: InternalDataTableHeader[];
            isExpanded: (item: DataTableItem) => boolean;
            toggleExpand: (item: DataTableItem) => void;
            isSelected: (items: DataTableItem[]) => boolean;
            toggleSelect: (item: DataTableItem) => void;
        }) => vue.VNodeChild) | undefined;
        'item.data-table-expand'?: ((args_0: {
            index: number;
            item: DataTableItem;
            columns: InternalDataTableHeader[];
            isExpanded: (item: DataTableItem) => boolean;
            toggleExpand: (item: DataTableItem) => void;
            isSelected: (items: DataTableItem[]) => boolean;
            toggleSelect: (item: DataTableItem) => void;
        }) => vue.VNodeChild) | undefined;
        colgroup?: ((args_0: InternalDataTableHeader) => vue.VNodeChild) | undefined;
        top?: (() => vue.VNodeChild) | undefined;
        headers?: (() => vue.VNodeChild) | undefined;
        body?: (() => vue.VNodeChild) | undefined;
        tbody?: (() => vue.VNodeChild) | undefined;
        thead?: (() => vue.VNodeChild) | undefined;
        tfoot?: (() => vue.VNodeChild) | undefined;
        bottom?: (() => vue.VNodeChild) | undefined;
        'footer.prepend'?: (() => vue.VNodeChild) | undefined;
    };
    'v-slots'?: {
        [x: `item.${string}`]: false | ((args_0: {
            index: number;
            item: DataTableItem;
            columns: InternalDataTableHeader[];
            isExpanded: (item: DataTableItem) => boolean;
            toggleExpand: (item: DataTableItem) => void;
            isSelected: (items: DataTableItem[]) => boolean;
            toggleSelect: (item: DataTableItem) => void;
        }) => vue.VNodeChild) | undefined;
        default?: false | (() => vue.VNodeChild) | undefined;
        item?: false | ((args_0: {
            index: number;
            item: DataTableItem;
            columns: InternalDataTableHeader[];
            isExpanded: (item: DataTableItem) => boolean;
            toggleExpand: (item: DataTableItem) => void;
            isSelected: (items: DataTableItem[]) => boolean;
            toggleSelect: (item: DataTableItem) => void;
        }) => vue.VNodeChild) | undefined;
        loading?: false | (() => vue.VNodeChild) | undefined;
        'group-header'?: false | ((args_0: {
            index: number;
            item: GroupHeaderItem;
            columns: InternalDataTableHeader[];
            isExpanded: (item: DataTableItem) => boolean;
            toggleExpand: (item: DataTableItem) => void;
            isSelected: (items: DataTableItem[]) => boolean;
            toggleSelect: (item: DataTableItem) => void;
            toggleGroup: (group: GroupHeaderItem) => void;
            isGroupOpen: (group: GroupHeaderItem) => boolean;
        }) => vue.VNodeChild) | undefined;
        'no-data'?: false | (() => vue.VNodeChild) | undefined;
        'expanded-row'?: false | ((args_0: {
            index: number;
            item: DataTableItem;
            columns: InternalDataTableHeader[];
            isExpanded: (item: DataTableItem) => boolean;
            toggleExpand: (item: DataTableItem) => void;
            isSelected: (items: DataTableItem[]) => boolean;
            toggleSelect: (item: DataTableItem) => void;
        }) => vue.VNodeChild) | undefined;
        'item.data-table-select'?: false | ((args_0: {
            index: number;
            item: DataTableItem;
            columns: InternalDataTableHeader[];
            isExpanded: (item: DataTableItem) => boolean;
            toggleExpand: (item: DataTableItem) => void;
            isSelected: (items: DataTableItem[]) => boolean;
            toggleSelect: (item: DataTableItem) => void;
        }) => vue.VNodeChild) | undefined;
        'item.data-table-expand'?: false | ((args_0: {
            index: number;
            item: DataTableItem;
            columns: InternalDataTableHeader[];
            isExpanded: (item: DataTableItem) => boolean;
            toggleExpand: (item: DataTableItem) => void;
            isSelected: (items: DataTableItem[]) => boolean;
            toggleSelect: (item: DataTableItem) => void;
        }) => vue.VNodeChild) | undefined;
        colgroup?: false | ((args_0: InternalDataTableHeader) => vue.VNodeChild) | undefined;
        top?: false | (() => vue.VNodeChild) | undefined;
        headers?: false | (() => vue.VNodeChild) | undefined;
        body?: false | (() => vue.VNodeChild) | undefined;
        tbody?: false | (() => vue.VNodeChild) | undefined;
        thead?: false | (() => vue.VNodeChild) | undefined;
        tfoot?: false | (() => vue.VNodeChild) | undefined;
        bottom?: false | (() => vue.VNodeChild) | undefined;
        'footer.prepend'?: false | (() => vue.VNodeChild) | undefined;
    } | undefined;
} & {
    [x: `v-slot:item.${string}`]: false | ((args_0: {
        index: number;
        item: DataTableItem;
        columns: InternalDataTableHeader[];
        isExpanded: (item: DataTableItem) => boolean;
        toggleExpand: (item: DataTableItem) => void;
        isSelected: (items: DataTableItem[]) => boolean;
        toggleSelect: (item: DataTableItem) => void;
    }) => vue.VNodeChild) | undefined;
    "v-slot:default"?: false | (() => vue.VNodeChild) | undefined;
    "v-slot:item"?: false | ((args_0: {
        index: number;
        item: DataTableItem;
        columns: InternalDataTableHeader[];
        isExpanded: (item: DataTableItem) => boolean;
        toggleExpand: (item: DataTableItem) => void;
        isSelected: (items: DataTableItem[]) => boolean;
        toggleSelect: (item: DataTableItem) => void;
    }) => vue.VNodeChild) | undefined;
    "v-slot:loading"?: false | (() => vue.VNodeChild) | undefined;
    "v-slot:group-header"?: false | ((args_0: {
        index: number;
        item: GroupHeaderItem;
        columns: InternalDataTableHeader[];
        isExpanded: (item: DataTableItem) => boolean;
        toggleExpand: (item: DataTableItem) => void;
        isSelected: (items: DataTableItem[]) => boolean;
        toggleSelect: (item: DataTableItem) => void;
        toggleGroup: (group: GroupHeaderItem) => void;
        isGroupOpen: (group: GroupHeaderItem) => boolean;
    }) => vue.VNodeChild) | undefined;
    "v-slot:no-data"?: false | (() => vue.VNodeChild) | undefined;
    "v-slot:expanded-row"?: false | ((args_0: {
        index: number;
        item: DataTableItem;
        columns: InternalDataTableHeader[];
        isExpanded: (item: DataTableItem) => boolean;
        toggleExpand: (item: DataTableItem) => void;
        isSelected: (items: DataTableItem[]) => boolean;
        toggleSelect: (item: DataTableItem) => void;
    }) => vue.VNodeChild) | undefined;
    "v-slot:item.data-table-select"?: false | ((args_0: {
        index: number;
        item: DataTableItem;
        columns: InternalDataTableHeader[];
        isExpanded: (item: DataTableItem) => boolean;
        toggleExpand: (item: DataTableItem) => void;
        isSelected: (items: DataTableItem[]) => boolean;
        toggleSelect: (item: DataTableItem) => void;
    }) => vue.VNodeChild) | undefined;
    "v-slot:item.data-table-expand"?: false | ((args_0: {
        index: number;
        item: DataTableItem;
        columns: InternalDataTableHeader[];
        isExpanded: (item: DataTableItem) => boolean;
        toggleExpand: (item: DataTableItem) => void;
        isSelected: (items: DataTableItem[]) => boolean;
        toggleSelect: (item: DataTableItem) => void;
    }) => vue.VNodeChild) | undefined;
    "v-slot:colgroup"?: false | ((args_0: InternalDataTableHeader) => vue.VNodeChild) | undefined;
    "v-slot:top"?: false | (() => vue.VNodeChild) | undefined;
    "v-slot:headers"?: false | (() => vue.VNodeChild) | undefined;
    "v-slot:body"?: false | (() => vue.VNodeChild) | undefined;
    "v-slot:tbody"?: false | (() => vue.VNodeChild) | undefined;
    "v-slot:thead"?: false | (() => vue.VNodeChild) | undefined;
    "v-slot:tfoot"?: false | (() => vue.VNodeChild) | undefined;
    "v-slot:bottom"?: false | (() => vue.VNodeChild) | undefined;
    "v-slot:footer.prepend"?: false | (() => vue.VNodeChild) | undefined;
} & {
    "onUpdate:modelValue"?: ((value: any[]) => any) | undefined;
    "onUpdate:sortBy"?: ((value: any) => any) | undefined;
    "onUpdate:groupBy"?: ((value: any) => any) | undefined;
    "onUpdate:expanded"?: ((value: any) => any) | undefined;
    "onUpdate:page"?: ((value: number) => any) | undefined;
    "onUpdate:itemsPerPage"?: ((value: number) => any) | undefined;
    "onUpdate:options"?: ((value: any) => any) | undefined;
}, {}, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, {
    'update:modelValue': (value: any[]) => true;
    'update:page': (value: number) => true;
    'update:itemsPerPage': (value: number) => true;
    'update:sortBy': (value: any) => true;
    'update:options': (value: any) => true;
    'update:groupBy': (value: any) => true;
    'update:expanded': (value: any) => true;
}, string, {
    expanded: string[];
    page: string | number;
    headers: DataTableHeader[] | DataTableHeader[][];
    noDataText: string;
    sortBy: SortItem[];
    items: any[];
    modelValue: any[];
    itemTitle: SelectItemKey;
    itemValue: NonNullable<SelectItemKey>;
    itemChildren: SelectItemKey;
    itemProps: SelectItemKey;
    returnObject: boolean;
    hideNoData: boolean;
    filterMode: FilterMode;
    noFilter: boolean;
    hover: boolean;
    fixedHeader: boolean;
    fixedFooter: boolean;
    multiSort: boolean;
    mustSort: boolean;
    groupBy: SortItem[];
    showSelect: boolean;
    expandOnClick: boolean;
    showExpand: boolean;
    itemsPerPage: string | number;
}, {}, string> & vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps & FilterPropsOptions<{
    customFilter: PropType<FilterFunction>;
    customKeyFilter: PropType<FilterKeyFunctions>;
    filterKeys: PropType<FilterKeys>;
    filterMode: {
        type: PropType<FilterMode>;
        default: string;
    };
    noFilter: BooleanConstructor;
    page: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    itemsPerPage: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    sortBy: {
        type: PropType<SortItem[]>;
        default: () => never[];
    };
    multiSort: BooleanConstructor;
    mustSort: BooleanConstructor;
    showSelect: BooleanConstructor;
    modelValue: {
        type: PropType<any[]>;
        default: () => never[];
    };
    groupBy: {
        type: PropType<SortItem[]>;
        default: () => never[];
    };
    expandOnClick: BooleanConstructor;
    showExpand: BooleanConstructor;
    expanded: {
        type: PropType<string[]>;
        default: () => never[];
    };
    hideNoData: BooleanConstructor;
    hover: BooleanConstructor;
    noDataText: {
        type: StringConstructor;
        default: string;
    };
    height: (StringConstructor | NumberConstructor)[];
    width: (StringConstructor | NumberConstructor)[];
    fixedHeader: BooleanConstructor;
    fixedFooter: BooleanConstructor;
    'onClick:row': PropType<(e: Event, value: {
        item: DataTableItem;
    }) => void>;
    search: StringConstructor;
    headers: {
        type: PropType<DataTableHeader[] | DataTableHeader[][]>;
        default: () => never[];
    };
    items: {
        type: PropType<any[]>;
        default: () => never[];
    };
    itemTitle: {
        type: PropType<SelectItemKey>;
        default: string;
    };
    itemValue: Omit<{
        type: PropType<SelectItemKey>;
        default: string;
    }, "type" | "default"> & {
        type: PropType<NonNullable<SelectItemKey>>;
        default: NonNullable<SelectItemKey>;
    };
    itemChildren: {
        type: PropType<SelectItemKey>;
        default: string;
    };
    itemProps: {
        type: PropType<SelectItemKey>;
        default: string;
    };
    returnObject: BooleanConstructor;
}, vue.ExtractPropTypes<{
    customFilter: PropType<FilterFunction>;
    customKeyFilter: PropType<FilterKeyFunctions>;
    filterKeys: PropType<FilterKeys>;
    filterMode: {
        type: PropType<FilterMode>;
        default: string;
    };
    noFilter: BooleanConstructor;
    page: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    itemsPerPage: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    sortBy: {
        type: PropType<SortItem[]>;
        default: () => never[];
    };
    multiSort: BooleanConstructor;
    mustSort: BooleanConstructor;
    showSelect: BooleanConstructor;
    modelValue: {
        type: PropType<any[]>;
        default: () => never[];
    };
    groupBy: {
        type: PropType<SortItem[]>;
        default: () => never[];
    };
    expandOnClick: BooleanConstructor;
    showExpand: BooleanConstructor;
    expanded: {
        type: PropType<string[]>;
        default: () => never[];
    };
    hideNoData: BooleanConstructor;
    hover: BooleanConstructor;
    noDataText: {
        type: StringConstructor;
        default: string;
    };
    height: (StringConstructor | NumberConstructor)[];
    width: (StringConstructor | NumberConstructor)[];
    fixedHeader: BooleanConstructor;
    fixedFooter: BooleanConstructor;
    'onClick:row': PropType<(e: Event, value: {
        item: DataTableItem;
    }) => void>;
    search: StringConstructor;
    headers: {
        type: PropType<DataTableHeader[] | DataTableHeader[][]>;
        default: () => never[];
    };
    items: {
        type: PropType<any[]>;
        default: () => never[];
    };
    itemTitle: {
        type: PropType<SelectItemKey>;
        default: string;
    };
    itemValue: Omit<{
        type: PropType<SelectItemKey>;
        default: string;
    }, "type" | "default"> & {
        type: PropType<NonNullable<SelectItemKey>>;
        default: NonNullable<SelectItemKey>;
    };
    itemChildren: {
        type: PropType<SelectItemKey>;
        default: string;
    };
    itemProps: {
        type: PropType<SelectItemKey>;
        default: string;
    };
    returnObject: BooleanConstructor;
}>>;
type VDataTable = InstanceType<typeof VDataTable>;

declare const VDataTableRow: {
    new (...args: any[]): {
        $: vue.ComponentInternalInstance;
        $data: {};
        $props: Partial<{}> & Omit<Readonly<vue.ExtractPropTypes<{
            index: PropType<Number>;
            item: PropType<DataTableItem>;
            onClick: PropType<(e: MouseEvent) => void>;
        }>> & vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, never>;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: vue.Slot | undefined;
        }>;
        $root: vue.ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, vue.ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null;
        $parent: vue.ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, vue.ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: vue.ComponentOptionsBase<Readonly<vue.ExtractPropTypes<{
            index: PropType<Number>;
            item: PropType<DataTableItem>;
            onClick: PropType<(e: MouseEvent) => void>;
        }>>, void, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, {}, string, {}, {}, string> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: vue.DebuggerEvent) => void) | ((e: vue.DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: vue.DebuggerEvent) => void) | ((e: vue.DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: vue.ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, vue.ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null, info: string) => boolean | void) | ((err: unknown, instance: vue.ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, vue.ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof vue.nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: vue.WatchOptions<boolean> | undefined): vue.WatchStopHandle;
    } & Readonly<vue.ExtractPropTypes<{
        index: PropType<Number>;
        item: PropType<DataTableItem>;
        onClick: PropType<(e: MouseEvent) => void>;
    }>> & vue.ShallowUnwrapRef<{}> & {} & vue.ComponentCustomProperties & {};
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & vue.ComponentOptionsBase<Readonly<vue.ExtractPropTypes<{
    index: PropType<Number>;
    item: PropType<DataTableItem>;
    onClick: PropType<(e: MouseEvent) => void>;
}>>, void, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, {}, string, {}, {}, string> & vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps & FilterPropsOptions<{
    index: PropType<Number>;
    item: PropType<DataTableItem>;
    onClick: PropType<(e: MouseEvent) => void>;
}, vue.ExtractPropTypes<{
    index: PropType<Number>;
    item: PropType<DataTableItem>;
    onClick: PropType<(e: MouseEvent) => void>;
}>>;
type VDataTableRow = InstanceType<typeof VDataTableRow>;

declare const VDataTableVirtual: {
    new (...args: any[]): {
        $: vue.ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            expanded: string[];
            headers: DataTableHeader[] | DataTableHeader[][];
            noDataText: string;
            sortBy: SortItem[];
            items: any[];
            modelValue: any[];
            itemTitle: SelectItemKey;
            itemValue: NonNullable<SelectItemKey>;
            itemChildren: SelectItemKey;
            itemProps: SelectItemKey;
            returnObject: boolean;
            hideNoData: boolean;
            filterMode: FilterMode;
            noFilter: boolean;
            hover: boolean;
            fixedHeader: boolean;
            fixedFooter: boolean;
            itemHeight: string | number;
            multiSort: boolean;
            mustSort: boolean;
            groupBy: SortItem[];
            showSelect: boolean;
            expandOnClick: boolean;
            showExpand: boolean;
            visibleItems: string | number;
        }> & Omit<{
            expanded: string[];
            headers: DataTableHeader[] | DataTableHeader[][];
            noDataText: string;
            sortBy: SortItem[];
            items: any[];
            modelValue: any[];
            itemTitle: SelectItemKey;
            itemValue: NonNullable<SelectItemKey>;
            itemChildren: SelectItemKey;
            itemProps: SelectItemKey;
            returnObject: boolean;
            hideNoData: boolean;
            filterMode: FilterMode;
            noFilter: boolean;
            hover: boolean;
            fixedHeader: boolean;
            fixedFooter: boolean;
            itemHeight: string | number;
            multiSort: boolean;
            mustSort: boolean;
            groupBy: SortItem[];
            showSelect: boolean;
            expandOnClick: boolean;
            showExpand: boolean;
            visibleItems: string | number;
        } & {
            search?: string | undefined;
            height?: string | number | undefined;
            width?: string | number | undefined;
            customFilter?: FilterFunction | undefined;
            customKeyFilter?: FilterKeyFunctions | undefined;
            filterKeys?: FilterKeys | undefined;
            'onClick:row'?: ((e: Event, value: {
                item: DataTableItem;
            }) => void) | undefined;
        } & {
            $children?: vue.VNodeChild | (() => vue.VNodeChild) | {
                [x: `item.${string}`]: ((args_0: {
                    index: number;
                    item: DataTableItem;
                    columns: InternalDataTableHeader[];
                    isExpanded: (item: DataTableItem) => boolean;
                    toggleExpand: (item: DataTableItem) => void;
                    isSelected: (items: DataTableItem[]) => boolean;
                    toggleSelect: (item: DataTableItem) => void;
                }) => vue.VNodeChild) | undefined;
                default?: (() => vue.VNodeChild) | undefined;
                item?: ((args_0: {
                    index: number;
                    item: DataTableItem;
                    columns: InternalDataTableHeader[];
                    isExpanded: (item: DataTableItem) => boolean;
                    toggleExpand: (item: DataTableItem) => void;
                    isSelected: (items: DataTableItem[]) => boolean;
                    toggleSelect: (item: DataTableItem) => void;
                }) => vue.VNodeChild) | undefined;
                loading?: (() => vue.VNodeChild) | undefined;
                'group-header'?: ((args_0: {
                    index: number;
                    item: GroupHeaderItem;
                    columns: InternalDataTableHeader[];
                    isExpanded: (item: DataTableItem) => boolean;
                    toggleExpand: (item: DataTableItem) => void;
                    isSelected: (items: DataTableItem[]) => boolean;
                    toggleSelect: (item: DataTableItem) => void;
                    toggleGroup: (group: GroupHeaderItem) => void;
                    isGroupOpen: (group: GroupHeaderItem) => boolean;
                }) => vue.VNodeChild) | undefined;
                'no-data'?: (() => vue.VNodeChild) | undefined;
                'expanded-row'?: ((args_0: {
                    index: number;
                    item: DataTableItem;
                    columns: InternalDataTableHeader[];
                    isExpanded: (item: DataTableItem) => boolean;
                    toggleExpand: (item: DataTableItem) => void;
                    isSelected: (items: DataTableItem[]) => boolean;
                    toggleSelect: (item: DataTableItem) => void;
                }) => vue.VNodeChild) | undefined;
                'item.data-table-select'?: ((args_0: {
                    index: number;
                    item: DataTableItem;
                    columns: InternalDataTableHeader[];
                    isExpanded: (item: DataTableItem) => boolean;
                    toggleExpand: (item: DataTableItem) => void;
                    isSelected: (items: DataTableItem[]) => boolean;
                    toggleSelect: (item: DataTableItem) => void;
                }) => vue.VNodeChild) | undefined;
                'item.data-table-expand'?: ((args_0: {
                    index: number;
                    item: DataTableItem;
                    columns: InternalDataTableHeader[];
                    isExpanded: (item: DataTableItem) => boolean;
                    toggleExpand: (item: DataTableItem) => void;
                    isSelected: (items: DataTableItem[]) => boolean;
                    toggleSelect: (item: DataTableItem) => void;
                }) => vue.VNodeChild) | undefined;
                top?: (() => vue.VNodeChild) | undefined;
                headers?: (() => vue.VNodeChild) | undefined;
                bottom?: (() => vue.VNodeChild) | undefined;
            };
            'v-slots'?: {
                [x: `item.${string}`]: false | ((args_0: {
                    index: number;
                    item: DataTableItem;
                    columns: InternalDataTableHeader[];
                    isExpanded: (item: DataTableItem) => boolean;
                    toggleExpand: (item: DataTableItem) => void;
                    isSelected: (items: DataTableItem[]) => boolean;
                    toggleSelect: (item: DataTableItem) => void;
                }) => vue.VNodeChild) | undefined;
                default?: false | (() => vue.VNodeChild) | undefined;
                item?: false | ((args_0: {
                    index: number;
                    item: DataTableItem;
                    columns: InternalDataTableHeader[];
                    isExpanded: (item: DataTableItem) => boolean;
                    toggleExpand: (item: DataTableItem) => void;
                    isSelected: (items: DataTableItem[]) => boolean;
                    toggleSelect: (item: DataTableItem) => void;
                }) => vue.VNodeChild) | undefined;
                loading?: false | (() => vue.VNodeChild) | undefined;
                'group-header'?: false | ((args_0: {
                    index: number;
                    item: GroupHeaderItem;
                    columns: InternalDataTableHeader[];
                    isExpanded: (item: DataTableItem) => boolean;
                    toggleExpand: (item: DataTableItem) => void;
                    isSelected: (items: DataTableItem[]) => boolean;
                    toggleSelect: (item: DataTableItem) => void;
                    toggleGroup: (group: GroupHeaderItem) => void;
                    isGroupOpen: (group: GroupHeaderItem) => boolean;
                }) => vue.VNodeChild) | undefined;
                'no-data'?: false | (() => vue.VNodeChild) | undefined;
                'expanded-row'?: false | ((args_0: {
                    index: number;
                    item: DataTableItem;
                    columns: InternalDataTableHeader[];
                    isExpanded: (item: DataTableItem) => boolean;
                    toggleExpand: (item: DataTableItem) => void;
                    isSelected: (items: DataTableItem[]) => boolean;
                    toggleSelect: (item: DataTableItem) => void;
                }) => vue.VNodeChild) | undefined;
                'item.data-table-select'?: false | ((args_0: {
                    index: number;
                    item: DataTableItem;
                    columns: InternalDataTableHeader[];
                    isExpanded: (item: DataTableItem) => boolean;
                    toggleExpand: (item: DataTableItem) => void;
                    isSelected: (items: DataTableItem[]) => boolean;
                    toggleSelect: (item: DataTableItem) => void;
                }) => vue.VNodeChild) | undefined;
                'item.data-table-expand'?: false | ((args_0: {
                    index: number;
                    item: DataTableItem;
                    columns: InternalDataTableHeader[];
                    isExpanded: (item: DataTableItem) => boolean;
                    toggleExpand: (item: DataTableItem) => void;
                    isSelected: (items: DataTableItem[]) => boolean;
                    toggleSelect: (item: DataTableItem) => void;
                }) => vue.VNodeChild) | undefined;
                top?: false | (() => vue.VNodeChild) | undefined;
                headers?: false | (() => vue.VNodeChild) | undefined;
                bottom?: false | (() => vue.VNodeChild) | undefined;
            } | undefined;
        } & {
            [x: `v-slot:item.${string}`]: false | ((args_0: {
                index: number;
                item: DataTableItem;
                columns: InternalDataTableHeader[];
                isExpanded: (item: DataTableItem) => boolean;
                toggleExpand: (item: DataTableItem) => void;
                isSelected: (items: DataTableItem[]) => boolean;
                toggleSelect: (item: DataTableItem) => void;
            }) => vue.VNodeChild) | undefined;
            "v-slot:default"?: false | (() => vue.VNodeChild) | undefined;
            "v-slot:item"?: false | ((args_0: {
                index: number;
                item: DataTableItem;
                columns: InternalDataTableHeader[];
                isExpanded: (item: DataTableItem) => boolean;
                toggleExpand: (item: DataTableItem) => void;
                isSelected: (items: DataTableItem[]) => boolean;
                toggleSelect: (item: DataTableItem) => void;
            }) => vue.VNodeChild) | undefined;
            "v-slot:loading"?: false | (() => vue.VNodeChild) | undefined;
            "v-slot:group-header"?: false | ((args_0: {
                index: number;
                item: GroupHeaderItem;
                columns: InternalDataTableHeader[];
                isExpanded: (item: DataTableItem) => boolean;
                toggleExpand: (item: DataTableItem) => void;
                isSelected: (items: DataTableItem[]) => boolean;
                toggleSelect: (item: DataTableItem) => void;
                toggleGroup: (group: GroupHeaderItem) => void;
                isGroupOpen: (group: GroupHeaderItem) => boolean;
            }) => vue.VNodeChild) | undefined;
            "v-slot:no-data"?: false | (() => vue.VNodeChild) | undefined;
            "v-slot:expanded-row"?: false | ((args_0: {
                index: number;
                item: DataTableItem;
                columns: InternalDataTableHeader[];
                isExpanded: (item: DataTableItem) => boolean;
                toggleExpand: (item: DataTableItem) => void;
                isSelected: (items: DataTableItem[]) => boolean;
                toggleSelect: (item: DataTableItem) => void;
            }) => vue.VNodeChild) | undefined;
            "v-slot:item.data-table-select"?: false | ((args_0: {
                index: number;
                item: DataTableItem;
                columns: InternalDataTableHeader[];
                isExpanded: (item: DataTableItem) => boolean;
                toggleExpand: (item: DataTableItem) => void;
                isSelected: (items: DataTableItem[]) => boolean;
                toggleSelect: (item: DataTableItem) => void;
            }) => vue.VNodeChild) | undefined;
            "v-slot:item.data-table-expand"?: false | ((args_0: {
                index: number;
                item: DataTableItem;
                columns: InternalDataTableHeader[];
                isExpanded: (item: DataTableItem) => boolean;
                toggleExpand: (item: DataTableItem) => void;
                isSelected: (items: DataTableItem[]) => boolean;
                toggleSelect: (item: DataTableItem) => void;
            }) => vue.VNodeChild) | undefined;
            "v-slot:top"?: false | (() => vue.VNodeChild) | undefined;
            "v-slot:headers"?: false | (() => vue.VNodeChild) | undefined;
            "v-slot:bottom"?: false | (() => vue.VNodeChild) | undefined;
        } & {
            "onUpdate:modelValue"?: ((value: any[]) => any) | undefined;
            "onUpdate:sortBy"?: ((value: any) => any) | undefined;
            "onUpdate:groupBy"?: ((value: any) => any) | undefined;
            "onUpdate:expanded"?: ((value: any) => any) | undefined;
            "onClick:row"?: ((e: Event, value: {
                item: DataTableItem;
            }) => any) | undefined;
            "onUpdate:options"?: ((value: any) => any) | undefined;
        } & vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, "expanded" | "headers" | "noDataText" | "sortBy" | "items" | "modelValue" | "itemTitle" | "itemValue" | "itemChildren" | "itemProps" | "returnObject" | "hideNoData" | "filterMode" | "noFilter" | "hover" | "fixedHeader" | "fixedFooter" | "itemHeight" | "multiSort" | "mustSort" | "groupBy" | "showSelect" | "expandOnClick" | "showExpand" | "visibleItems">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: vue.Slot | undefined;
        }>;
        $root: vue.ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, vue.ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null;
        $parent: vue.ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, vue.ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null;
        $emit: ((event: "update:modelValue", value: any[]) => void) & ((event: "update:options", value: any) => void) & ((event: "update:sortBy", value: any) => void) & ((event: "update:groupBy", value: any) => void) & ((event: "update:expanded", value: any) => void) & ((event: "click:row", e: Event, value: {
            item: DataTableItem;
        }) => void);
        $el: any;
        $options: vue.ComponentOptionsBase<{
            expanded: string[];
            headers: DataTableHeader[] | DataTableHeader[][];
            noDataText: string;
            sortBy: SortItem[];
            items: any[];
            modelValue: any[];
            itemTitle: SelectItemKey;
            itemValue: NonNullable<SelectItemKey>;
            itemChildren: SelectItemKey;
            itemProps: SelectItemKey;
            returnObject: boolean;
            hideNoData: boolean;
            filterMode: FilterMode;
            noFilter: boolean;
            hover: boolean;
            fixedHeader: boolean;
            fixedFooter: boolean;
            itemHeight: string | number;
            multiSort: boolean;
            mustSort: boolean;
            groupBy: SortItem[];
            showSelect: boolean;
            expandOnClick: boolean;
            showExpand: boolean;
            visibleItems: string | number;
        } & {
            search?: string | undefined;
            height?: string | number | undefined;
            width?: string | number | undefined;
            customFilter?: FilterFunction | undefined;
            customKeyFilter?: FilterKeyFunctions | undefined;
            filterKeys?: FilterKeys | undefined;
            'onClick:row'?: ((e: Event, value: {
                item: DataTableItem;
            }) => void) | undefined;
        } & {
            $children?: vue.VNodeChild | (() => vue.VNodeChild) | {
                [x: `item.${string}`]: ((args_0: {
                    index: number;
                    item: DataTableItem;
                    columns: InternalDataTableHeader[];
                    isExpanded: (item: DataTableItem) => boolean;
                    toggleExpand: (item: DataTableItem) => void;
                    isSelected: (items: DataTableItem[]) => boolean;
                    toggleSelect: (item: DataTableItem) => void;
                }) => vue.VNodeChild) | undefined;
                default?: (() => vue.VNodeChild) | undefined;
                item?: ((args_0: {
                    index: number;
                    item: DataTableItem;
                    columns: InternalDataTableHeader[];
                    isExpanded: (item: DataTableItem) => boolean;
                    toggleExpand: (item: DataTableItem) => void;
                    isSelected: (items: DataTableItem[]) => boolean;
                    toggleSelect: (item: DataTableItem) => void;
                }) => vue.VNodeChild) | undefined;
                loading?: (() => vue.VNodeChild) | undefined;
                'group-header'?: ((args_0: {
                    index: number;
                    item: GroupHeaderItem;
                    columns: InternalDataTableHeader[];
                    isExpanded: (item: DataTableItem) => boolean;
                    toggleExpand: (item: DataTableItem) => void;
                    isSelected: (items: DataTableItem[]) => boolean;
                    toggleSelect: (item: DataTableItem) => void;
                    toggleGroup: (group: GroupHeaderItem) => void;
                    isGroupOpen: (group: GroupHeaderItem) => boolean;
                }) => vue.VNodeChild) | undefined;
                'no-data'?: (() => vue.VNodeChild) | undefined;
                'expanded-row'?: ((args_0: {
                    index: number;
                    item: DataTableItem;
                    columns: InternalDataTableHeader[];
                    isExpanded: (item: DataTableItem) => boolean;
                    toggleExpand: (item: DataTableItem) => void;
                    isSelected: (items: DataTableItem[]) => boolean;
                    toggleSelect: (item: DataTableItem) => void;
                }) => vue.VNodeChild) | undefined;
                'item.data-table-select'?: ((args_0: {
                    index: number;
                    item: DataTableItem;
                    columns: InternalDataTableHeader[];
                    isExpanded: (item: DataTableItem) => boolean;
                    toggleExpand: (item: DataTableItem) => void;
                    isSelected: (items: DataTableItem[]) => boolean;
                    toggleSelect: (item: DataTableItem) => void;
                }) => vue.VNodeChild) | undefined;
                'item.data-table-expand'?: ((args_0: {
                    index: number;
                    item: DataTableItem;
                    columns: InternalDataTableHeader[];
                    isExpanded: (item: DataTableItem) => boolean;
                    toggleExpand: (item: DataTableItem) => void;
                    isSelected: (items: DataTableItem[]) => boolean;
                    toggleSelect: (item: DataTableItem) => void;
                }) => vue.VNodeChild) | undefined;
                top?: (() => vue.VNodeChild) | undefined;
                headers?: (() => vue.VNodeChild) | undefined;
                bottom?: (() => vue.VNodeChild) | undefined;
            };
            'v-slots'?: {
                [x: `item.${string}`]: false | ((args_0: {
                    index: number;
                    item: DataTableItem;
                    columns: InternalDataTableHeader[];
                    isExpanded: (item: DataTableItem) => boolean;
                    toggleExpand: (item: DataTableItem) => void;
                    isSelected: (items: DataTableItem[]) => boolean;
                    toggleSelect: (item: DataTableItem) => void;
                }) => vue.VNodeChild) | undefined;
                default?: false | (() => vue.VNodeChild) | undefined;
                item?: false | ((args_0: {
                    index: number;
                    item: DataTableItem;
                    columns: InternalDataTableHeader[];
                    isExpanded: (item: DataTableItem) => boolean;
                    toggleExpand: (item: DataTableItem) => void;
                    isSelected: (items: DataTableItem[]) => boolean;
                    toggleSelect: (item: DataTableItem) => void;
                }) => vue.VNodeChild) | undefined;
                loading?: false | (() => vue.VNodeChild) | undefined;
                'group-header'?: false | ((args_0: {
                    index: number;
                    item: GroupHeaderItem;
                    columns: InternalDataTableHeader[];
                    isExpanded: (item: DataTableItem) => boolean;
                    toggleExpand: (item: DataTableItem) => void;
                    isSelected: (items: DataTableItem[]) => boolean;
                    toggleSelect: (item: DataTableItem) => void;
                    toggleGroup: (group: GroupHeaderItem) => void;
                    isGroupOpen: (group: GroupHeaderItem) => boolean;
                }) => vue.VNodeChild) | undefined;
                'no-data'?: false | (() => vue.VNodeChild) | undefined;
                'expanded-row'?: false | ((args_0: {
                    index: number;
                    item: DataTableItem;
                    columns: InternalDataTableHeader[];
                    isExpanded: (item: DataTableItem) => boolean;
                    toggleExpand: (item: DataTableItem) => void;
                    isSelected: (items: DataTableItem[]) => boolean;
                    toggleSelect: (item: DataTableItem) => void;
                }) => vue.VNodeChild) | undefined;
                'item.data-table-select'?: false | ((args_0: {
                    index: number;
                    item: DataTableItem;
                    columns: InternalDataTableHeader[];
                    isExpanded: (item: DataTableItem) => boolean;
                    toggleExpand: (item: DataTableItem) => void;
                    isSelected: (items: DataTableItem[]) => boolean;
                    toggleSelect: (item: DataTableItem) => void;
                }) => vue.VNodeChild) | undefined;
                'item.data-table-expand'?: false | ((args_0: {
                    index: number;
                    item: DataTableItem;
                    columns: InternalDataTableHeader[];
                    isExpanded: (item: DataTableItem) => boolean;
                    toggleExpand: (item: DataTableItem) => void;
                    isSelected: (items: DataTableItem[]) => boolean;
                    toggleSelect: (item: DataTableItem) => void;
                }) => vue.VNodeChild) | undefined;
                top?: false | (() => vue.VNodeChild) | undefined;
                headers?: false | (() => vue.VNodeChild) | undefined;
                bottom?: false | (() => vue.VNodeChild) | undefined;
            } | undefined;
        } & {
            [x: `v-slot:item.${string}`]: false | ((args_0: {
                index: number;
                item: DataTableItem;
                columns: InternalDataTableHeader[];
                isExpanded: (item: DataTableItem) => boolean;
                toggleExpand: (item: DataTableItem) => void;
                isSelected: (items: DataTableItem[]) => boolean;
                toggleSelect: (item: DataTableItem) => void;
            }) => vue.VNodeChild) | undefined;
            "v-slot:default"?: false | (() => vue.VNodeChild) | undefined;
            "v-slot:item"?: false | ((args_0: {
                index: number;
                item: DataTableItem;
                columns: InternalDataTableHeader[];
                isExpanded: (item: DataTableItem) => boolean;
                toggleExpand: (item: DataTableItem) => void;
                isSelected: (items: DataTableItem[]) => boolean;
                toggleSelect: (item: DataTableItem) => void;
            }) => vue.VNodeChild) | undefined;
            "v-slot:loading"?: false | (() => vue.VNodeChild) | undefined;
            "v-slot:group-header"?: false | ((args_0: {
                index: number;
                item: GroupHeaderItem;
                columns: InternalDataTableHeader[];
                isExpanded: (item: DataTableItem) => boolean;
                toggleExpand: (item: DataTableItem) => void;
                isSelected: (items: DataTableItem[]) => boolean;
                toggleSelect: (item: DataTableItem) => void;
                toggleGroup: (group: GroupHeaderItem) => void;
                isGroupOpen: (group: GroupHeaderItem) => boolean;
            }) => vue.VNodeChild) | undefined;
            "v-slot:no-data"?: false | (() => vue.VNodeChild) | undefined;
            "v-slot:expanded-row"?: false | ((args_0: {
                index: number;
                item: DataTableItem;
                columns: InternalDataTableHeader[];
                isExpanded: (item: DataTableItem) => boolean;
                toggleExpand: (item: DataTableItem) => void;
                isSelected: (items: DataTableItem[]) => boolean;
                toggleSelect: (item: DataTableItem) => void;
            }) => vue.VNodeChild) | undefined;
            "v-slot:item.data-table-select"?: false | ((args_0: {
                index: number;
                item: DataTableItem;
                columns: InternalDataTableHeader[];
                isExpanded: (item: DataTableItem) => boolean;
                toggleExpand: (item: DataTableItem) => void;
                isSelected: (items: DataTableItem[]) => boolean;
                toggleSelect: (item: DataTableItem) => void;
            }) => vue.VNodeChild) | undefined;
            "v-slot:item.data-table-expand"?: false | ((args_0: {
                index: number;
                item: DataTableItem;
                columns: InternalDataTableHeader[];
                isExpanded: (item: DataTableItem) => boolean;
                toggleExpand: (item: DataTableItem) => void;
                isSelected: (items: DataTableItem[]) => boolean;
                toggleSelect: (item: DataTableItem) => void;
            }) => vue.VNodeChild) | undefined;
            "v-slot:top"?: false | (() => vue.VNodeChild) | undefined;
            "v-slot:headers"?: false | (() => vue.VNodeChild) | undefined;
            "v-slot:bottom"?: false | (() => vue.VNodeChild) | undefined;
        } & {
            "onUpdate:modelValue"?: ((value: any[]) => any) | undefined;
            "onUpdate:sortBy"?: ((value: any) => any) | undefined;
            "onUpdate:groupBy"?: ((value: any) => any) | undefined;
            "onUpdate:expanded"?: ((value: any) => any) | undefined;
            "onClick:row"?: ((e: Event, value: {
                item: DataTableItem;
            }) => any) | undefined;
            "onUpdate:options"?: ((value: any) => any) | undefined;
        }, void, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, {
            'update:modelValue': (value: any[]) => true;
            'update:sortBy': (value: any) => true;
            'update:options': (value: any) => true;
            'update:groupBy': (value: any) => true;
            'update:expanded': (value: any) => true;
            'click:row': (e: Event, value: {
                item: DataTableItem;
            }) => true;
        }, string, {
            expanded: string[];
            headers: DataTableHeader[] | DataTableHeader[][];
            noDataText: string;
            sortBy: SortItem[];
            items: any[];
            modelValue: any[];
            itemTitle: SelectItemKey;
            itemValue: NonNullable<SelectItemKey>;
            itemChildren: SelectItemKey;
            itemProps: SelectItemKey;
            returnObject: boolean;
            hideNoData: boolean;
            filterMode: FilterMode;
            noFilter: boolean;
            hover: boolean;
            fixedHeader: boolean;
            fixedFooter: boolean;
            itemHeight: string | number;
            multiSort: boolean;
            mustSort: boolean;
            groupBy: SortItem[];
            showSelect: boolean;
            expandOnClick: boolean;
            showExpand: boolean;
            visibleItems: string | number;
        }, {}, string> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: vue.DebuggerEvent) => void) | ((e: vue.DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: vue.DebuggerEvent) => void) | ((e: vue.DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: vue.ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, vue.ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null, info: string) => boolean | void) | ((err: unknown, instance: vue.ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, vue.ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof vue.nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: vue.WatchOptions<boolean> | undefined): vue.WatchStopHandle;
    } & {
        expanded: string[];
        headers: DataTableHeader[] | DataTableHeader[][];
        noDataText: string;
        sortBy: SortItem[];
        items: any[];
        modelValue: any[];
        itemTitle: SelectItemKey;
        itemValue: NonNullable<SelectItemKey>;
        itemChildren: SelectItemKey;
        itemProps: SelectItemKey;
        returnObject: boolean;
        hideNoData: boolean;
        filterMode: FilterMode;
        noFilter: boolean;
        hover: boolean;
        fixedHeader: boolean;
        fixedFooter: boolean;
        itemHeight: string | number;
        multiSort: boolean;
        mustSort: boolean;
        groupBy: SortItem[];
        showSelect: boolean;
        expandOnClick: boolean;
        showExpand: boolean;
        visibleItems: string | number;
    } & {
        search?: string | undefined;
        height?: string | number | undefined;
        width?: string | number | undefined;
        customFilter?: FilterFunction | undefined;
        customKeyFilter?: FilterKeyFunctions | undefined;
        filterKeys?: FilterKeys | undefined;
        'onClick:row'?: ((e: Event, value: {
            item: DataTableItem;
        }) => void) | undefined;
    } & {
        $children?: vue.VNodeChild | (() => vue.VNodeChild) | {
            [x: `item.${string}`]: ((args_0: {
                index: number;
                item: DataTableItem;
                columns: InternalDataTableHeader[];
                isExpanded: (item: DataTableItem) => boolean;
                toggleExpand: (item: DataTableItem) => void;
                isSelected: (items: DataTableItem[]) => boolean;
                toggleSelect: (item: DataTableItem) => void;
            }) => vue.VNodeChild) | undefined;
            default?: (() => vue.VNodeChild) | undefined;
            item?: ((args_0: {
                index: number;
                item: DataTableItem;
                columns: InternalDataTableHeader[];
                isExpanded: (item: DataTableItem) => boolean;
                toggleExpand: (item: DataTableItem) => void;
                isSelected: (items: DataTableItem[]) => boolean;
                toggleSelect: (item: DataTableItem) => void;
            }) => vue.VNodeChild) | undefined;
            loading?: (() => vue.VNodeChild) | undefined;
            'group-header'?: ((args_0: {
                index: number;
                item: GroupHeaderItem;
                columns: InternalDataTableHeader[];
                isExpanded: (item: DataTableItem) => boolean;
                toggleExpand: (item: DataTableItem) => void;
                isSelected: (items: DataTableItem[]) => boolean;
                toggleSelect: (item: DataTableItem) => void;
                toggleGroup: (group: GroupHeaderItem) => void;
                isGroupOpen: (group: GroupHeaderItem) => boolean;
            }) => vue.VNodeChild) | undefined;
            'no-data'?: (() => vue.VNodeChild) | undefined;
            'expanded-row'?: ((args_0: {
                index: number;
                item: DataTableItem;
                columns: InternalDataTableHeader[];
                isExpanded: (item: DataTableItem) => boolean;
                toggleExpand: (item: DataTableItem) => void;
                isSelected: (items: DataTableItem[]) => boolean;
                toggleSelect: (item: DataTableItem) => void;
            }) => vue.VNodeChild) | undefined;
            'item.data-table-select'?: ((args_0: {
                index: number;
                item: DataTableItem;
                columns: InternalDataTableHeader[];
                isExpanded: (item: DataTableItem) => boolean;
                toggleExpand: (item: DataTableItem) => void;
                isSelected: (items: DataTableItem[]) => boolean;
                toggleSelect: (item: DataTableItem) => void;
            }) => vue.VNodeChild) | undefined;
            'item.data-table-expand'?: ((args_0: {
                index: number;
                item: DataTableItem;
                columns: InternalDataTableHeader[];
                isExpanded: (item: DataTableItem) => boolean;
                toggleExpand: (item: DataTableItem) => void;
                isSelected: (items: DataTableItem[]) => boolean;
                toggleSelect: (item: DataTableItem) => void;
            }) => vue.VNodeChild) | undefined;
            top?: (() => vue.VNodeChild) | undefined;
            headers?: (() => vue.VNodeChild) | undefined;
            bottom?: (() => vue.VNodeChild) | undefined;
        };
        'v-slots'?: {
            [x: `item.${string}`]: false | ((args_0: {
                index: number;
                item: DataTableItem;
                columns: InternalDataTableHeader[];
                isExpanded: (item: DataTableItem) => boolean;
                toggleExpand: (item: DataTableItem) => void;
                isSelected: (items: DataTableItem[]) => boolean;
                toggleSelect: (item: DataTableItem) => void;
            }) => vue.VNodeChild) | undefined;
            default?: false | (() => vue.VNodeChild) | undefined;
            item?: false | ((args_0: {
                index: number;
                item: DataTableItem;
                columns: InternalDataTableHeader[];
                isExpanded: (item: DataTableItem) => boolean;
                toggleExpand: (item: DataTableItem) => void;
                isSelected: (items: DataTableItem[]) => boolean;
                toggleSelect: (item: DataTableItem) => void;
            }) => vue.VNodeChild) | undefined;
            loading?: false | (() => vue.VNodeChild) | undefined;
            'group-header'?: false | ((args_0: {
                index: number;
                item: GroupHeaderItem;
                columns: InternalDataTableHeader[];
                isExpanded: (item: DataTableItem) => boolean;
                toggleExpand: (item: DataTableItem) => void;
                isSelected: (items: DataTableItem[]) => boolean;
                toggleSelect: (item: DataTableItem) => void;
                toggleGroup: (group: GroupHeaderItem) => void;
                isGroupOpen: (group: GroupHeaderItem) => boolean;
            }) => vue.VNodeChild) | undefined;
            'no-data'?: false | (() => vue.VNodeChild) | undefined;
            'expanded-row'?: false | ((args_0: {
                index: number;
                item: DataTableItem;
                columns: InternalDataTableHeader[];
                isExpanded: (item: DataTableItem) => boolean;
                toggleExpand: (item: DataTableItem) => void;
                isSelected: (items: DataTableItem[]) => boolean;
                toggleSelect: (item: DataTableItem) => void;
            }) => vue.VNodeChild) | undefined;
            'item.data-table-select'?: false | ((args_0: {
                index: number;
                item: DataTableItem;
                columns: InternalDataTableHeader[];
                isExpanded: (item: DataTableItem) => boolean;
                toggleExpand: (item: DataTableItem) => void;
                isSelected: (items: DataTableItem[]) => boolean;
                toggleSelect: (item: DataTableItem) => void;
            }) => vue.VNodeChild) | undefined;
            'item.data-table-expand'?: false | ((args_0: {
                index: number;
                item: DataTableItem;
                columns: InternalDataTableHeader[];
                isExpanded: (item: DataTableItem) => boolean;
                toggleExpand: (item: DataTableItem) => void;
                isSelected: (items: DataTableItem[]) => boolean;
                toggleSelect: (item: DataTableItem) => void;
            }) => vue.VNodeChild) | undefined;
            top?: false | (() => vue.VNodeChild) | undefined;
            headers?: false | (() => vue.VNodeChild) | undefined;
            bottom?: false | (() => vue.VNodeChild) | undefined;
        } | undefined;
    } & {
        [x: `v-slot:item.${string}`]: false | ((args_0: {
            index: number;
            item: DataTableItem;
            columns: InternalDataTableHeader[];
            isExpanded: (item: DataTableItem) => boolean;
            toggleExpand: (item: DataTableItem) => void;
            isSelected: (items: DataTableItem[]) => boolean;
            toggleSelect: (item: DataTableItem) => void;
        }) => vue.VNodeChild) | undefined;
        "v-slot:default"?: false | (() => vue.VNodeChild) | undefined;
        "v-slot:item"?: false | ((args_0: {
            index: number;
            item: DataTableItem;
            columns: InternalDataTableHeader[];
            isExpanded: (item: DataTableItem) => boolean;
            toggleExpand: (item: DataTableItem) => void;
            isSelected: (items: DataTableItem[]) => boolean;
            toggleSelect: (item: DataTableItem) => void;
        }) => vue.VNodeChild) | undefined;
        "v-slot:loading"?: false | (() => vue.VNodeChild) | undefined;
        "v-slot:group-header"?: false | ((args_0: {
            index: number;
            item: GroupHeaderItem;
            columns: InternalDataTableHeader[];
            isExpanded: (item: DataTableItem) => boolean;
            toggleExpand: (item: DataTableItem) => void;
            isSelected: (items: DataTableItem[]) => boolean;
            toggleSelect: (item: DataTableItem) => void;
            toggleGroup: (group: GroupHeaderItem) => void;
            isGroupOpen: (group: GroupHeaderItem) => boolean;
        }) => vue.VNodeChild) | undefined;
        "v-slot:no-data"?: false | (() => vue.VNodeChild) | undefined;
        "v-slot:expanded-row"?: false | ((args_0: {
            index: number;
            item: DataTableItem;
            columns: InternalDataTableHeader[];
            isExpanded: (item: DataTableItem) => boolean;
            toggleExpand: (item: DataTableItem) => void;
            isSelected: (items: DataTableItem[]) => boolean;
            toggleSelect: (item: DataTableItem) => void;
        }) => vue.VNodeChild) | undefined;
        "v-slot:item.data-table-select"?: false | ((args_0: {
            index: number;
            item: DataTableItem;
            columns: InternalDataTableHeader[];
            isExpanded: (item: DataTableItem) => boolean;
            toggleExpand: (item: DataTableItem) => void;
            isSelected: (items: DataTableItem[]) => boolean;
            toggleSelect: (item: DataTableItem) => void;
        }) => vue.VNodeChild) | undefined;
        "v-slot:item.data-table-expand"?: false | ((args_0: {
            index: number;
            item: DataTableItem;
            columns: InternalDataTableHeader[];
            isExpanded: (item: DataTableItem) => boolean;
            toggleExpand: (item: DataTableItem) => void;
            isSelected: (items: DataTableItem[]) => boolean;
            toggleSelect: (item: DataTableItem) => void;
        }) => vue.VNodeChild) | undefined;
        "v-slot:top"?: false | (() => vue.VNodeChild) | undefined;
        "v-slot:headers"?: false | (() => vue.VNodeChild) | undefined;
        "v-slot:bottom"?: false | (() => vue.VNodeChild) | undefined;
    } & {
        "onUpdate:modelValue"?: ((value: any[]) => any) | undefined;
        "onUpdate:sortBy"?: ((value: any) => any) | undefined;
        "onUpdate:groupBy"?: ((value: any) => any) | undefined;
        "onUpdate:expanded"?: ((value: any) => any) | undefined;
        "onClick:row"?: ((e: Event, value: {
            item: DataTableItem;
        }) => any) | undefined;
        "onUpdate:options"?: ((value: any) => any) | undefined;
    } & vue.ShallowUnwrapRef<{}> & {} & vue.ComponentCustomProperties & {};
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & vue.ComponentOptionsBase<{
    expanded: string[];
    headers: DataTableHeader[] | DataTableHeader[][];
    noDataText: string;
    sortBy: SortItem[];
    items: any[];
    modelValue: any[];
    itemTitle: SelectItemKey;
    itemValue: NonNullable<SelectItemKey>;
    itemChildren: SelectItemKey;
    itemProps: SelectItemKey;
    returnObject: boolean;
    hideNoData: boolean;
    filterMode: FilterMode;
    noFilter: boolean;
    hover: boolean;
    fixedHeader: boolean;
    fixedFooter: boolean;
    itemHeight: string | number;
    multiSort: boolean;
    mustSort: boolean;
    groupBy: SortItem[];
    showSelect: boolean;
    expandOnClick: boolean;
    showExpand: boolean;
    visibleItems: string | number;
} & {
    search?: string | undefined;
    height?: string | number | undefined;
    width?: string | number | undefined;
    customFilter?: FilterFunction | undefined;
    customKeyFilter?: FilterKeyFunctions | undefined;
    filterKeys?: FilterKeys | undefined;
    'onClick:row'?: ((e: Event, value: {
        item: DataTableItem;
    }) => void) | undefined;
} & {
    $children?: vue.VNodeChild | (() => vue.VNodeChild) | {
        [x: `item.${string}`]: ((args_0: {
            index: number;
            item: DataTableItem;
            columns: InternalDataTableHeader[];
            isExpanded: (item: DataTableItem) => boolean;
            toggleExpand: (item: DataTableItem) => void;
            isSelected: (items: DataTableItem[]) => boolean;
            toggleSelect: (item: DataTableItem) => void;
        }) => vue.VNodeChild) | undefined;
        default?: (() => vue.VNodeChild) | undefined;
        item?: ((args_0: {
            index: number;
            item: DataTableItem;
            columns: InternalDataTableHeader[];
            isExpanded: (item: DataTableItem) => boolean;
            toggleExpand: (item: DataTableItem) => void;
            isSelected: (items: DataTableItem[]) => boolean;
            toggleSelect: (item: DataTableItem) => void;
        }) => vue.VNodeChild) | undefined;
        loading?: (() => vue.VNodeChild) | undefined;
        'group-header'?: ((args_0: {
            index: number;
            item: GroupHeaderItem;
            columns: InternalDataTableHeader[];
            isExpanded: (item: DataTableItem) => boolean;
            toggleExpand: (item: DataTableItem) => void;
            isSelected: (items: DataTableItem[]) => boolean;
            toggleSelect: (item: DataTableItem) => void;
            toggleGroup: (group: GroupHeaderItem) => void;
            isGroupOpen: (group: GroupHeaderItem) => boolean;
        }) => vue.VNodeChild) | undefined;
        'no-data'?: (() => vue.VNodeChild) | undefined;
        'expanded-row'?: ((args_0: {
            index: number;
            item: DataTableItem;
            columns: InternalDataTableHeader[];
            isExpanded: (item: DataTableItem) => boolean;
            toggleExpand: (item: DataTableItem) => void;
            isSelected: (items: DataTableItem[]) => boolean;
            toggleSelect: (item: DataTableItem) => void;
        }) => vue.VNodeChild) | undefined;
        'item.data-table-select'?: ((args_0: {
            index: number;
            item: DataTableItem;
            columns: InternalDataTableHeader[];
            isExpanded: (item: DataTableItem) => boolean;
            toggleExpand: (item: DataTableItem) => void;
            isSelected: (items: DataTableItem[]) => boolean;
            toggleSelect: (item: DataTableItem) => void;
        }) => vue.VNodeChild) | undefined;
        'item.data-table-expand'?: ((args_0: {
            index: number;
            item: DataTableItem;
            columns: InternalDataTableHeader[];
            isExpanded: (item: DataTableItem) => boolean;
            toggleExpand: (item: DataTableItem) => void;
            isSelected: (items: DataTableItem[]) => boolean;
            toggleSelect: (item: DataTableItem) => void;
        }) => vue.VNodeChild) | undefined;
        top?: (() => vue.VNodeChild) | undefined;
        headers?: (() => vue.VNodeChild) | undefined;
        bottom?: (() => vue.VNodeChild) | undefined;
    };
    'v-slots'?: {
        [x: `item.${string}`]: false | ((args_0: {
            index: number;
            item: DataTableItem;
            columns: InternalDataTableHeader[];
            isExpanded: (item: DataTableItem) => boolean;
            toggleExpand: (item: DataTableItem) => void;
            isSelected: (items: DataTableItem[]) => boolean;
            toggleSelect: (item: DataTableItem) => void;
        }) => vue.VNodeChild) | undefined;
        default?: false | (() => vue.VNodeChild) | undefined;
        item?: false | ((args_0: {
            index: number;
            item: DataTableItem;
            columns: InternalDataTableHeader[];
            isExpanded: (item: DataTableItem) => boolean;
            toggleExpand: (item: DataTableItem) => void;
            isSelected: (items: DataTableItem[]) => boolean;
            toggleSelect: (item: DataTableItem) => void;
        }) => vue.VNodeChild) | undefined;
        loading?: false | (() => vue.VNodeChild) | undefined;
        'group-header'?: false | ((args_0: {
            index: number;
            item: GroupHeaderItem;
            columns: InternalDataTableHeader[];
            isExpanded: (item: DataTableItem) => boolean;
            toggleExpand: (item: DataTableItem) => void;
            isSelected: (items: DataTableItem[]) => boolean;
            toggleSelect: (item: DataTableItem) => void;
            toggleGroup: (group: GroupHeaderItem) => void;
            isGroupOpen: (group: GroupHeaderItem) => boolean;
        }) => vue.VNodeChild) | undefined;
        'no-data'?: false | (() => vue.VNodeChild) | undefined;
        'expanded-row'?: false | ((args_0: {
            index: number;
            item: DataTableItem;
            columns: InternalDataTableHeader[];
            isExpanded: (item: DataTableItem) => boolean;
            toggleExpand: (item: DataTableItem) => void;
            isSelected: (items: DataTableItem[]) => boolean;
            toggleSelect: (item: DataTableItem) => void;
        }) => vue.VNodeChild) | undefined;
        'item.data-table-select'?: false | ((args_0: {
            index: number;
            item: DataTableItem;
            columns: InternalDataTableHeader[];
            isExpanded: (item: DataTableItem) => boolean;
            toggleExpand: (item: DataTableItem) => void;
            isSelected: (items: DataTableItem[]) => boolean;
            toggleSelect: (item: DataTableItem) => void;
        }) => vue.VNodeChild) | undefined;
        'item.data-table-expand'?: false | ((args_0: {
            index: number;
            item: DataTableItem;
            columns: InternalDataTableHeader[];
            isExpanded: (item: DataTableItem) => boolean;
            toggleExpand: (item: DataTableItem) => void;
            isSelected: (items: DataTableItem[]) => boolean;
            toggleSelect: (item: DataTableItem) => void;
        }) => vue.VNodeChild) | undefined;
        top?: false | (() => vue.VNodeChild) | undefined;
        headers?: false | (() => vue.VNodeChild) | undefined;
        bottom?: false | (() => vue.VNodeChild) | undefined;
    } | undefined;
} & {
    [x: `v-slot:item.${string}`]: false | ((args_0: {
        index: number;
        item: DataTableItem;
        columns: InternalDataTableHeader[];
        isExpanded: (item: DataTableItem) => boolean;
        toggleExpand: (item: DataTableItem) => void;
        isSelected: (items: DataTableItem[]) => boolean;
        toggleSelect: (item: DataTableItem) => void;
    }) => vue.VNodeChild) | undefined;
    "v-slot:default"?: false | (() => vue.VNodeChild) | undefined;
    "v-slot:item"?: false | ((args_0: {
        index: number;
        item: DataTableItem;
        columns: InternalDataTableHeader[];
        isExpanded: (item: DataTableItem) => boolean;
        toggleExpand: (item: DataTableItem) => void;
        isSelected: (items: DataTableItem[]) => boolean;
        toggleSelect: (item: DataTableItem) => void;
    }) => vue.VNodeChild) | undefined;
    "v-slot:loading"?: false | (() => vue.VNodeChild) | undefined;
    "v-slot:group-header"?: false | ((args_0: {
        index: number;
        item: GroupHeaderItem;
        columns: InternalDataTableHeader[];
        isExpanded: (item: DataTableItem) => boolean;
        toggleExpand: (item: DataTableItem) => void;
        isSelected: (items: DataTableItem[]) => boolean;
        toggleSelect: (item: DataTableItem) => void;
        toggleGroup: (group: GroupHeaderItem) => void;
        isGroupOpen: (group: GroupHeaderItem) => boolean;
    }) => vue.VNodeChild) | undefined;
    "v-slot:no-data"?: false | (() => vue.VNodeChild) | undefined;
    "v-slot:expanded-row"?: false | ((args_0: {
        index: number;
        item: DataTableItem;
        columns: InternalDataTableHeader[];
        isExpanded: (item: DataTableItem) => boolean;
        toggleExpand: (item: DataTableItem) => void;
        isSelected: (items: DataTableItem[]) => boolean;
        toggleSelect: (item: DataTableItem) => void;
    }) => vue.VNodeChild) | undefined;
    "v-slot:item.data-table-select"?: false | ((args_0: {
        index: number;
        item: DataTableItem;
        columns: InternalDataTableHeader[];
        isExpanded: (item: DataTableItem) => boolean;
        toggleExpand: (item: DataTableItem) => void;
        isSelected: (items: DataTableItem[]) => boolean;
        toggleSelect: (item: DataTableItem) => void;
    }) => vue.VNodeChild) | undefined;
    "v-slot:item.data-table-expand"?: false | ((args_0: {
        index: number;
        item: DataTableItem;
        columns: InternalDataTableHeader[];
        isExpanded: (item: DataTableItem) => boolean;
        toggleExpand: (item: DataTableItem) => void;
        isSelected: (items: DataTableItem[]) => boolean;
        toggleSelect: (item: DataTableItem) => void;
    }) => vue.VNodeChild) | undefined;
    "v-slot:top"?: false | (() => vue.VNodeChild) | undefined;
    "v-slot:headers"?: false | (() => vue.VNodeChild) | undefined;
    "v-slot:bottom"?: false | (() => vue.VNodeChild) | undefined;
} & {
    "onUpdate:modelValue"?: ((value: any[]) => any) | undefined;
    "onUpdate:sortBy"?: ((value: any) => any) | undefined;
    "onUpdate:groupBy"?: ((value: any) => any) | undefined;
    "onUpdate:expanded"?: ((value: any) => any) | undefined;
    "onClick:row"?: ((e: Event, value: {
        item: DataTableItem;
    }) => any) | undefined;
    "onUpdate:options"?: ((value: any) => any) | undefined;
}, void, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, {
    'update:modelValue': (value: any[]) => true;
    'update:sortBy': (value: any) => true;
    'update:options': (value: any) => true;
    'update:groupBy': (value: any) => true;
    'update:expanded': (value: any) => true;
    'click:row': (e: Event, value: {
        item: DataTableItem;
    }) => true;
}, string, {
    expanded: string[];
    headers: DataTableHeader[] | DataTableHeader[][];
    noDataText: string;
    sortBy: SortItem[];
    items: any[];
    modelValue: any[];
    itemTitle: SelectItemKey;
    itemValue: NonNullable<SelectItemKey>;
    itemChildren: SelectItemKey;
    itemProps: SelectItemKey;
    returnObject: boolean;
    hideNoData: boolean;
    filterMode: FilterMode;
    noFilter: boolean;
    hover: boolean;
    fixedHeader: boolean;
    fixedFooter: boolean;
    itemHeight: string | number;
    multiSort: boolean;
    mustSort: boolean;
    groupBy: SortItem[];
    showSelect: boolean;
    expandOnClick: boolean;
    showExpand: boolean;
    visibleItems: string | number;
}, {}, string> & vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps & FilterPropsOptions<{
    customFilter: vue.PropType<FilterFunction>;
    customKeyFilter: vue.PropType<FilterKeyFunctions>;
    filterKeys: vue.PropType<FilterKeys>;
    filterMode: {
        type: vue.PropType<FilterMode>;
        default: string;
    };
    noFilter: BooleanConstructor;
    visibleItems: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    itemHeight: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    sortBy: {
        type: vue.PropType<SortItem[]>;
        default: () => never[];
    };
    multiSort: BooleanConstructor;
    mustSort: BooleanConstructor;
    showSelect: BooleanConstructor;
    modelValue: {
        type: vue.PropType<any[]>;
        default: () => never[];
    };
    items: {
        type: vue.PropType<any[]>;
        default: () => never[];
    };
    itemTitle: {
        type: vue.PropType<SelectItemKey>;
        default: string;
    };
    itemValue: Omit<{
        type: vue.PropType<SelectItemKey>;
        default: string;
    }, "type" | "default"> & {
        type: vue.PropType<NonNullable<SelectItemKey>>;
        default: NonNullable<SelectItemKey>;
    };
    itemChildren: {
        type: vue.PropType<SelectItemKey>;
        default: string;
    };
    itemProps: {
        type: vue.PropType<SelectItemKey>;
        default: string;
    };
    returnObject: BooleanConstructor;
    headers: {
        type: vue.PropType<DataTableHeader[] | DataTableHeader[][]>;
        default: () => never[];
    };
    expandOnClick: BooleanConstructor;
    showExpand: BooleanConstructor;
    expanded: {
        type: vue.PropType<string[]>;
        default: () => never[];
    };
    groupBy: {
        type: vue.PropType<SortItem[]>;
        default: () => never[];
    };
    hideNoData: BooleanConstructor;
    hover: BooleanConstructor;
    noDataText: {
        type: StringConstructor;
        default: string;
    };
    height: (StringConstructor | NumberConstructor)[];
    width: (StringConstructor | NumberConstructor)[];
    fixedHeader: BooleanConstructor;
    fixedFooter: BooleanConstructor;
    'onClick:row': vue.PropType<(e: Event, value: {
        item: DataTableItem;
    }) => void>;
    search: StringConstructor;
}, vue.ExtractPropTypes<{
    customFilter: vue.PropType<FilterFunction>;
    customKeyFilter: vue.PropType<FilterKeyFunctions>;
    filterKeys: vue.PropType<FilterKeys>;
    filterMode: {
        type: vue.PropType<FilterMode>;
        default: string;
    };
    noFilter: BooleanConstructor;
    visibleItems: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    itemHeight: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    sortBy: {
        type: vue.PropType<SortItem[]>;
        default: () => never[];
    };
    multiSort: BooleanConstructor;
    mustSort: BooleanConstructor;
    showSelect: BooleanConstructor;
    modelValue: {
        type: vue.PropType<any[]>;
        default: () => never[];
    };
    items: {
        type: vue.PropType<any[]>;
        default: () => never[];
    };
    itemTitle: {
        type: vue.PropType<SelectItemKey>;
        default: string;
    };
    itemValue: Omit<{
        type: vue.PropType<SelectItemKey>;
        default: string;
    }, "type" | "default"> & {
        type: vue.PropType<NonNullable<SelectItemKey>>;
        default: NonNullable<SelectItemKey>;
    };
    itemChildren: {
        type: vue.PropType<SelectItemKey>;
        default: string;
    };
    itemProps: {
        type: vue.PropType<SelectItemKey>;
        default: string;
    };
    returnObject: BooleanConstructor;
    headers: {
        type: vue.PropType<DataTableHeader[] | DataTableHeader[][]>;
        default: () => never[];
    };
    expandOnClick: BooleanConstructor;
    showExpand: BooleanConstructor;
    expanded: {
        type: vue.PropType<string[]>;
        default: () => never[];
    };
    groupBy: {
        type: vue.PropType<SortItem[]>;
        default: () => never[];
    };
    hideNoData: BooleanConstructor;
    hover: BooleanConstructor;
    noDataText: {
        type: StringConstructor;
        default: string;
    };
    height: (StringConstructor | NumberConstructor)[];
    width: (StringConstructor | NumberConstructor)[];
    fixedHeader: BooleanConstructor;
    fixedFooter: BooleanConstructor;
    'onClick:row': vue.PropType<(e: Event, value: {
        item: DataTableItem;
    }) => void>;
    search: StringConstructor;
}>>;
type VDataTableVirtual = InstanceType<typeof VDataTableVirtual>;

declare const VDataTableServer: {
    new (...args: any[]): {
        $: vue.ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            expanded: string[];
            page: string | number;
            headers: DataTableHeader[] | DataTableHeader[][];
            noDataText: string;
            loadingText: string;
            sortBy: SortItem[];
            items: any[];
            modelValue: any[];
            itemTitle: SelectItemKey;
            itemValue: NonNullable<SelectItemKey>;
            itemChildren: SelectItemKey;
            itemProps: SelectItemKey;
            returnObject: boolean;
            hideNoData: boolean;
            hover: boolean;
            fixedHeader: boolean;
            fixedFooter: boolean;
            multiSort: boolean;
            mustSort: boolean;
            groupBy: SortItem[];
            showSelect: boolean;
            expandOnClick: boolean;
            showExpand: boolean;
            itemsPerPage: string | number;
        }> & Omit<{
            expanded: string[];
            page: string | number;
            headers: DataTableHeader[] | DataTableHeader[][];
            noDataText: string;
            loadingText: string;
            sortBy: SortItem[];
            items: any[];
            modelValue: any[];
            itemTitle: SelectItemKey;
            itemValue: NonNullable<SelectItemKey>;
            itemChildren: SelectItemKey;
            itemProps: SelectItemKey;
            returnObject: boolean;
            hideNoData: boolean;
            hover: boolean;
            fixedHeader: boolean;
            fixedFooter: boolean;
            multiSort: boolean;
            mustSort: boolean;
            groupBy: SortItem[];
            showSelect: boolean;
            expandOnClick: boolean;
            showExpand: boolean;
            itemsPerPage: string | number;
            itemsLength: string | number;
        } & {
            search?: string | undefined;
            height?: string | number | undefined;
            width?: string | number | undefined;
            color?: string | undefined;
            loading?: string | boolean | undefined;
            'onClick:row'?: ((e: Event, value: {
                item: DataTableItem;
            }) => void) | undefined;
        } & {
            $children?: vue.VNodeChild | (() => vue.VNodeChild) | {
                [x: `item.${string}`]: ((args_0: {
                    index: number;
                    item: DataTableItem;
                    columns: InternalDataTableHeader[];
                    isExpanded: (item: DataTableItem) => boolean;
                    toggleExpand: (item: DataTableItem) => void;
                    isSelected: (items: DataTableItem[]) => boolean;
                    toggleSelect: (item: DataTableItem) => void;
                }) => vue.VNodeChild) | undefined;
                default?: (() => vue.VNodeChild) | undefined;
                item?: ((args_0: {
                    index: number;
                    item: DataTableItem;
                    columns: InternalDataTableHeader[];
                    isExpanded: (item: DataTableItem) => boolean;
                    toggleExpand: (item: DataTableItem) => void;
                    isSelected: (items: DataTableItem[]) => boolean;
                    toggleSelect: (item: DataTableItem) => void;
                }) => vue.VNodeChild) | undefined;
                loading?: (() => vue.VNodeChild) | undefined;
                'group-header'?: ((args_0: {
                    index: number;
                    item: GroupHeaderItem;
                    columns: InternalDataTableHeader[];
                    isExpanded: (item: DataTableItem) => boolean;
                    toggleExpand: (item: DataTableItem) => void;
                    isSelected: (items: DataTableItem[]) => boolean;
                    toggleSelect: (item: DataTableItem) => void;
                    toggleGroup: (group: GroupHeaderItem) => void;
                    isGroupOpen: (group: GroupHeaderItem) => boolean;
                }) => vue.VNodeChild) | undefined;
                'no-data'?: (() => vue.VNodeChild) | undefined;
                'expanded-row'?: ((args_0: {
                    index: number;
                    item: DataTableItem;
                    columns: InternalDataTableHeader[];
                    isExpanded: (item: DataTableItem) => boolean;
                    toggleExpand: (item: DataTableItem) => void;
                    isSelected: (items: DataTableItem[]) => boolean;
                    toggleSelect: (item: DataTableItem) => void;
                }) => vue.VNodeChild) | undefined;
                'item.data-table-select'?: ((args_0: {
                    index: number;
                    item: DataTableItem;
                    columns: InternalDataTableHeader[];
                    isExpanded: (item: DataTableItem) => boolean;
                    toggleExpand: (item: DataTableItem) => void;
                    isSelected: (items: DataTableItem[]) => boolean;
                    toggleSelect: (item: DataTableItem) => void;
                }) => vue.VNodeChild) | undefined;
                'item.data-table-expand'?: ((args_0: {
                    index: number;
                    item: DataTableItem;
                    columns: InternalDataTableHeader[];
                    isExpanded: (item: DataTableItem) => boolean;
                    toggleExpand: (item: DataTableItem) => void;
                    isSelected: (items: DataTableItem[]) => boolean;
                    toggleSelect: (item: DataTableItem) => void;
                }) => vue.VNodeChild) | undefined;
                colgroup?: ((args_0: InternalDataTableHeader) => vue.VNodeChild) | undefined;
                top?: (() => vue.VNodeChild) | undefined;
                headers?: (() => vue.VNodeChild) | undefined;
                body?: (() => vue.VNodeChild) | undefined;
                tbody?: (() => vue.VNodeChild) | undefined;
                thead?: (() => vue.VNodeChild) | undefined;
                tfoot?: (() => vue.VNodeChild) | undefined;
                bottom?: (() => vue.VNodeChild) | undefined;
                'footer.prepend'?: (() => vue.VNodeChild) | undefined;
            };
            'v-slots'?: {
                [x: `item.${string}`]: false | ((args_0: {
                    index: number;
                    item: DataTableItem;
                    columns: InternalDataTableHeader[];
                    isExpanded: (item: DataTableItem) => boolean;
                    toggleExpand: (item: DataTableItem) => void;
                    isSelected: (items: DataTableItem[]) => boolean;
                    toggleSelect: (item: DataTableItem) => void;
                }) => vue.VNodeChild) | undefined;
                default?: false | (() => vue.VNodeChild) | undefined;
                item?: false | ((args_0: {
                    index: number;
                    item: DataTableItem;
                    columns: InternalDataTableHeader[];
                    isExpanded: (item: DataTableItem) => boolean;
                    toggleExpand: (item: DataTableItem) => void;
                    isSelected: (items: DataTableItem[]) => boolean;
                    toggleSelect: (item: DataTableItem) => void;
                }) => vue.VNodeChild) | undefined;
                loading?: false | (() => vue.VNodeChild) | undefined;
                'group-header'?: false | ((args_0: {
                    index: number;
                    item: GroupHeaderItem;
                    columns: InternalDataTableHeader[];
                    isExpanded: (item: DataTableItem) => boolean;
                    toggleExpand: (item: DataTableItem) => void;
                    isSelected: (items: DataTableItem[]) => boolean;
                    toggleSelect: (item: DataTableItem) => void;
                    toggleGroup: (group: GroupHeaderItem) => void;
                    isGroupOpen: (group: GroupHeaderItem) => boolean;
                }) => vue.VNodeChild) | undefined;
                'no-data'?: false | (() => vue.VNodeChild) | undefined;
                'expanded-row'?: false | ((args_0: {
                    index: number;
                    item: DataTableItem;
                    columns: InternalDataTableHeader[];
                    isExpanded: (item: DataTableItem) => boolean;
                    toggleExpand: (item: DataTableItem) => void;
                    isSelected: (items: DataTableItem[]) => boolean;
                    toggleSelect: (item: DataTableItem) => void;
                }) => vue.VNodeChild) | undefined;
                'item.data-table-select'?: false | ((args_0: {
                    index: number;
                    item: DataTableItem;
                    columns: InternalDataTableHeader[];
                    isExpanded: (item: DataTableItem) => boolean;
                    toggleExpand: (item: DataTableItem) => void;
                    isSelected: (items: DataTableItem[]) => boolean;
                    toggleSelect: (item: DataTableItem) => void;
                }) => vue.VNodeChild) | undefined;
                'item.data-table-expand'?: false | ((args_0: {
                    index: number;
                    item: DataTableItem;
                    columns: InternalDataTableHeader[];
                    isExpanded: (item: DataTableItem) => boolean;
                    toggleExpand: (item: DataTableItem) => void;
                    isSelected: (items: DataTableItem[]) => boolean;
                    toggleSelect: (item: DataTableItem) => void;
                }) => vue.VNodeChild) | undefined;
                colgroup?: false | ((args_0: InternalDataTableHeader) => vue.VNodeChild) | undefined;
                top?: false | (() => vue.VNodeChild) | undefined;
                headers?: false | (() => vue.VNodeChild) | undefined;
                body?: false | (() => vue.VNodeChild) | undefined;
                tbody?: false | (() => vue.VNodeChild) | undefined;
                thead?: false | (() => vue.VNodeChild) | undefined;
                tfoot?: false | (() => vue.VNodeChild) | undefined;
                bottom?: false | (() => vue.VNodeChild) | undefined;
                'footer.prepend'?: false | (() => vue.VNodeChild) | undefined;
            } | undefined;
        } & {
            [x: `v-slot:item.${string}`]: false | ((args_0: {
                index: number;
                item: DataTableItem;
                columns: InternalDataTableHeader[];
                isExpanded: (item: DataTableItem) => boolean;
                toggleExpand: (item: DataTableItem) => void;
                isSelected: (items: DataTableItem[]) => boolean;
                toggleSelect: (item: DataTableItem) => void;
            }) => vue.VNodeChild) | undefined;
            "v-slot:default"?: false | (() => vue.VNodeChild) | undefined;
            "v-slot:item"?: false | ((args_0: {
                index: number;
                item: DataTableItem;
                columns: InternalDataTableHeader[];
                isExpanded: (item: DataTableItem) => boolean;
                toggleExpand: (item: DataTableItem) => void;
                isSelected: (items: DataTableItem[]) => boolean;
                toggleSelect: (item: DataTableItem) => void;
            }) => vue.VNodeChild) | undefined;
            "v-slot:loading"?: false | (() => vue.VNodeChild) | undefined;
            "v-slot:group-header"?: false | ((args_0: {
                index: number;
                item: GroupHeaderItem;
                columns: InternalDataTableHeader[];
                isExpanded: (item: DataTableItem) => boolean;
                toggleExpand: (item: DataTableItem) => void;
                isSelected: (items: DataTableItem[]) => boolean;
                toggleSelect: (item: DataTableItem) => void;
                toggleGroup: (group: GroupHeaderItem) => void;
                isGroupOpen: (group: GroupHeaderItem) => boolean;
            }) => vue.VNodeChild) | undefined;
            "v-slot:no-data"?: false | (() => vue.VNodeChild) | undefined;
            "v-slot:expanded-row"?: false | ((args_0: {
                index: number;
                item: DataTableItem;
                columns: InternalDataTableHeader[];
                isExpanded: (item: DataTableItem) => boolean;
                toggleExpand: (item: DataTableItem) => void;
                isSelected: (items: DataTableItem[]) => boolean;
                toggleSelect: (item: DataTableItem) => void;
            }) => vue.VNodeChild) | undefined;
            "v-slot:item.data-table-select"?: false | ((args_0: {
                index: number;
                item: DataTableItem;
                columns: InternalDataTableHeader[];
                isExpanded: (item: DataTableItem) => boolean;
                toggleExpand: (item: DataTableItem) => void;
                isSelected: (items: DataTableItem[]) => boolean;
                toggleSelect: (item: DataTableItem) => void;
            }) => vue.VNodeChild) | undefined;
            "v-slot:item.data-table-expand"?: false | ((args_0: {
                index: number;
                item: DataTableItem;
                columns: InternalDataTableHeader[];
                isExpanded: (item: DataTableItem) => boolean;
                toggleExpand: (item: DataTableItem) => void;
                isSelected: (items: DataTableItem[]) => boolean;
                toggleSelect: (item: DataTableItem) => void;
            }) => vue.VNodeChild) | undefined;
            "v-slot:colgroup"?: false | ((args_0: InternalDataTableHeader) => vue.VNodeChild) | undefined;
            "v-slot:top"?: false | (() => vue.VNodeChild) | undefined;
            "v-slot:headers"?: false | (() => vue.VNodeChild) | undefined;
            "v-slot:body"?: false | (() => vue.VNodeChild) | undefined;
            "v-slot:tbody"?: false | (() => vue.VNodeChild) | undefined;
            "v-slot:thead"?: false | (() => vue.VNodeChild) | undefined;
            "v-slot:tfoot"?: false | (() => vue.VNodeChild) | undefined;
            "v-slot:bottom"?: false | (() => vue.VNodeChild) | undefined;
            "v-slot:footer.prepend"?: false | (() => vue.VNodeChild) | undefined;
        } & {
            "onUpdate:modelValue"?: ((value: any[]) => any) | undefined;
            "onUpdate:sortBy"?: ((sortBy: any) => any) | undefined;
            "onUpdate:groupBy"?: ((value: any) => any) | undefined;
            "onUpdate:expanded"?: ((options: any) => any) | undefined;
            "onClick:row"?: ((e: Event, value: {
                item: DataTableItem;
            }) => any) | undefined;
            "onUpdate:page"?: ((page: number) => any) | undefined;
            "onUpdate:itemsPerPage"?: ((page: number) => any) | undefined;
            "onUpdate:options"?: ((options: any) => any) | undefined;
        } & vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, "expanded" | "page" | "headers" | "noDataText" | "loadingText" | "sortBy" | "items" | "modelValue" | "itemTitle" | "itemValue" | "itemChildren" | "itemProps" | "returnObject" | "hideNoData" | "hover" | "fixedHeader" | "fixedFooter" | "multiSort" | "mustSort" | "groupBy" | "showSelect" | "expandOnClick" | "showExpand" | "itemsPerPage">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: vue.Slot | undefined;
        }>;
        $root: vue.ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, vue.ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null;
        $parent: vue.ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, vue.ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null;
        $emit: ((event: "update:modelValue", value: any[]) => void) & ((event: "update:options", options: any) => void) & ((event: "update:page", page: number) => void) & ((event: "update:itemsPerPage", page: number) => void) & ((event: "update:sortBy", sortBy: any) => void) & ((event: "update:groupBy", value: any) => void) & ((event: "update:expanded", options: any) => void) & ((event: "click:row", e: Event, value: {
            item: DataTableItem;
        }) => void);
        $el: any;
        $options: vue.ComponentOptionsBase<{
            expanded: string[];
            page: string | number;
            headers: DataTableHeader[] | DataTableHeader[][];
            noDataText: string;
            loadingText: string;
            sortBy: SortItem[];
            items: any[];
            modelValue: any[];
            itemTitle: SelectItemKey;
            itemValue: NonNullable<SelectItemKey>;
            itemChildren: SelectItemKey;
            itemProps: SelectItemKey;
            returnObject: boolean;
            hideNoData: boolean;
            hover: boolean;
            fixedHeader: boolean;
            fixedFooter: boolean;
            multiSort: boolean;
            mustSort: boolean;
            groupBy: SortItem[];
            showSelect: boolean;
            expandOnClick: boolean;
            showExpand: boolean;
            itemsPerPage: string | number;
            itemsLength: string | number;
        } & {
            search?: string | undefined;
            height?: string | number | undefined;
            width?: string | number | undefined;
            color?: string | undefined;
            loading?: string | boolean | undefined;
            'onClick:row'?: ((e: Event, value: {
                item: DataTableItem;
            }) => void) | undefined;
        } & {
            $children?: vue.VNodeChild | (() => vue.VNodeChild) | {
                [x: `item.${string}`]: ((args_0: {
                    index: number;
                    item: DataTableItem;
                    columns: InternalDataTableHeader[];
                    isExpanded: (item: DataTableItem) => boolean;
                    toggleExpand: (item: DataTableItem) => void;
                    isSelected: (items: DataTableItem[]) => boolean;
                    toggleSelect: (item: DataTableItem) => void;
                }) => vue.VNodeChild) | undefined;
                default?: (() => vue.VNodeChild) | undefined;
                item?: ((args_0: {
                    index: number;
                    item: DataTableItem;
                    columns: InternalDataTableHeader[];
                    isExpanded: (item: DataTableItem) => boolean;
                    toggleExpand: (item: DataTableItem) => void;
                    isSelected: (items: DataTableItem[]) => boolean;
                    toggleSelect: (item: DataTableItem) => void;
                }) => vue.VNodeChild) | undefined;
                loading?: (() => vue.VNodeChild) | undefined;
                'group-header'?: ((args_0: {
                    index: number;
                    item: GroupHeaderItem;
                    columns: InternalDataTableHeader[];
                    isExpanded: (item: DataTableItem) => boolean;
                    toggleExpand: (item: DataTableItem) => void;
                    isSelected: (items: DataTableItem[]) => boolean;
                    toggleSelect: (item: DataTableItem) => void;
                    toggleGroup: (group: GroupHeaderItem) => void;
                    isGroupOpen: (group: GroupHeaderItem) => boolean;
                }) => vue.VNodeChild) | undefined;
                'no-data'?: (() => vue.VNodeChild) | undefined;
                'expanded-row'?: ((args_0: {
                    index: number;
                    item: DataTableItem;
                    columns: InternalDataTableHeader[];
                    isExpanded: (item: DataTableItem) => boolean;
                    toggleExpand: (item: DataTableItem) => void;
                    isSelected: (items: DataTableItem[]) => boolean;
                    toggleSelect: (item: DataTableItem) => void;
                }) => vue.VNodeChild) | undefined;
                'item.data-table-select'?: ((args_0: {
                    index: number;
                    item: DataTableItem;
                    columns: InternalDataTableHeader[];
                    isExpanded: (item: DataTableItem) => boolean;
                    toggleExpand: (item: DataTableItem) => void;
                    isSelected: (items: DataTableItem[]) => boolean;
                    toggleSelect: (item: DataTableItem) => void;
                }) => vue.VNodeChild) | undefined;
                'item.data-table-expand'?: ((args_0: {
                    index: number;
                    item: DataTableItem;
                    columns: InternalDataTableHeader[];
                    isExpanded: (item: DataTableItem) => boolean;
                    toggleExpand: (item: DataTableItem) => void;
                    isSelected: (items: DataTableItem[]) => boolean;
                    toggleSelect: (item: DataTableItem) => void;
                }) => vue.VNodeChild) | undefined;
                colgroup?: ((args_0: InternalDataTableHeader) => vue.VNodeChild) | undefined;
                top?: (() => vue.VNodeChild) | undefined;
                headers?: (() => vue.VNodeChild) | undefined;
                body?: (() => vue.VNodeChild) | undefined;
                tbody?: (() => vue.VNodeChild) | undefined;
                thead?: (() => vue.VNodeChild) | undefined;
                tfoot?: (() => vue.VNodeChild) | undefined;
                bottom?: (() => vue.VNodeChild) | undefined;
                'footer.prepend'?: (() => vue.VNodeChild) | undefined;
            };
            'v-slots'?: {
                [x: `item.${string}`]: false | ((args_0: {
                    index: number;
                    item: DataTableItem;
                    columns: InternalDataTableHeader[];
                    isExpanded: (item: DataTableItem) => boolean;
                    toggleExpand: (item: DataTableItem) => void;
                    isSelected: (items: DataTableItem[]) => boolean;
                    toggleSelect: (item: DataTableItem) => void;
                }) => vue.VNodeChild) | undefined;
                default?: false | (() => vue.VNodeChild) | undefined;
                item?: false | ((args_0: {
                    index: number;
                    item: DataTableItem;
                    columns: InternalDataTableHeader[];
                    isExpanded: (item: DataTableItem) => boolean;
                    toggleExpand: (item: DataTableItem) => void;
                    isSelected: (items: DataTableItem[]) => boolean;
                    toggleSelect: (item: DataTableItem) => void;
                }) => vue.VNodeChild) | undefined;
                loading?: false | (() => vue.VNodeChild) | undefined;
                'group-header'?: false | ((args_0: {
                    index: number;
                    item: GroupHeaderItem;
                    columns: InternalDataTableHeader[];
                    isExpanded: (item: DataTableItem) => boolean;
                    toggleExpand: (item: DataTableItem) => void;
                    isSelected: (items: DataTableItem[]) => boolean;
                    toggleSelect: (item: DataTableItem) => void;
                    toggleGroup: (group: GroupHeaderItem) => void;
                    isGroupOpen: (group: GroupHeaderItem) => boolean;
                }) => vue.VNodeChild) | undefined;
                'no-data'?: false | (() => vue.VNodeChild) | undefined;
                'expanded-row'?: false | ((args_0: {
                    index: number;
                    item: DataTableItem;
                    columns: InternalDataTableHeader[];
                    isExpanded: (item: DataTableItem) => boolean;
                    toggleExpand: (item: DataTableItem) => void;
                    isSelected: (items: DataTableItem[]) => boolean;
                    toggleSelect: (item: DataTableItem) => void;
                }) => vue.VNodeChild) | undefined;
                'item.data-table-select'?: false | ((args_0: {
                    index: number;
                    item: DataTableItem;
                    columns: InternalDataTableHeader[];
                    isExpanded: (item: DataTableItem) => boolean;
                    toggleExpand: (item: DataTableItem) => void;
                    isSelected: (items: DataTableItem[]) => boolean;
                    toggleSelect: (item: DataTableItem) => void;
                }) => vue.VNodeChild) | undefined;
                'item.data-table-expand'?: false | ((args_0: {
                    index: number;
                    item: DataTableItem;
                    columns: InternalDataTableHeader[];
                    isExpanded: (item: DataTableItem) => boolean;
                    toggleExpand: (item: DataTableItem) => void;
                    isSelected: (items: DataTableItem[]) => boolean;
                    toggleSelect: (item: DataTableItem) => void;
                }) => vue.VNodeChild) | undefined;
                colgroup?: false | ((args_0: InternalDataTableHeader) => vue.VNodeChild) | undefined;
                top?: false | (() => vue.VNodeChild) | undefined;
                headers?: false | (() => vue.VNodeChild) | undefined;
                body?: false | (() => vue.VNodeChild) | undefined;
                tbody?: false | (() => vue.VNodeChild) | undefined;
                thead?: false | (() => vue.VNodeChild) | undefined;
                tfoot?: false | (() => vue.VNodeChild) | undefined;
                bottom?: false | (() => vue.VNodeChild) | undefined;
                'footer.prepend'?: false | (() => vue.VNodeChild) | undefined;
            } | undefined;
        } & {
            [x: `v-slot:item.${string}`]: false | ((args_0: {
                index: number;
                item: DataTableItem;
                columns: InternalDataTableHeader[];
                isExpanded: (item: DataTableItem) => boolean;
                toggleExpand: (item: DataTableItem) => void;
                isSelected: (items: DataTableItem[]) => boolean;
                toggleSelect: (item: DataTableItem) => void;
            }) => vue.VNodeChild) | undefined;
            "v-slot:default"?: false | (() => vue.VNodeChild) | undefined;
            "v-slot:item"?: false | ((args_0: {
                index: number;
                item: DataTableItem;
                columns: InternalDataTableHeader[];
                isExpanded: (item: DataTableItem) => boolean;
                toggleExpand: (item: DataTableItem) => void;
                isSelected: (items: DataTableItem[]) => boolean;
                toggleSelect: (item: DataTableItem) => void;
            }) => vue.VNodeChild) | undefined;
            "v-slot:loading"?: false | (() => vue.VNodeChild) | undefined;
            "v-slot:group-header"?: false | ((args_0: {
                index: number;
                item: GroupHeaderItem;
                columns: InternalDataTableHeader[];
                isExpanded: (item: DataTableItem) => boolean;
                toggleExpand: (item: DataTableItem) => void;
                isSelected: (items: DataTableItem[]) => boolean;
                toggleSelect: (item: DataTableItem) => void;
                toggleGroup: (group: GroupHeaderItem) => void;
                isGroupOpen: (group: GroupHeaderItem) => boolean;
            }) => vue.VNodeChild) | undefined;
            "v-slot:no-data"?: false | (() => vue.VNodeChild) | undefined;
            "v-slot:expanded-row"?: false | ((args_0: {
                index: number;
                item: DataTableItem;
                columns: InternalDataTableHeader[];
                isExpanded: (item: DataTableItem) => boolean;
                toggleExpand: (item: DataTableItem) => void;
                isSelected: (items: DataTableItem[]) => boolean;
                toggleSelect: (item: DataTableItem) => void;
            }) => vue.VNodeChild) | undefined;
            "v-slot:item.data-table-select"?: false | ((args_0: {
                index: number;
                item: DataTableItem;
                columns: InternalDataTableHeader[];
                isExpanded: (item: DataTableItem) => boolean;
                toggleExpand: (item: DataTableItem) => void;
                isSelected: (items: DataTableItem[]) => boolean;
                toggleSelect: (item: DataTableItem) => void;
            }) => vue.VNodeChild) | undefined;
            "v-slot:item.data-table-expand"?: false | ((args_0: {
                index: number;
                item: DataTableItem;
                columns: InternalDataTableHeader[];
                isExpanded: (item: DataTableItem) => boolean;
                toggleExpand: (item: DataTableItem) => void;
                isSelected: (items: DataTableItem[]) => boolean;
                toggleSelect: (item: DataTableItem) => void;
            }) => vue.VNodeChild) | undefined;
            "v-slot:colgroup"?: false | ((args_0: InternalDataTableHeader) => vue.VNodeChild) | undefined;
            "v-slot:top"?: false | (() => vue.VNodeChild) | undefined;
            "v-slot:headers"?: false | (() => vue.VNodeChild) | undefined;
            "v-slot:body"?: false | (() => vue.VNodeChild) | undefined;
            "v-slot:tbody"?: false | (() => vue.VNodeChild) | undefined;
            "v-slot:thead"?: false | (() => vue.VNodeChild) | undefined;
            "v-slot:tfoot"?: false | (() => vue.VNodeChild) | undefined;
            "v-slot:bottom"?: false | (() => vue.VNodeChild) | undefined;
            "v-slot:footer.prepend"?: false | (() => vue.VNodeChild) | undefined;
        } & {
            "onUpdate:modelValue"?: ((value: any[]) => any) | undefined;
            "onUpdate:sortBy"?: ((sortBy: any) => any) | undefined;
            "onUpdate:groupBy"?: ((value: any) => any) | undefined;
            "onUpdate:expanded"?: ((options: any) => any) | undefined;
            "onClick:row"?: ((e: Event, value: {
                item: DataTableItem;
            }) => any) | undefined;
            "onUpdate:page"?: ((page: number) => any) | undefined;
            "onUpdate:itemsPerPage"?: ((page: number) => any) | undefined;
            "onUpdate:options"?: ((options: any) => any) | undefined;
        }, void, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, {
            'update:modelValue': (value: any[]) => true;
            'update:page': (page: number) => true;
            'update:itemsPerPage': (page: number) => true;
            'update:sortBy': (sortBy: any) => true;
            'update:options': (options: any) => true;
            'update:expanded': (options: any) => true;
            'update:groupBy': (value: any) => true;
            'click:row': (e: Event, value: {
                item: DataTableItem;
            }) => true;
        }, string, {
            expanded: string[];
            page: string | number;
            headers: DataTableHeader[] | DataTableHeader[][];
            noDataText: string;
            loadingText: string;
            sortBy: SortItem[];
            items: any[];
            modelValue: any[];
            itemTitle: SelectItemKey;
            itemValue: NonNullable<SelectItemKey>;
            itemChildren: SelectItemKey;
            itemProps: SelectItemKey;
            returnObject: boolean;
            hideNoData: boolean;
            hover: boolean;
            fixedHeader: boolean;
            fixedFooter: boolean;
            multiSort: boolean;
            mustSort: boolean;
            groupBy: SortItem[];
            showSelect: boolean;
            expandOnClick: boolean;
            showExpand: boolean;
            itemsPerPage: string | number;
        }, {}, string> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: vue.DebuggerEvent) => void) | ((e: vue.DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: vue.DebuggerEvent) => void) | ((e: vue.DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: vue.ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, vue.ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null, info: string) => boolean | void) | ((err: unknown, instance: vue.ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, vue.ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof vue.nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: vue.WatchOptions<boolean> | undefined): vue.WatchStopHandle;
    } & {
        expanded: string[];
        page: string | number;
        headers: DataTableHeader[] | DataTableHeader[][];
        noDataText: string;
        loadingText: string;
        sortBy: SortItem[];
        items: any[];
        modelValue: any[];
        itemTitle: SelectItemKey;
        itemValue: NonNullable<SelectItemKey>;
        itemChildren: SelectItemKey;
        itemProps: SelectItemKey;
        returnObject: boolean;
        hideNoData: boolean;
        hover: boolean;
        fixedHeader: boolean;
        fixedFooter: boolean;
        multiSort: boolean;
        mustSort: boolean;
        groupBy: SortItem[];
        showSelect: boolean;
        expandOnClick: boolean;
        showExpand: boolean;
        itemsPerPage: string | number;
        itemsLength: string | number;
    } & {
        search?: string | undefined;
        height?: string | number | undefined;
        width?: string | number | undefined;
        color?: string | undefined;
        loading?: string | boolean | undefined;
        'onClick:row'?: ((e: Event, value: {
            item: DataTableItem;
        }) => void) | undefined;
    } & {
        $children?: vue.VNodeChild | (() => vue.VNodeChild) | {
            [x: `item.${string}`]: ((args_0: {
                index: number;
                item: DataTableItem;
                columns: InternalDataTableHeader[];
                isExpanded: (item: DataTableItem) => boolean;
                toggleExpand: (item: DataTableItem) => void;
                isSelected: (items: DataTableItem[]) => boolean;
                toggleSelect: (item: DataTableItem) => void;
            }) => vue.VNodeChild) | undefined;
            default?: (() => vue.VNodeChild) | undefined;
            item?: ((args_0: {
                index: number;
                item: DataTableItem;
                columns: InternalDataTableHeader[];
                isExpanded: (item: DataTableItem) => boolean;
                toggleExpand: (item: DataTableItem) => void;
                isSelected: (items: DataTableItem[]) => boolean;
                toggleSelect: (item: DataTableItem) => void;
            }) => vue.VNodeChild) | undefined;
            loading?: (() => vue.VNodeChild) | undefined;
            'group-header'?: ((args_0: {
                index: number;
                item: GroupHeaderItem;
                columns: InternalDataTableHeader[];
                isExpanded: (item: DataTableItem) => boolean;
                toggleExpand: (item: DataTableItem) => void;
                isSelected: (items: DataTableItem[]) => boolean;
                toggleSelect: (item: DataTableItem) => void;
                toggleGroup: (group: GroupHeaderItem) => void;
                isGroupOpen: (group: GroupHeaderItem) => boolean;
            }) => vue.VNodeChild) | undefined;
            'no-data'?: (() => vue.VNodeChild) | undefined;
            'expanded-row'?: ((args_0: {
                index: number;
                item: DataTableItem;
                columns: InternalDataTableHeader[];
                isExpanded: (item: DataTableItem) => boolean;
                toggleExpand: (item: DataTableItem) => void;
                isSelected: (items: DataTableItem[]) => boolean;
                toggleSelect: (item: DataTableItem) => void;
            }) => vue.VNodeChild) | undefined;
            'item.data-table-select'?: ((args_0: {
                index: number;
                item: DataTableItem;
                columns: InternalDataTableHeader[];
                isExpanded: (item: DataTableItem) => boolean;
                toggleExpand: (item: DataTableItem) => void;
                isSelected: (items: DataTableItem[]) => boolean;
                toggleSelect: (item: DataTableItem) => void;
            }) => vue.VNodeChild) | undefined;
            'item.data-table-expand'?: ((args_0: {
                index: number;
                item: DataTableItem;
                columns: InternalDataTableHeader[];
                isExpanded: (item: DataTableItem) => boolean;
                toggleExpand: (item: DataTableItem) => void;
                isSelected: (items: DataTableItem[]) => boolean;
                toggleSelect: (item: DataTableItem) => void;
            }) => vue.VNodeChild) | undefined;
            colgroup?: ((args_0: InternalDataTableHeader) => vue.VNodeChild) | undefined;
            top?: (() => vue.VNodeChild) | undefined;
            headers?: (() => vue.VNodeChild) | undefined;
            body?: (() => vue.VNodeChild) | undefined;
            tbody?: (() => vue.VNodeChild) | undefined;
            thead?: (() => vue.VNodeChild) | undefined;
            tfoot?: (() => vue.VNodeChild) | undefined;
            bottom?: (() => vue.VNodeChild) | undefined;
            'footer.prepend'?: (() => vue.VNodeChild) | undefined;
        };
        'v-slots'?: {
            [x: `item.${string}`]: false | ((args_0: {
                index: number;
                item: DataTableItem;
                columns: InternalDataTableHeader[];
                isExpanded: (item: DataTableItem) => boolean;
                toggleExpand: (item: DataTableItem) => void;
                isSelected: (items: DataTableItem[]) => boolean;
                toggleSelect: (item: DataTableItem) => void;
            }) => vue.VNodeChild) | undefined;
            default?: false | (() => vue.VNodeChild) | undefined;
            item?: false | ((args_0: {
                index: number;
                item: DataTableItem;
                columns: InternalDataTableHeader[];
                isExpanded: (item: DataTableItem) => boolean;
                toggleExpand: (item: DataTableItem) => void;
                isSelected: (items: DataTableItem[]) => boolean;
                toggleSelect: (item: DataTableItem) => void;
            }) => vue.VNodeChild) | undefined;
            loading?: false | (() => vue.VNodeChild) | undefined;
            'group-header'?: false | ((args_0: {
                index: number;
                item: GroupHeaderItem;
                columns: InternalDataTableHeader[];
                isExpanded: (item: DataTableItem) => boolean;
                toggleExpand: (item: DataTableItem) => void;
                isSelected: (items: DataTableItem[]) => boolean;
                toggleSelect: (item: DataTableItem) => void;
                toggleGroup: (group: GroupHeaderItem) => void;
                isGroupOpen: (group: GroupHeaderItem) => boolean;
            }) => vue.VNodeChild) | undefined;
            'no-data'?: false | (() => vue.VNodeChild) | undefined;
            'expanded-row'?: false | ((args_0: {
                index: number;
                item: DataTableItem;
                columns: InternalDataTableHeader[];
                isExpanded: (item: DataTableItem) => boolean;
                toggleExpand: (item: DataTableItem) => void;
                isSelected: (items: DataTableItem[]) => boolean;
                toggleSelect: (item: DataTableItem) => void;
            }) => vue.VNodeChild) | undefined;
            'item.data-table-select'?: false | ((args_0: {
                index: number;
                item: DataTableItem;
                columns: InternalDataTableHeader[];
                isExpanded: (item: DataTableItem) => boolean;
                toggleExpand: (item: DataTableItem) => void;
                isSelected: (items: DataTableItem[]) => boolean;
                toggleSelect: (item: DataTableItem) => void;
            }) => vue.VNodeChild) | undefined;
            'item.data-table-expand'?: false | ((args_0: {
                index: number;
                item: DataTableItem;
                columns: InternalDataTableHeader[];
                isExpanded: (item: DataTableItem) => boolean;
                toggleExpand: (item: DataTableItem) => void;
                isSelected: (items: DataTableItem[]) => boolean;
                toggleSelect: (item: DataTableItem) => void;
            }) => vue.VNodeChild) | undefined;
            colgroup?: false | ((args_0: InternalDataTableHeader) => vue.VNodeChild) | undefined;
            top?: false | (() => vue.VNodeChild) | undefined;
            headers?: false | (() => vue.VNodeChild) | undefined;
            body?: false | (() => vue.VNodeChild) | undefined;
            tbody?: false | (() => vue.VNodeChild) | undefined;
            thead?: false | (() => vue.VNodeChild) | undefined;
            tfoot?: false | (() => vue.VNodeChild) | undefined;
            bottom?: false | (() => vue.VNodeChild) | undefined;
            'footer.prepend'?: false | (() => vue.VNodeChild) | undefined;
        } | undefined;
    } & {
        [x: `v-slot:item.${string}`]: false | ((args_0: {
            index: number;
            item: DataTableItem;
            columns: InternalDataTableHeader[];
            isExpanded: (item: DataTableItem) => boolean;
            toggleExpand: (item: DataTableItem) => void;
            isSelected: (items: DataTableItem[]) => boolean;
            toggleSelect: (item: DataTableItem) => void;
        }) => vue.VNodeChild) | undefined;
        "v-slot:default"?: false | (() => vue.VNodeChild) | undefined;
        "v-slot:item"?: false | ((args_0: {
            index: number;
            item: DataTableItem;
            columns: InternalDataTableHeader[];
            isExpanded: (item: DataTableItem) => boolean;
            toggleExpand: (item: DataTableItem) => void;
            isSelected: (items: DataTableItem[]) => boolean;
            toggleSelect: (item: DataTableItem) => void;
        }) => vue.VNodeChild) | undefined;
        "v-slot:loading"?: false | (() => vue.VNodeChild) | undefined;
        "v-slot:group-header"?: false | ((args_0: {
            index: number;
            item: GroupHeaderItem;
            columns: InternalDataTableHeader[];
            isExpanded: (item: DataTableItem) => boolean;
            toggleExpand: (item: DataTableItem) => void;
            isSelected: (items: DataTableItem[]) => boolean;
            toggleSelect: (item: DataTableItem) => void;
            toggleGroup: (group: GroupHeaderItem) => void;
            isGroupOpen: (group: GroupHeaderItem) => boolean;
        }) => vue.VNodeChild) | undefined;
        "v-slot:no-data"?: false | (() => vue.VNodeChild) | undefined;
        "v-slot:expanded-row"?: false | ((args_0: {
            index: number;
            item: DataTableItem;
            columns: InternalDataTableHeader[];
            isExpanded: (item: DataTableItem) => boolean;
            toggleExpand: (item: DataTableItem) => void;
            isSelected: (items: DataTableItem[]) => boolean;
            toggleSelect: (item: DataTableItem) => void;
        }) => vue.VNodeChild) | undefined;
        "v-slot:item.data-table-select"?: false | ((args_0: {
            index: number;
            item: DataTableItem;
            columns: InternalDataTableHeader[];
            isExpanded: (item: DataTableItem) => boolean;
            toggleExpand: (item: DataTableItem) => void;
            isSelected: (items: DataTableItem[]) => boolean;
            toggleSelect: (item: DataTableItem) => void;
        }) => vue.VNodeChild) | undefined;
        "v-slot:item.data-table-expand"?: false | ((args_0: {
            index: number;
            item: DataTableItem;
            columns: InternalDataTableHeader[];
            isExpanded: (item: DataTableItem) => boolean;
            toggleExpand: (item: DataTableItem) => void;
            isSelected: (items: DataTableItem[]) => boolean;
            toggleSelect: (item: DataTableItem) => void;
        }) => vue.VNodeChild) | undefined;
        "v-slot:colgroup"?: false | ((args_0: InternalDataTableHeader) => vue.VNodeChild) | undefined;
        "v-slot:top"?: false | (() => vue.VNodeChild) | undefined;
        "v-slot:headers"?: false | (() => vue.VNodeChild) | undefined;
        "v-slot:body"?: false | (() => vue.VNodeChild) | undefined;
        "v-slot:tbody"?: false | (() => vue.VNodeChild) | undefined;
        "v-slot:thead"?: false | (() => vue.VNodeChild) | undefined;
        "v-slot:tfoot"?: false | (() => vue.VNodeChild) | undefined;
        "v-slot:bottom"?: false | (() => vue.VNodeChild) | undefined;
        "v-slot:footer.prepend"?: false | (() => vue.VNodeChild) | undefined;
    } & {
        "onUpdate:modelValue"?: ((value: any[]) => any) | undefined;
        "onUpdate:sortBy"?: ((sortBy: any) => any) | undefined;
        "onUpdate:groupBy"?: ((value: any) => any) | undefined;
        "onUpdate:expanded"?: ((options: any) => any) | undefined;
        "onClick:row"?: ((e: Event, value: {
            item: DataTableItem;
        }) => any) | undefined;
        "onUpdate:page"?: ((page: number) => any) | undefined;
        "onUpdate:itemsPerPage"?: ((page: number) => any) | undefined;
        "onUpdate:options"?: ((options: any) => any) | undefined;
    } & vue.ShallowUnwrapRef<{}> & {} & vue.ComponentCustomProperties & {};
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & vue.ComponentOptionsBase<{
    expanded: string[];
    page: string | number;
    headers: DataTableHeader[] | DataTableHeader[][];
    noDataText: string;
    loadingText: string;
    sortBy: SortItem[];
    items: any[];
    modelValue: any[];
    itemTitle: SelectItemKey;
    itemValue: NonNullable<SelectItemKey>;
    itemChildren: SelectItemKey;
    itemProps: SelectItemKey;
    returnObject: boolean;
    hideNoData: boolean;
    hover: boolean;
    fixedHeader: boolean;
    fixedFooter: boolean;
    multiSort: boolean;
    mustSort: boolean;
    groupBy: SortItem[];
    showSelect: boolean;
    expandOnClick: boolean;
    showExpand: boolean;
    itemsPerPage: string | number;
    itemsLength: string | number;
} & {
    search?: string | undefined;
    height?: string | number | undefined;
    width?: string | number | undefined;
    color?: string | undefined;
    loading?: string | boolean | undefined;
    'onClick:row'?: ((e: Event, value: {
        item: DataTableItem;
    }) => void) | undefined;
} & {
    $children?: vue.VNodeChild | (() => vue.VNodeChild) | {
        [x: `item.${string}`]: ((args_0: {
            index: number;
            item: DataTableItem;
            columns: InternalDataTableHeader[];
            isExpanded: (item: DataTableItem) => boolean;
            toggleExpand: (item: DataTableItem) => void;
            isSelected: (items: DataTableItem[]) => boolean;
            toggleSelect: (item: DataTableItem) => void;
        }) => vue.VNodeChild) | undefined;
        default?: (() => vue.VNodeChild) | undefined;
        item?: ((args_0: {
            index: number;
            item: DataTableItem;
            columns: InternalDataTableHeader[];
            isExpanded: (item: DataTableItem) => boolean;
            toggleExpand: (item: DataTableItem) => void;
            isSelected: (items: DataTableItem[]) => boolean;
            toggleSelect: (item: DataTableItem) => void;
        }) => vue.VNodeChild) | undefined;
        loading?: (() => vue.VNodeChild) | undefined;
        'group-header'?: ((args_0: {
            index: number;
            item: GroupHeaderItem;
            columns: InternalDataTableHeader[];
            isExpanded: (item: DataTableItem) => boolean;
            toggleExpand: (item: DataTableItem) => void;
            isSelected: (items: DataTableItem[]) => boolean;
            toggleSelect: (item: DataTableItem) => void;
            toggleGroup: (group: GroupHeaderItem) => void;
            isGroupOpen: (group: GroupHeaderItem) => boolean;
        }) => vue.VNodeChild) | undefined;
        'no-data'?: (() => vue.VNodeChild) | undefined;
        'expanded-row'?: ((args_0: {
            index: number;
            item: DataTableItem;
            columns: InternalDataTableHeader[];
            isExpanded: (item: DataTableItem) => boolean;
            toggleExpand: (item: DataTableItem) => void;
            isSelected: (items: DataTableItem[]) => boolean;
            toggleSelect: (item: DataTableItem) => void;
        }) => vue.VNodeChild) | undefined;
        'item.data-table-select'?: ((args_0: {
            index: number;
            item: DataTableItem;
            columns: InternalDataTableHeader[];
            isExpanded: (item: DataTableItem) => boolean;
            toggleExpand: (item: DataTableItem) => void;
            isSelected: (items: DataTableItem[]) => boolean;
            toggleSelect: (item: DataTableItem) => void;
        }) => vue.VNodeChild) | undefined;
        'item.data-table-expand'?: ((args_0: {
            index: number;
            item: DataTableItem;
            columns: InternalDataTableHeader[];
            isExpanded: (item: DataTableItem) => boolean;
            toggleExpand: (item: DataTableItem) => void;
            isSelected: (items: DataTableItem[]) => boolean;
            toggleSelect: (item: DataTableItem) => void;
        }) => vue.VNodeChild) | undefined;
        colgroup?: ((args_0: InternalDataTableHeader) => vue.VNodeChild) | undefined;
        top?: (() => vue.VNodeChild) | undefined;
        headers?: (() => vue.VNodeChild) | undefined;
        body?: (() => vue.VNodeChild) | undefined;
        tbody?: (() => vue.VNodeChild) | undefined;
        thead?: (() => vue.VNodeChild) | undefined;
        tfoot?: (() => vue.VNodeChild) | undefined;
        bottom?: (() => vue.VNodeChild) | undefined;
        'footer.prepend'?: (() => vue.VNodeChild) | undefined;
    };
    'v-slots'?: {
        [x: `item.${string}`]: false | ((args_0: {
            index: number;
            item: DataTableItem;
            columns: InternalDataTableHeader[];
            isExpanded: (item: DataTableItem) => boolean;
            toggleExpand: (item: DataTableItem) => void;
            isSelected: (items: DataTableItem[]) => boolean;
            toggleSelect: (item: DataTableItem) => void;
        }) => vue.VNodeChild) | undefined;
        default?: false | (() => vue.VNodeChild) | undefined;
        item?: false | ((args_0: {
            index: number;
            item: DataTableItem;
            columns: InternalDataTableHeader[];
            isExpanded: (item: DataTableItem) => boolean;
            toggleExpand: (item: DataTableItem) => void;
            isSelected: (items: DataTableItem[]) => boolean;
            toggleSelect: (item: DataTableItem) => void;
        }) => vue.VNodeChild) | undefined;
        loading?: false | (() => vue.VNodeChild) | undefined;
        'group-header'?: false | ((args_0: {
            index: number;
            item: GroupHeaderItem;
            columns: InternalDataTableHeader[];
            isExpanded: (item: DataTableItem) => boolean;
            toggleExpand: (item: DataTableItem) => void;
            isSelected: (items: DataTableItem[]) => boolean;
            toggleSelect: (item: DataTableItem) => void;
            toggleGroup: (group: GroupHeaderItem) => void;
            isGroupOpen: (group: GroupHeaderItem) => boolean;
        }) => vue.VNodeChild) | undefined;
        'no-data'?: false | (() => vue.VNodeChild) | undefined;
        'expanded-row'?: false | ((args_0: {
            index: number;
            item: DataTableItem;
            columns: InternalDataTableHeader[];
            isExpanded: (item: DataTableItem) => boolean;
            toggleExpand: (item: DataTableItem) => void;
            isSelected: (items: DataTableItem[]) => boolean;
            toggleSelect: (item: DataTableItem) => void;
        }) => vue.VNodeChild) | undefined;
        'item.data-table-select'?: false | ((args_0: {
            index: number;
            item: DataTableItem;
            columns: InternalDataTableHeader[];
            isExpanded: (item: DataTableItem) => boolean;
            toggleExpand: (item: DataTableItem) => void;
            isSelected: (items: DataTableItem[]) => boolean;
            toggleSelect: (item: DataTableItem) => void;
        }) => vue.VNodeChild) | undefined;
        'item.data-table-expand'?: false | ((args_0: {
            index: number;
            item: DataTableItem;
            columns: InternalDataTableHeader[];
            isExpanded: (item: DataTableItem) => boolean;
            toggleExpand: (item: DataTableItem) => void;
            isSelected: (items: DataTableItem[]) => boolean;
            toggleSelect: (item: DataTableItem) => void;
        }) => vue.VNodeChild) | undefined;
        colgroup?: false | ((args_0: InternalDataTableHeader) => vue.VNodeChild) | undefined;
        top?: false | (() => vue.VNodeChild) | undefined;
        headers?: false | (() => vue.VNodeChild) | undefined;
        body?: false | (() => vue.VNodeChild) | undefined;
        tbody?: false | (() => vue.VNodeChild) | undefined;
        thead?: false | (() => vue.VNodeChild) | undefined;
        tfoot?: false | (() => vue.VNodeChild) | undefined;
        bottom?: false | (() => vue.VNodeChild) | undefined;
        'footer.prepend'?: false | (() => vue.VNodeChild) | undefined;
    } | undefined;
} & {
    [x: `v-slot:item.${string}`]: false | ((args_0: {
        index: number;
        item: DataTableItem;
        columns: InternalDataTableHeader[];
        isExpanded: (item: DataTableItem) => boolean;
        toggleExpand: (item: DataTableItem) => void;
        isSelected: (items: DataTableItem[]) => boolean;
        toggleSelect: (item: DataTableItem) => void;
    }) => vue.VNodeChild) | undefined;
    "v-slot:default"?: false | (() => vue.VNodeChild) | undefined;
    "v-slot:item"?: false | ((args_0: {
        index: number;
        item: DataTableItem;
        columns: InternalDataTableHeader[];
        isExpanded: (item: DataTableItem) => boolean;
        toggleExpand: (item: DataTableItem) => void;
        isSelected: (items: DataTableItem[]) => boolean;
        toggleSelect: (item: DataTableItem) => void;
    }) => vue.VNodeChild) | undefined;
    "v-slot:loading"?: false | (() => vue.VNodeChild) | undefined;
    "v-slot:group-header"?: false | ((args_0: {
        index: number;
        item: GroupHeaderItem;
        columns: InternalDataTableHeader[];
        isExpanded: (item: DataTableItem) => boolean;
        toggleExpand: (item: DataTableItem) => void;
        isSelected: (items: DataTableItem[]) => boolean;
        toggleSelect: (item: DataTableItem) => void;
        toggleGroup: (group: GroupHeaderItem) => void;
        isGroupOpen: (group: GroupHeaderItem) => boolean;
    }) => vue.VNodeChild) | undefined;
    "v-slot:no-data"?: false | (() => vue.VNodeChild) | undefined;
    "v-slot:expanded-row"?: false | ((args_0: {
        index: number;
        item: DataTableItem;
        columns: InternalDataTableHeader[];
        isExpanded: (item: DataTableItem) => boolean;
        toggleExpand: (item: DataTableItem) => void;
        isSelected: (items: DataTableItem[]) => boolean;
        toggleSelect: (item: DataTableItem) => void;
    }) => vue.VNodeChild) | undefined;
    "v-slot:item.data-table-select"?: false | ((args_0: {
        index: number;
        item: DataTableItem;
        columns: InternalDataTableHeader[];
        isExpanded: (item: DataTableItem) => boolean;
        toggleExpand: (item: DataTableItem) => void;
        isSelected: (items: DataTableItem[]) => boolean;
        toggleSelect: (item: DataTableItem) => void;
    }) => vue.VNodeChild) | undefined;
    "v-slot:item.data-table-expand"?: false | ((args_0: {
        index: number;
        item: DataTableItem;
        columns: InternalDataTableHeader[];
        isExpanded: (item: DataTableItem) => boolean;
        toggleExpand: (item: DataTableItem) => void;
        isSelected: (items: DataTableItem[]) => boolean;
        toggleSelect: (item: DataTableItem) => void;
    }) => vue.VNodeChild) | undefined;
    "v-slot:colgroup"?: false | ((args_0: InternalDataTableHeader) => vue.VNodeChild) | undefined;
    "v-slot:top"?: false | (() => vue.VNodeChild) | undefined;
    "v-slot:headers"?: false | (() => vue.VNodeChild) | undefined;
    "v-slot:body"?: false | (() => vue.VNodeChild) | undefined;
    "v-slot:tbody"?: false | (() => vue.VNodeChild) | undefined;
    "v-slot:thead"?: false | (() => vue.VNodeChild) | undefined;
    "v-slot:tfoot"?: false | (() => vue.VNodeChild) | undefined;
    "v-slot:bottom"?: false | (() => vue.VNodeChild) | undefined;
    "v-slot:footer.prepend"?: false | (() => vue.VNodeChild) | undefined;
} & {
    "onUpdate:modelValue"?: ((value: any[]) => any) | undefined;
    "onUpdate:sortBy"?: ((sortBy: any) => any) | undefined;
    "onUpdate:groupBy"?: ((value: any) => any) | undefined;
    "onUpdate:expanded"?: ((options: any) => any) | undefined;
    "onClick:row"?: ((e: Event, value: {
        item: DataTableItem;
    }) => any) | undefined;
    "onUpdate:page"?: ((page: number) => any) | undefined;
    "onUpdate:itemsPerPage"?: ((page: number) => any) | undefined;
    "onUpdate:options"?: ((options: any) => any) | undefined;
}, void, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, {
    'update:modelValue': (value: any[]) => true;
    'update:page': (page: number) => true;
    'update:itemsPerPage': (page: number) => true;
    'update:sortBy': (sortBy: any) => true;
    'update:options': (options: any) => true;
    'update:expanded': (options: any) => true;
    'update:groupBy': (value: any) => true;
    'click:row': (e: Event, value: {
        item: DataTableItem;
    }) => true;
}, string, {
    expanded: string[];
    page: string | number;
    headers: DataTableHeader[] | DataTableHeader[][];
    noDataText: string;
    loadingText: string;
    sortBy: SortItem[];
    items: any[];
    modelValue: any[];
    itemTitle: SelectItemKey;
    itemValue: NonNullable<SelectItemKey>;
    itemChildren: SelectItemKey;
    itemProps: SelectItemKey;
    returnObject: boolean;
    hideNoData: boolean;
    hover: boolean;
    fixedHeader: boolean;
    fixedFooter: boolean;
    multiSort: boolean;
    mustSort: boolean;
    groupBy: SortItem[];
    showSelect: boolean;
    expandOnClick: boolean;
    showExpand: boolean;
    itemsPerPage: string | number;
}, {}, string> & vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps & FilterPropsOptions<{
    groupBy: {
        type: vue.PropType<SortItem[]>;
        default: () => never[];
    };
    page: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    itemsPerPage: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    sortBy: {
        type: vue.PropType<SortItem[]>;
        default: () => never[];
    };
    multiSort: BooleanConstructor;
    mustSort: BooleanConstructor;
    showSelect: BooleanConstructor;
    modelValue: {
        type: vue.PropType<any[]>;
        default: () => never[];
    };
    items: {
        type: vue.PropType<any[]>;
        default: () => never[];
    };
    itemTitle: {
        type: vue.PropType<SelectItemKey>;
        default: string;
    };
    itemValue: Omit<{
        type: vue.PropType<SelectItemKey>;
        default: string;
    }, "type" | "default"> & {
        type: vue.PropType<NonNullable<SelectItemKey>>;
        default: NonNullable<SelectItemKey>;
    };
    itemChildren: {
        type: vue.PropType<SelectItemKey>;
        default: string;
    };
    itemProps: {
        type: vue.PropType<SelectItemKey>;
        default: string;
    };
    returnObject: BooleanConstructor;
    headers: {
        type: vue.PropType<DataTableHeader[] | DataTableHeader[][]>;
        default: () => never[];
    };
    expandOnClick: BooleanConstructor;
    showExpand: BooleanConstructor;
    expanded: {
        type: vue.PropType<string[]>;
        default: () => never[];
    };
    hideNoData: BooleanConstructor;
    hover: BooleanConstructor;
    noDataText: {
        type: StringConstructor;
        default: string;
    };
    height: (StringConstructor | NumberConstructor)[];
    width: (StringConstructor | NumberConstructor)[];
    fixedHeader: BooleanConstructor;
    fixedFooter: BooleanConstructor;
    'onClick:row': vue.PropType<(e: Event, value: {
        item: DataTableItem;
    }) => void>;
    search: StringConstructor;
    color: StringConstructor;
    loading: (StringConstructor | BooleanConstructor)[];
    loadingText: {
        type: StringConstructor;
        default: string;
    };
    itemsLength: {
        type: (StringConstructor | NumberConstructor)[];
        required: true;
    };
}, vue.ExtractPropTypes<{
    groupBy: {
        type: vue.PropType<SortItem[]>;
        default: () => never[];
    };
    page: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    itemsPerPage: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    sortBy: {
        type: vue.PropType<SortItem[]>;
        default: () => never[];
    };
    multiSort: BooleanConstructor;
    mustSort: BooleanConstructor;
    showSelect: BooleanConstructor;
    modelValue: {
        type: vue.PropType<any[]>;
        default: () => never[];
    };
    items: {
        type: vue.PropType<any[]>;
        default: () => never[];
    };
    itemTitle: {
        type: vue.PropType<SelectItemKey>;
        default: string;
    };
    itemValue: Omit<{
        type: vue.PropType<SelectItemKey>;
        default: string;
    }, "type" | "default"> & {
        type: vue.PropType<NonNullable<SelectItemKey>>;
        default: NonNullable<SelectItemKey>;
    };
    itemChildren: {
        type: vue.PropType<SelectItemKey>;
        default: string;
    };
    itemProps: {
        type: vue.PropType<SelectItemKey>;
        default: string;
    };
    returnObject: BooleanConstructor;
    headers: {
        type: vue.PropType<DataTableHeader[] | DataTableHeader[][]>;
        default: () => never[];
    };
    expandOnClick: BooleanConstructor;
    showExpand: BooleanConstructor;
    expanded: {
        type: vue.PropType<string[]>;
        default: () => never[];
    };
    hideNoData: BooleanConstructor;
    hover: BooleanConstructor;
    noDataText: {
        type: StringConstructor;
        default: string;
    };
    height: (StringConstructor | NumberConstructor)[];
    width: (StringConstructor | NumberConstructor)[];
    fixedHeader: BooleanConstructor;
    fixedFooter: BooleanConstructor;
    'onClick:row': vue.PropType<(e: Event, value: {
        item: DataTableItem;
    }) => void>;
    search: StringConstructor;
    color: StringConstructor;
    loading: (StringConstructor | BooleanConstructor)[];
    loadingText: {
        type: StringConstructor;
        default: string;
    };
    itemsLength: {
        type: (StringConstructor | NumberConstructor)[];
        required: true;
    };
}>>;
type VDataTableServer = InstanceType<typeof VDataTableServer>;

declare const VDataTableFooter: {
    new (...args: any[]): {
        $: vue.ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            itemsPerPageText: string;
            pageText: string;
            nextIcon: string;
            prevIcon: string;
            firstIcon: string;
            lastIcon: string;
            showCurrentPage: boolean;
            firstPageLabel: string;
            prevPageLabel: string;
            nextPageLabel: string;
            lastPageLabel: string;
            itemsPerPageOptions: {
                title: string;
                value: number;
            }[];
        }> & Omit<{
            itemsPerPageText: string;
            pageText: string;
            nextIcon: string;
            prevIcon: string;
            firstIcon: string;
            lastIcon: string;
            showCurrentPage: boolean;
            firstPageLabel: string;
            prevPageLabel: string;
            nextPageLabel: string;
            lastPageLabel: string;
            itemsPerPageOptions: {
                title: string;
                value: number;
            }[];
        } & {} & {
            $children?: {} | vue.VNodeChild | {
                prepend?: (() => vue.VNodeChild) | undefined;
            };
            'v-slots'?: {
                prepend?: false | (() => vue.VNodeChild) | undefined;
            } | undefined;
        } & {
            "v-slot:prepend"?: false | (() => vue.VNodeChild) | undefined;
        } & vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, "itemsPerPageText" | "pageText" | "nextIcon" | "prevIcon" | "firstIcon" | "lastIcon" | "showCurrentPage" | "firstPageLabel" | "prevPageLabel" | "nextPageLabel" | "lastPageLabel" | "itemsPerPageOptions">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: vue.Slot | undefined;
        }>;
        $root: vue.ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, vue.ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null;
        $parent: vue.ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, vue.ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: vue.ComponentOptionsBase<{
            itemsPerPageText: string;
            pageText: string;
            nextIcon: string;
            prevIcon: string;
            firstIcon: string;
            lastIcon: string;
            showCurrentPage: boolean;
            firstPageLabel: string;
            prevPageLabel: string;
            nextPageLabel: string;
            lastPageLabel: string;
            itemsPerPageOptions: {
                title: string;
                value: number;
            }[];
        } & {} & {
            $children?: {} | vue.VNodeChild | {
                prepend?: (() => vue.VNodeChild) | undefined;
            };
            'v-slots'?: {
                prepend?: false | (() => vue.VNodeChild) | undefined;
            } | undefined;
        } & {
            "v-slot:prepend"?: false | (() => vue.VNodeChild) | undefined;
        }, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, {
            itemsPerPageText: string;
            pageText: string;
            nextIcon: string;
            prevIcon: string;
            firstIcon: string;
            lastIcon: string;
            showCurrentPage: boolean;
            firstPageLabel: string;
            prevPageLabel: string;
            nextPageLabel: string;
            lastPageLabel: string;
            itemsPerPageOptions: {
                title: string;
                value: number;
            }[];
        }, {}, string> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: vue.DebuggerEvent) => void) | ((e: vue.DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: vue.DebuggerEvent) => void) | ((e: vue.DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: vue.ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, vue.ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null, info: string) => boolean | void) | ((err: unknown, instance: vue.ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, vue.ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof vue.nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: vue.WatchOptions<boolean> | undefined): vue.WatchStopHandle;
    } & {
        itemsPerPageText: string;
        pageText: string;
        nextIcon: string;
        prevIcon: string;
        firstIcon: string;
        lastIcon: string;
        showCurrentPage: boolean;
        firstPageLabel: string;
        prevPageLabel: string;
        nextPageLabel: string;
        lastPageLabel: string;
        itemsPerPageOptions: {
            title: string;
            value: number;
        }[];
    } & {} & {
        $children?: {} | vue.VNodeChild | {
            prepend?: (() => vue.VNodeChild) | undefined;
        };
        'v-slots'?: {
            prepend?: false | (() => vue.VNodeChild) | undefined;
        } | undefined;
    } & {
        "v-slot:prepend"?: false | (() => vue.VNodeChild) | undefined;
    } & vue.ShallowUnwrapRef<() => JSX.Element> & {} & vue.ComponentCustomProperties & {};
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & vue.ComponentOptionsBase<{
    itemsPerPageText: string;
    pageText: string;
    nextIcon: string;
    prevIcon: string;
    firstIcon: string;
    lastIcon: string;
    showCurrentPage: boolean;
    firstPageLabel: string;
    prevPageLabel: string;
    nextPageLabel: string;
    lastPageLabel: string;
    itemsPerPageOptions: {
        title: string;
        value: number;
    }[];
} & {} & {
    $children?: {} | vue.VNodeChild | {
        prepend?: (() => vue.VNodeChild) | undefined;
    };
    'v-slots'?: {
        prepend?: false | (() => vue.VNodeChild) | undefined;
    } | undefined;
} & {
    "v-slot:prepend"?: false | (() => vue.VNodeChild) | undefined;
}, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, {
    itemsPerPageText: string;
    pageText: string;
    nextIcon: string;
    prevIcon: string;
    firstIcon: string;
    lastIcon: string;
    showCurrentPage: boolean;
    firstPageLabel: string;
    prevPageLabel: string;
    nextPageLabel: string;
    lastPageLabel: string;
    itemsPerPageOptions: {
        title: string;
        value: number;
    }[];
}, {}, string> & vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps & FilterPropsOptions<{
    prevIcon: {
        type: StringConstructor;
        default: string;
    };
    nextIcon: {
        type: StringConstructor;
        default: string;
    };
    firstIcon: {
        type: StringConstructor;
        default: string;
    };
    lastIcon: {
        type: StringConstructor;
        default: string;
    };
    itemsPerPageText: {
        type: StringConstructor;
        default: string;
    };
    pageText: {
        type: StringConstructor;
        default: string;
    };
    firstPageLabel: {
        type: StringConstructor;
        default: string;
    };
    prevPageLabel: {
        type: StringConstructor;
        default: string;
    };
    nextPageLabel: {
        type: StringConstructor;
        default: string;
    };
    lastPageLabel: {
        type: StringConstructor;
        default: string;
    };
    itemsPerPageOptions: {
        type: PropType<{
            title: string;
            value: number;
        }[]>;
        default: () => {
            value: number;
            title: string;
        }[];
    };
    showCurrentPage: BooleanConstructor;
}, vue.ExtractPropTypes<{
    prevIcon: {
        type: StringConstructor;
        default: string;
    };
    nextIcon: {
        type: StringConstructor;
        default: string;
    };
    firstIcon: {
        type: StringConstructor;
        default: string;
    };
    lastIcon: {
        type: StringConstructor;
        default: string;
    };
    itemsPerPageText: {
        type: StringConstructor;
        default: string;
    };
    pageText: {
        type: StringConstructor;
        default: string;
    };
    firstPageLabel: {
        type: StringConstructor;
        default: string;
    };
    prevPageLabel: {
        type: StringConstructor;
        default: string;
    };
    nextPageLabel: {
        type: StringConstructor;
        default: string;
    };
    lastPageLabel: {
        type: StringConstructor;
        default: string;
    };
    itemsPerPageOptions: {
        type: PropType<{
            title: string;
            value: number;
        }[]>;
        default: () => {
            value: number;
            title: string;
        }[];
    };
    showCurrentPage: BooleanConstructor;
}>>;

type InfiniteScrollSide = 'start' | 'end' | 'both';
type InfiniteScrollStatus = 'ok' | 'empty' | 'loading' | 'error';
type InfiniteScrollSlot = {
    side: InfiniteScrollSide;
    props: {
        onClick: () => (side: InfiniteScrollSide) => void;
        color: string | undefined;
    };
};
declare const VInfiniteScroll: {
    new (...args: any[]): {
        $: vue.ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            direction: "horizontal" | "vertical";
            mode: "manual" | "intersect";
            side: InfiniteScrollSide;
            loadMoreText: string;
            emptyText: string;
        }> & Omit<{
            direction: "horizontal" | "vertical";
            mode: "manual" | "intersect";
            side: InfiniteScrollSide;
            loadMoreText: string;
            emptyText: string;
        } & {
            height?: string | number | undefined;
            width?: string | number | undefined;
            color?: string | undefined;
            margin?: string | number | undefined;
            maxHeight?: string | number | undefined;
            maxWidth?: string | number | undefined;
            minHeight?: string | number | undefined;
            minWidth?: string | number | undefined;
        } & {
            $children?: vue.VNodeChild | {
                default?: ((args_0: InfiniteScrollSlot) => vue.VNodeChild) | undefined;
                loading?: ((args_0: InfiniteScrollSlot) => vue.VNodeChild) | undefined;
                error?: ((args_0: InfiniteScrollSlot) => vue.VNodeChild) | undefined;
                empty?: ((args_0: InfiniteScrollSlot) => vue.VNodeChild) | undefined;
                'load-more'?: ((args_0: InfiniteScrollSlot) => vue.VNodeChild) | undefined;
            } | ((args_0: InfiniteScrollSlot) => vue.VNodeChild);
            'v-slots'?: {
                default?: false | ((args_0: InfiniteScrollSlot) => vue.VNodeChild) | undefined;
                loading?: false | ((args_0: InfiniteScrollSlot) => vue.VNodeChild) | undefined;
                error?: false | ((args_0: InfiniteScrollSlot) => vue.VNodeChild) | undefined;
                empty?: false | ((args_0: InfiniteScrollSlot) => vue.VNodeChild) | undefined;
                'load-more'?: false | ((args_0: InfiniteScrollSlot) => vue.VNodeChild) | undefined;
            } | undefined;
        } & {
            "v-slot:default"?: false | ((args_0: InfiniteScrollSlot) => vue.VNodeChild) | undefined;
            "v-slot:loading"?: false | ((args_0: InfiniteScrollSlot) => vue.VNodeChild) | undefined;
            "v-slot:error"?: false | ((args_0: InfiniteScrollSlot) => vue.VNodeChild) | undefined;
            "v-slot:empty"?: false | ((args_0: InfiniteScrollSlot) => vue.VNodeChild) | undefined;
            "v-slot:load-more"?: false | ((args_0: InfiniteScrollSlot) => vue.VNodeChild) | undefined;
        } & {
            onLoad?: ((options: {
                side: InfiniteScrollSide;
                done: (status: InfiniteScrollStatus) => void;
            }) => any) | undefined;
        } & vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, "direction" | "mode" | "side" | "loadMoreText" | "emptyText">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: vue.Slot | undefined;
        }>;
        $root: vue.ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, vue.ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null;
        $parent: vue.ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, vue.ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null;
        $emit: (event: "load", options: {
            side: InfiniteScrollSide;
            done: (status: InfiniteScrollStatus) => void;
        }) => void;
        $el: any;
        $options: vue.ComponentOptionsBase<{
            direction: "horizontal" | "vertical";
            mode: "manual" | "intersect";
            side: InfiniteScrollSide;
            loadMoreText: string;
            emptyText: string;
        } & {
            height?: string | number | undefined;
            width?: string | number | undefined;
            color?: string | undefined;
            margin?: string | number | undefined;
            maxHeight?: string | number | undefined;
            maxWidth?: string | number | undefined;
            minHeight?: string | number | undefined;
            minWidth?: string | number | undefined;
        } & {
            $children?: vue.VNodeChild | {
                default?: ((args_0: InfiniteScrollSlot) => vue.VNodeChild) | undefined;
                loading?: ((args_0: InfiniteScrollSlot) => vue.VNodeChild) | undefined;
                error?: ((args_0: InfiniteScrollSlot) => vue.VNodeChild) | undefined;
                empty?: ((args_0: InfiniteScrollSlot) => vue.VNodeChild) | undefined;
                'load-more'?: ((args_0: InfiniteScrollSlot) => vue.VNodeChild) | undefined;
            } | ((args_0: InfiniteScrollSlot) => vue.VNodeChild);
            'v-slots'?: {
                default?: false | ((args_0: InfiniteScrollSlot) => vue.VNodeChild) | undefined;
                loading?: false | ((args_0: InfiniteScrollSlot) => vue.VNodeChild) | undefined;
                error?: false | ((args_0: InfiniteScrollSlot) => vue.VNodeChild) | undefined;
                empty?: false | ((args_0: InfiniteScrollSlot) => vue.VNodeChild) | undefined;
                'load-more'?: false | ((args_0: InfiniteScrollSlot) => vue.VNodeChild) | undefined;
            } | undefined;
        } & {
            "v-slot:default"?: false | ((args_0: InfiniteScrollSlot) => vue.VNodeChild) | undefined;
            "v-slot:loading"?: false | ((args_0: InfiniteScrollSlot) => vue.VNodeChild) | undefined;
            "v-slot:error"?: false | ((args_0: InfiniteScrollSlot) => vue.VNodeChild) | undefined;
            "v-slot:empty"?: false | ((args_0: InfiniteScrollSlot) => vue.VNodeChild) | undefined;
            "v-slot:load-more"?: false | ((args_0: InfiniteScrollSlot) => vue.VNodeChild) | undefined;
        } & {
            onLoad?: ((options: {
                side: InfiniteScrollSide;
                done: (status: InfiniteScrollStatus) => void;
            }) => any) | undefined;
        }, void, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, {
            load: (options: {
                side: InfiniteScrollSide;
                done: (status: InfiniteScrollStatus) => void;
            }) => true;
        }, string, {
            direction: "horizontal" | "vertical";
            mode: "manual" | "intersect";
            side: InfiniteScrollSide;
            loadMoreText: string;
            emptyText: string;
        }, {}, string> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: vue.DebuggerEvent) => void) | ((e: vue.DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: vue.DebuggerEvent) => void) | ((e: vue.DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: vue.ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, vue.ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null, info: string) => boolean | void) | ((err: unknown, instance: vue.ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, vue.ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: vue.WatchOptions<boolean> | undefined): vue.WatchStopHandle;
    } & {
        direction: "horizontal" | "vertical";
        mode: "manual" | "intersect";
        side: InfiniteScrollSide;
        loadMoreText: string;
        emptyText: string;
    } & {
        height?: string | number | undefined;
        width?: string | number | undefined;
        color?: string | undefined;
        margin?: string | number | undefined;
        maxHeight?: string | number | undefined;
        maxWidth?: string | number | undefined;
        minHeight?: string | number | undefined;
        minWidth?: string | number | undefined;
    } & {
        $children?: vue.VNodeChild | {
            default?: ((args_0: InfiniteScrollSlot) => vue.VNodeChild) | undefined;
            loading?: ((args_0: InfiniteScrollSlot) => vue.VNodeChild) | undefined;
            error?: ((args_0: InfiniteScrollSlot) => vue.VNodeChild) | undefined;
            empty?: ((args_0: InfiniteScrollSlot) => vue.VNodeChild) | undefined;
            'load-more'?: ((args_0: InfiniteScrollSlot) => vue.VNodeChild) | undefined;
        } | ((args_0: InfiniteScrollSlot) => vue.VNodeChild);
        'v-slots'?: {
            default?: false | ((args_0: InfiniteScrollSlot) => vue.VNodeChild) | undefined;
            loading?: false | ((args_0: InfiniteScrollSlot) => vue.VNodeChild) | undefined;
            error?: false | ((args_0: InfiniteScrollSlot) => vue.VNodeChild) | undefined;
            empty?: false | ((args_0: InfiniteScrollSlot) => vue.VNodeChild) | undefined;
            'load-more'?: false | ((args_0: InfiniteScrollSlot) => vue.VNodeChild) | undefined;
        } | undefined;
    } & {
        "v-slot:default"?: false | ((args_0: InfiniteScrollSlot) => vue.VNodeChild) | undefined;
        "v-slot:loading"?: false | ((args_0: InfiniteScrollSlot) => vue.VNodeChild) | undefined;
        "v-slot:error"?: false | ((args_0: InfiniteScrollSlot) => vue.VNodeChild) | undefined;
        "v-slot:empty"?: false | ((args_0: InfiniteScrollSlot) => vue.VNodeChild) | undefined;
        "v-slot:load-more"?: false | ((args_0: InfiniteScrollSlot) => vue.VNodeChild) | undefined;
    } & {
        onLoad?: ((options: {
            side: InfiniteScrollSide;
            done: (status: InfiniteScrollStatus) => void;
        }) => any) | undefined;
    } & vue.ShallowUnwrapRef<{}> & {} & vue.ComponentCustomProperties & {};
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & vue.ComponentOptionsBase<{
    direction: "horizontal" | "vertical";
    mode: "manual" | "intersect";
    side: InfiniteScrollSide;
    loadMoreText: string;
    emptyText: string;
} & {
    height?: string | number | undefined;
    width?: string | number | undefined;
    color?: string | undefined;
    margin?: string | number | undefined;
    maxHeight?: string | number | undefined;
    maxWidth?: string | number | undefined;
    minHeight?: string | number | undefined;
    minWidth?: string | number | undefined;
} & {
    $children?: vue.VNodeChild | {
        default?: ((args_0: InfiniteScrollSlot) => vue.VNodeChild) | undefined;
        loading?: ((args_0: InfiniteScrollSlot) => vue.VNodeChild) | undefined;
        error?: ((args_0: InfiniteScrollSlot) => vue.VNodeChild) | undefined;
        empty?: ((args_0: InfiniteScrollSlot) => vue.VNodeChild) | undefined;
        'load-more'?: ((args_0: InfiniteScrollSlot) => vue.VNodeChild) | undefined;
    } | ((args_0: InfiniteScrollSlot) => vue.VNodeChild);
    'v-slots'?: {
        default?: false | ((args_0: InfiniteScrollSlot) => vue.VNodeChild) | undefined;
        loading?: false | ((args_0: InfiniteScrollSlot) => vue.VNodeChild) | undefined;
        error?: false | ((args_0: InfiniteScrollSlot) => vue.VNodeChild) | undefined;
        empty?: false | ((args_0: InfiniteScrollSlot) => vue.VNodeChild) | undefined;
        'load-more'?: false | ((args_0: InfiniteScrollSlot) => vue.VNodeChild) | undefined;
    } | undefined;
} & {
    "v-slot:default"?: false | ((args_0: InfiniteScrollSlot) => vue.VNodeChild) | undefined;
    "v-slot:loading"?: false | ((args_0: InfiniteScrollSlot) => vue.VNodeChild) | undefined;
    "v-slot:error"?: false | ((args_0: InfiniteScrollSlot) => vue.VNodeChild) | undefined;
    "v-slot:empty"?: false | ((args_0: InfiniteScrollSlot) => vue.VNodeChild) | undefined;
    "v-slot:load-more"?: false | ((args_0: InfiniteScrollSlot) => vue.VNodeChild) | undefined;
} & {
    onLoad?: ((options: {
        side: InfiniteScrollSide;
        done: (status: InfiniteScrollStatus) => void;
    }) => any) | undefined;
}, void, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, {
    load: (options: {
        side: InfiniteScrollSide;
        done: (status: InfiniteScrollStatus) => void;
    }) => true;
}, string, {
    direction: "horizontal" | "vertical";
    mode: "manual" | "intersect";
    side: InfiniteScrollSide;
    loadMoreText: string;
    emptyText: string;
}, {}, string> & vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps & FilterPropsOptions<{
    height: (StringConstructor | NumberConstructor)[];
    maxHeight: (StringConstructor | NumberConstructor)[];
    maxWidth: (StringConstructor | NumberConstructor)[];
    minHeight: (StringConstructor | NumberConstructor)[];
    minWidth: (StringConstructor | NumberConstructor)[];
    width: (StringConstructor | NumberConstructor)[];
    color: StringConstructor;
    direction: {
        type: PropType<"horizontal" | "vertical">;
        default: string;
        validator: (v: any) => boolean;
    };
    side: {
        type: PropType<InfiniteScrollSide>;
        default: string;
        validator: (v: any) => boolean;
    };
    mode: {
        type: PropType<"manual" | "intersect">;
        default: string;
        validator: (v: any) => boolean;
    };
    margin: (StringConstructor | NumberConstructor)[];
    loadMoreText: {
        type: StringConstructor;
        default: string;
    };
    emptyText: {
        type: StringConstructor;
        default: string;
    };
}, vue.ExtractPropTypes<{
    height: (StringConstructor | NumberConstructor)[];
    maxHeight: (StringConstructor | NumberConstructor)[];
    maxWidth: (StringConstructor | NumberConstructor)[];
    minHeight: (StringConstructor | NumberConstructor)[];
    minWidth: (StringConstructor | NumberConstructor)[];
    width: (StringConstructor | NumberConstructor)[];
    color: StringConstructor;
    direction: {
        type: PropType<"horizontal" | "vertical">;
        default: string;
        validator: (v: any) => boolean;
    };
    side: {
        type: PropType<InfiniteScrollSide>;
        default: string;
        validator: (v: any) => boolean;
    };
    mode: {
        type: PropType<"manual" | "intersect">;
        default: string;
        validator: (v: any) => boolean;
    };
    margin: (StringConstructor | NumberConstructor)[];
    loadMoreText: {
        type: StringConstructor;
        default: string;
    };
    emptyText: {
        type: StringConstructor;
        default: string;
    };
}>>;
type VInfiniteScroll = InstanceType<typeof VInfiniteScroll>;

declare const VSkeletonLoader: {
    new (...args: any[]): {
        $: vue.ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            type: "button" | "article" | "table" | "image" | "text" | "table-row" | "list-item" | "sentences" | "heading" | "subtitle" | "divider" | "chip" | "actions" | "avatar" | "paragraph" | "card" | "card-avatar" | "date-picker" | "date-picker-options" | "date-picker-days" | "list-item-avatar" | "list-item-two-line" | "list-item-avatar-two-line" | "list-item-three-line" | "list-item-avatar-three-line" | "table-heading" | "table-thead" | "table-tbody" | "table-row-divider" | "table-tfoot" | ("button" | "article" | "table" | "image" | "text" | "table-row" | "list-item" | "sentences" | "heading" | "subtitle" | "divider" | "chip" | "actions" | "avatar" | "paragraph" | "card" | "card-avatar" | "date-picker" | "date-picker-options" | "date-picker-days" | "list-item-avatar" | "list-item-two-line" | "list-item-avatar-two-line" | "list-item-three-line" | "list-item-avatar-three-line" | "table-heading" | "table-thead" | "table-tbody" | "table-row-divider" | "table-tfoot")[];
            loading: boolean;
            loadingText: string;
            boilerplate: boolean;
        }> & Omit<{
            type: "button" | "article" | "table" | "image" | "text" | "table-row" | "list-item" | "sentences" | "heading" | "subtitle" | "divider" | "chip" | "actions" | "avatar" | "paragraph" | "card" | "card-avatar" | "date-picker" | "date-picker-options" | "date-picker-days" | "list-item-avatar" | "list-item-two-line" | "list-item-avatar-two-line" | "list-item-three-line" | "list-item-avatar-three-line" | "table-heading" | "table-thead" | "table-tbody" | "table-row-divider" | "table-tfoot" | ("button" | "article" | "table" | "image" | "text" | "table-row" | "list-item" | "sentences" | "heading" | "subtitle" | "divider" | "chip" | "actions" | "avatar" | "paragraph" | "card" | "card-avatar" | "date-picker" | "date-picker-options" | "date-picker-days" | "list-item-avatar" | "list-item-two-line" | "list-item-avatar-two-line" | "list-item-three-line" | "list-item-avatar-three-line" | "table-heading" | "table-thead" | "table-tbody" | "table-row-divider" | "table-tfoot")[];
            loading: boolean;
            loadingText: string;
            boilerplate: boolean;
        } & {
            height?: string | number | undefined;
            width?: string | number | undefined;
            color?: string | undefined;
            maxHeight?: string | number | undefined;
            maxWidth?: string | number | undefined;
            minHeight?: string | number | undefined;
            minWidth?: string | number | undefined;
            elevation?: string | number | undefined;
            theme?: string | undefined;
        } & {
            $children?: vue.VNodeChild | (() => vue.VNodeChild) | {
                default?: (() => vue.VNodeChild) | undefined;
            };
            'v-slots'?: {
                default?: false | (() => vue.VNodeChild) | undefined;
            } | undefined;
        } & {
            "v-slot:default"?: false | (() => vue.VNodeChild) | undefined;
        } & vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, "type" | "loading" | "loadingText" | "boilerplate">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: vue.Slot | undefined;
        }>;
        $root: vue.ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, vue.ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null;
        $parent: vue.ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, vue.ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: vue.ComponentOptionsBase<{
            type: "button" | "article" | "table" | "image" | "text" | "table-row" | "list-item" | "sentences" | "heading" | "subtitle" | "divider" | "chip" | "actions" | "avatar" | "paragraph" | "card" | "card-avatar" | "date-picker" | "date-picker-options" | "date-picker-days" | "list-item-avatar" | "list-item-two-line" | "list-item-avatar-two-line" | "list-item-three-line" | "list-item-avatar-three-line" | "table-heading" | "table-thead" | "table-tbody" | "table-row-divider" | "table-tfoot" | ("button" | "article" | "table" | "image" | "text" | "table-row" | "list-item" | "sentences" | "heading" | "subtitle" | "divider" | "chip" | "actions" | "avatar" | "paragraph" | "card" | "card-avatar" | "date-picker" | "date-picker-options" | "date-picker-days" | "list-item-avatar" | "list-item-two-line" | "list-item-avatar-two-line" | "list-item-three-line" | "list-item-avatar-three-line" | "table-heading" | "table-thead" | "table-tbody" | "table-row-divider" | "table-tfoot")[];
            loading: boolean;
            loadingText: string;
            boilerplate: boolean;
        } & {
            height?: string | number | undefined;
            width?: string | number | undefined;
            color?: string | undefined;
            maxHeight?: string | number | undefined;
            maxWidth?: string | number | undefined;
            minHeight?: string | number | undefined;
            minWidth?: string | number | undefined;
            elevation?: string | number | undefined;
            theme?: string | undefined;
        } & {
            $children?: vue.VNodeChild | (() => vue.VNodeChild) | {
                default?: (() => vue.VNodeChild) | undefined;
            };
            'v-slots'?: {
                default?: false | (() => vue.VNodeChild) | undefined;
            } | undefined;
        } & {
            "v-slot:default"?: false | (() => vue.VNodeChild) | undefined;
        }, {}, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, {
            type: "button" | "article" | "table" | "image" | "text" | "table-row" | "list-item" | "sentences" | "heading" | "subtitle" | "divider" | "chip" | "actions" | "avatar" | "paragraph" | "card" | "card-avatar" | "date-picker" | "date-picker-options" | "date-picker-days" | "list-item-avatar" | "list-item-two-line" | "list-item-avatar-two-line" | "list-item-three-line" | "list-item-avatar-three-line" | "table-heading" | "table-thead" | "table-tbody" | "table-row-divider" | "table-tfoot" | ("button" | "article" | "table" | "image" | "text" | "table-row" | "list-item" | "sentences" | "heading" | "subtitle" | "divider" | "chip" | "actions" | "avatar" | "paragraph" | "card" | "card-avatar" | "date-picker" | "date-picker-options" | "date-picker-days" | "list-item-avatar" | "list-item-two-line" | "list-item-avatar-two-line" | "list-item-three-line" | "list-item-avatar-three-line" | "table-heading" | "table-thead" | "table-tbody" | "table-row-divider" | "table-tfoot")[];
            loading: boolean;
            loadingText: string;
            boilerplate: boolean;
        }, {}, string> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: vue.DebuggerEvent) => void) | ((e: vue.DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: vue.DebuggerEvent) => void) | ((e: vue.DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: vue.ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, vue.ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null, info: string) => boolean | void) | ((err: unknown, instance: vue.ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, vue.ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof vue.nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: vue.WatchOptions<boolean> | undefined): vue.WatchStopHandle;
    } & {
        type: "button" | "article" | "table" | "image" | "text" | "table-row" | "list-item" | "sentences" | "heading" | "subtitle" | "divider" | "chip" | "actions" | "avatar" | "paragraph" | "card" | "card-avatar" | "date-picker" | "date-picker-options" | "date-picker-days" | "list-item-avatar" | "list-item-two-line" | "list-item-avatar-two-line" | "list-item-three-line" | "list-item-avatar-three-line" | "table-heading" | "table-thead" | "table-tbody" | "table-row-divider" | "table-tfoot" | ("button" | "article" | "table" | "image" | "text" | "table-row" | "list-item" | "sentences" | "heading" | "subtitle" | "divider" | "chip" | "actions" | "avatar" | "paragraph" | "card" | "card-avatar" | "date-picker" | "date-picker-options" | "date-picker-days" | "list-item-avatar" | "list-item-two-line" | "list-item-avatar-two-line" | "list-item-three-line" | "list-item-avatar-three-line" | "table-heading" | "table-thead" | "table-tbody" | "table-row-divider" | "table-tfoot")[];
        loading: boolean;
        loadingText: string;
        boilerplate: boolean;
    } & {
        height?: string | number | undefined;
        width?: string | number | undefined;
        color?: string | undefined;
        maxHeight?: string | number | undefined;
        maxWidth?: string | number | undefined;
        minHeight?: string | number | undefined;
        minWidth?: string | number | undefined;
        elevation?: string | number | undefined;
        theme?: string | undefined;
    } & {
        $children?: vue.VNodeChild | (() => vue.VNodeChild) | {
            default?: (() => vue.VNodeChild) | undefined;
        };
        'v-slots'?: {
            default?: false | (() => vue.VNodeChild) | undefined;
        } | undefined;
    } & {
        "v-slot:default"?: false | (() => vue.VNodeChild) | undefined;
    } & vue.ShallowUnwrapRef<{}> & {} & vue.ComponentCustomProperties & {};
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & vue.ComponentOptionsBase<{
    type: "button" | "article" | "table" | "image" | "text" | "table-row" | "list-item" | "sentences" | "heading" | "subtitle" | "divider" | "chip" | "actions" | "avatar" | "paragraph" | "card" | "card-avatar" | "date-picker" | "date-picker-options" | "date-picker-days" | "list-item-avatar" | "list-item-two-line" | "list-item-avatar-two-line" | "list-item-three-line" | "list-item-avatar-three-line" | "table-heading" | "table-thead" | "table-tbody" | "table-row-divider" | "table-tfoot" | ("button" | "article" | "table" | "image" | "text" | "table-row" | "list-item" | "sentences" | "heading" | "subtitle" | "divider" | "chip" | "actions" | "avatar" | "paragraph" | "card" | "card-avatar" | "date-picker" | "date-picker-options" | "date-picker-days" | "list-item-avatar" | "list-item-two-line" | "list-item-avatar-two-line" | "list-item-three-line" | "list-item-avatar-three-line" | "table-heading" | "table-thead" | "table-tbody" | "table-row-divider" | "table-tfoot")[];
    loading: boolean;
    loadingText: string;
    boilerplate: boolean;
} & {
    height?: string | number | undefined;
    width?: string | number | undefined;
    color?: string | undefined;
    maxHeight?: string | number | undefined;
    maxWidth?: string | number | undefined;
    minHeight?: string | number | undefined;
    minWidth?: string | number | undefined;
    elevation?: string | number | undefined;
    theme?: string | undefined;
} & {
    $children?: vue.VNodeChild | (() => vue.VNodeChild) | {
        default?: (() => vue.VNodeChild) | undefined;
    };
    'v-slots'?: {
        default?: false | (() => vue.VNodeChild) | undefined;
    } | undefined;
} & {
    "v-slot:default"?: false | (() => vue.VNodeChild) | undefined;
}, {}, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, {
    type: "button" | "article" | "table" | "image" | "text" | "table-row" | "list-item" | "sentences" | "heading" | "subtitle" | "divider" | "chip" | "actions" | "avatar" | "paragraph" | "card" | "card-avatar" | "date-picker" | "date-picker-options" | "date-picker-days" | "list-item-avatar" | "list-item-two-line" | "list-item-avatar-two-line" | "list-item-three-line" | "list-item-avatar-three-line" | "table-heading" | "table-thead" | "table-tbody" | "table-row-divider" | "table-tfoot" | ("button" | "article" | "table" | "image" | "text" | "table-row" | "list-item" | "sentences" | "heading" | "subtitle" | "divider" | "chip" | "actions" | "avatar" | "paragraph" | "card" | "card-avatar" | "date-picker" | "date-picker-options" | "date-picker-days" | "list-item-avatar" | "list-item-two-line" | "list-item-avatar-two-line" | "list-item-three-line" | "list-item-avatar-three-line" | "table-heading" | "table-thead" | "table-tbody" | "table-row-divider" | "table-tfoot")[];
    loading: boolean;
    loadingText: string;
    boilerplate: boolean;
}, {}, string> & vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps & FilterPropsOptions<{
    theme: StringConstructor;
    elevation: {
        type: (StringConstructor | NumberConstructor)[];
        validator(v: any): boolean;
    };
    height: (StringConstructor | NumberConstructor)[];
    maxHeight: (StringConstructor | NumberConstructor)[];
    maxWidth: (StringConstructor | NumberConstructor)[];
    minHeight: (StringConstructor | NumberConstructor)[];
    minWidth: (StringConstructor | NumberConstructor)[];
    width: (StringConstructor | NumberConstructor)[];
    boilerplate: BooleanConstructor;
    color: StringConstructor;
    loading: BooleanConstructor;
    loadingText: {
        type: StringConstructor;
        default: string;
    };
    type: {
        type: PropType<"button" | "article" | "table" | "image" | "text" | "table-row" | "list-item" | "sentences" | "heading" | "subtitle" | "divider" | "chip" | "actions" | "avatar" | "paragraph" | "card" | "card-avatar" | "date-picker" | "date-picker-options" | "date-picker-days" | "list-item-avatar" | "list-item-two-line" | "list-item-avatar-two-line" | "list-item-three-line" | "list-item-avatar-three-line" | "table-heading" | "table-thead" | "table-tbody" | "table-row-divider" | "table-tfoot" | ("button" | "article" | "table" | "image" | "text" | "table-row" | "list-item" | "sentences" | "heading" | "subtitle" | "divider" | "chip" | "actions" | "avatar" | "paragraph" | "card" | "card-avatar" | "date-picker" | "date-picker-options" | "date-picker-days" | "list-item-avatar" | "list-item-two-line" | "list-item-avatar-two-line" | "list-item-three-line" | "list-item-avatar-three-line" | "table-heading" | "table-thead" | "table-tbody" | "table-row-divider" | "table-tfoot")[]>;
        default: string;
    };
}, vue.ExtractPropTypes<{
    theme: StringConstructor;
    elevation: {
        type: (StringConstructor | NumberConstructor)[];
        validator(v: any): boolean;
    };
    height: (StringConstructor | NumberConstructor)[];
    maxHeight: (StringConstructor | NumberConstructor)[];
    maxWidth: (StringConstructor | NumberConstructor)[];
    minHeight: (StringConstructor | NumberConstructor)[];
    minWidth: (StringConstructor | NumberConstructor)[];
    width: (StringConstructor | NumberConstructor)[];
    boilerplate: BooleanConstructor;
    color: StringConstructor;
    loading: BooleanConstructor;
    loadingText: {
        type: StringConstructor;
        default: string;
    };
    type: {
        type: PropType<"button" | "article" | "table" | "image" | "text" | "table-row" | "list-item" | "sentences" | "heading" | "subtitle" | "divider" | "chip" | "actions" | "avatar" | "paragraph" | "card" | "card-avatar" | "date-picker" | "date-picker-options" | "date-picker-days" | "list-item-avatar" | "list-item-two-line" | "list-item-avatar-two-line" | "list-item-three-line" | "list-item-avatar-three-line" | "table-heading" | "table-thead" | "table-tbody" | "table-row-divider" | "table-tfoot" | ("button" | "article" | "table" | "image" | "text" | "table-row" | "list-item" | "sentences" | "heading" | "subtitle" | "divider" | "chip" | "actions" | "avatar" | "paragraph" | "card" | "card-avatar" | "date-picker" | "date-picker-options" | "date-picker-days" | "list-item-avatar" | "list-item-two-line" | "list-item-avatar-two-line" | "list-item-three-line" | "list-item-avatar-three-line" | "table-heading" | "table-thead" | "table-tbody" | "table-row-divider" | "table-tfoot")[]>;
        default: string;
    };
}>>;
type VSkeletonLoader = InstanceType<typeof VSkeletonLoader>;

export { VDataTable, VDataTableFooter, VDataTableRow, VDataTableRows, VDataTableServer, VDataTableVirtual, VInfiniteScroll, VSkeletonLoader };
